
RYDZ_118849.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b05c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  0800b200  0800b200  0001b200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be70  0800be70  00020494  2**0
                  CONTENTS
  4 .ARM          00000000  0800be70  0800be70  00020494  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be70  0800be70  00020494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000494  20000000  0800be78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020494  2**0
                  CONTENTS
 10 .bss          00008584  20000494  20000494  00020494  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a18  20008a18  00020494  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a6e  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f2  00000000  00000000  00031f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00034328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de8  00000000  00000000  000351e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c5f  00000000  00000000  00035fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126c4  00000000  00000000  00057c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc7d7  00000000  00000000  0006a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136aca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e98  00000000  00000000  00136b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1e4 	.word	0x0800b1e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	0800b1e4 	.word	0x0800b1e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <USART_kbhit>:
// __________________________________ USART FUNCTIONS BEGIN __________________________________



uint8_t USART_kbhit()																			// Funkcja sprawdza czy jest cos w buforze,
{																								// jezeli nie ma zwraca false(0) inaczej true(1)
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	if (RX_IDX_EMPTY == RX__IDX_BUSY) return 0;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <USART_kbhit+0x20>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <USART_kbhit+0x24>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d101      	bne.n	8000c00 <USART_kbhit+0x14>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e000      	b.n	8000c02 <USART_kbhit+0x16>
	else return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000e34 	.word	0x20000e34
 8000c10:	20000e38 	.word	0x20000e38

08000c14 <USART_getChar>:

int16_t USART_getChar()																			// Funkcja pobierająca znak z bufora
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
	int16_t charTMP;
	if (RX_IDX_EMPTY != RX__IDX_BUSY)
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <USART_getChar+0x4c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <USART_getChar+0x50>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d014      	beq.n	8000c50 <USART_getChar+0x3c>
	{
		charTMP = RX_BF[RX__IDX_BUSY];
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <USART_getChar+0x50>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <USART_getChar+0x54>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	80fb      	strh	r3, [r7, #6]
		RX__IDX_BUSY++;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <USART_getChar+0x50>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <USART_getChar+0x50>)
 8000c38:	6013      	str	r3, [r2, #0]
		if (RX__IDX_BUSY >= RX_BF_length) RX__IDX_BUSY = 0;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <USART_getChar+0x50>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c42:	db02      	blt.n	8000c4a <USART_getChar+0x36>
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <USART_getChar+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
		return charTMP;
 8000c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c4e:	e001      	b.n	8000c54 <USART_getChar+0x40>
	}
	else return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	20000e34 	.word	0x20000e34
 8000c64:	20000e38 	.word	0x20000e38
 8000c68:	2000064c 	.word	0x2000064c

08000c6c <USART_fsend>:

void USART_fsend(char* format, ...)														// Wysyłanie do terminala
{
 8000c6c:	b40f      	push	{r0, r1, r2, r3}
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000c74:	af00      	add	r7, sp, #0
	char tmp_rs[RX_BF_length];															// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Jezeli tu damy za małą wartość program sie wysypie???
	int i;
	__IO int idx;
	va_list arglist;																	// Zmienna do obsługi formatowania argumentów
	va_start(arglist,format);															// Umożliwia dostęp do zmiennych argumentów funkcji
 8000c76:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8000c7a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c7e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000c82:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_rs,format,arglist);													// Połączenie łańcucha argumentów i przypisanie do tmp_rs
 8000c84:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000c88:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000c8c:	f107 000c 	add.w	r0, r7, #12
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8000c96:	f008 f863 	bl	8008d60 <vsiprintf>
	va_end(arglist);
	idx = TX_IDX_EMPTY;
 8000c9a:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <USART_fsend+0x13c>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ca2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000ca6:	601a      	str	r2, [r3, #0]

	for(i = 0; i < strlen(tmp_rs) ; i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000cae:	e02c      	b.n	8000d0a <USART_fsend+0x9e>
	{
		TX_BF[idx] = tmp_rs[i];															// Przepisanie znaku do bufora transmisji
 8000cb0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000cb4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8000cbe:	f5a2 7101 	sub.w	r1, r2, #516	; 0x204
 8000cc2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000cc6:	440a      	add	r2, r1
 8000cc8:	7811      	ldrb	r1, [r2, #0]
 8000cca:	4a38      	ldr	r2, [pc, #224]	; (8000dac <USART_fsend+0x140>)
 8000ccc:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000cce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000cd2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000cde:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000ce2:	601a      	str	r2, [r3, #0]
		if (idx >= TX_BF_length) idx = 0;												// Zawinięcie bufora jeżeli indeks wyjdzie poza zakres
 8000ce4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ce8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8000cf2:	db05      	blt.n	8000d00 <USART_fsend+0x94>
 8000cf4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000cf8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
	for(i = 0; i < strlen(tmp_rs) ; i++)
 8000d00:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d04:	3301      	adds	r3, #1
 8000d06:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fa70 	bl	80001f4 <strlen>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d8c8      	bhi.n	8000cb0 <USART_fsend+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1e:	b672      	cpsid	i
}
 8000d20:	bf00      	nop
	}
	__disable_irq();																	// Wyłączenie zapytań przerwań

	if ((TX_IDX_EMPTY == TX_IDX_BUSY) && (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET))
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <USART_fsend+0x13c>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <USART_fsend+0x144>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d12a      	bne.n	8000d84 <USART_fsend+0x118>
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <USART_fsend+0x148>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d38:	2b80      	cmp	r3, #128	; 0x80
 8000d3a:	d123      	bne.n	8000d84 <USART_fsend+0x118>
	{
		TX_IDX_EMPTY = idx;
 8000d3c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000d40:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <USART_fsend+0x13c>)
 8000d48:	6013      	str	r3, [r2, #0]
		uint8_t tmp = TX_BF[TX_IDX_BUSY];												// Zmienna zawierająca znak do wysłania
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <USART_fsend+0x144>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <USART_fsend+0x140>)
 8000d50:	5cd2      	ldrb	r2, [r2, r3]
 8000d52:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000d56:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8000d5a:	701a      	strb	r2, [r3, #0]
		TX_IDX_BUSY++;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <USART_fsend+0x144>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <USART_fsend+0x144>)
 8000d64:	6013      	str	r3, [r2, #0]
		if (TX_IDX_BUSY >= TX_BF_length) TX_IDX_BUSY = 0;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <USART_fsend+0x144>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8000d6e:	db02      	blt.n	8000d76 <USART_fsend+0x10a>
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <USART_fsend+0x144>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);											// Transmisja elementu
 8000d76:	1cfb      	adds	r3, r7, #3
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <USART_fsend+0x148>)
 8000d7e:	f006 fbbd 	bl	80074fc <HAL_UART_Transmit_IT>
	{
 8000d82:	e006      	b.n	8000d92 <USART_fsend+0x126>
	} else TX_IDX_EMPTY = idx;
 8000d84:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000d88:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <USART_fsend+0x13c>)
 8000d90:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d92:	b662      	cpsie	i
}
 8000d94:	bf00      	nop
	__enable_irq();																		// Włączenie zapytań przerwań
}//fsend
 8000d96:	bf00      	nop
 8000d98:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000da2:	b004      	add	sp, #16
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000e3c 	.word	0x20000e3c
 8000dac:	2000084c 	.word	0x2000084c
 8000db0:	20000e40 	.word	0x20000e40
 8000db4:	200005c8 	.word	0x200005c8

08000db8 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <HAL_UART_TxCpltCallback+0x58>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d11e      	bne.n	8000e06 <HAL_UART_TxCpltCallback+0x4e>
	{
		if (TX_IDX_EMPTY != TX_IDX_BUSY)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_UART_TxCpltCallback+0x5c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_UART_TxCpltCallback+0x60>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d018      	beq.n	8000e06 <HAL_UART_TxCpltCallback+0x4e>
		{
			uint8_t tmp = TX_BF[TX_IDX_BUSY];
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_UART_TxCpltCallback+0x60>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_UART_TxCpltCallback+0x64>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	73fb      	strb	r3, [r7, #15]
			TX_IDX_BUSY++;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_UART_TxCpltCallback+0x60>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <HAL_UART_TxCpltCallback+0x60>)
 8000de6:	6013      	str	r3, [r2, #0]
			if (TX_IDX_BUSY >= TX_BF_length) TX_IDX_BUSY = 0;
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_UART_TxCpltCallback+0x60>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8000df0:	db02      	blt.n	8000df8 <HAL_UART_TxCpltCallback+0x40>
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_UART_TxCpltCallback+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000df8:	f107 030f 	add.w	r3, r7, #15
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <HAL_UART_TxCpltCallback+0x58>)
 8000e02:	f006 fb7b 	bl	80074fc <HAL_UART_Transmit_IT>
		}
	}
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200005c8 	.word	0x200005c8
 8000e14:	20000e3c 	.word	0x20000e3c
 8000e18:	20000e40 	.word	0x20000e40
 8000e1c:	2000084c 	.word	0x2000084c

08000e20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_UART_RxCpltCallback+0x44>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d115      	bne.n	8000e5c <HAL_UART_RxCpltCallback+0x3c>
	{
		RX_IDX_EMPTY++;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_UART_RxCpltCallback+0x48>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <HAL_UART_RxCpltCallback+0x48>)
 8000e38:	6013      	str	r3, [r2, #0]
		if (RX_IDX_EMPTY >= RX_BF_length)
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_UART_RxCpltCallback+0x48>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e42:	db02      	blt.n	8000e4a <HAL_UART_RxCpltCallback+0x2a>
		{
			RX_IDX_EMPTY = 0;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_UART_RxCpltCallback+0x48>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &RX_BF[RX_IDX_EMPTY], 1);
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <HAL_UART_RxCpltCallback+0x48>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_UART_RxCpltCallback+0x4c>)
 8000e50:	4413      	add	r3, r2
 8000e52:	2201      	movs	r2, #1
 8000e54:	4619      	mov	r1, r3
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <HAL_UART_RxCpltCallback+0x44>)
 8000e58:	f006 fbbe 	bl	80075d8 <HAL_UART_Receive_IT>
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200005c8 	.word	0x200005c8
 8000e68:	20000e34 	.word	0x20000e34
 8000e6c:	2000064c 	.word	0x2000064c

08000e70 <searchFrame>:

int16_t frameLength = 0;										// Zmianna obliczająca długość ramki
int8_t detectionFlag = 0;										// Flaga detekcji ramki.
char frame[MAX_SIZE];											// Tablica ramki

void searchFrame(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

	// Oczekiwanie na znak rozpoczęcia
	int16_t character = USART_getChar();
 8000e76:	f7ff fecd 	bl	8000c14 <USART_getChar>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
	if (character < 0) return;
 8000e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db43      	blt.n	8000f0e <searchFrame+0x9e>

	USART_fsend("%c", character);							// Podobno nie powinno sie wyświetlać wysłanych znaków (? Zaliczenie ?)
 8000e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4822      	ldr	r0, [pc, #136]	; (8000f18 <searchFrame+0xa8>)
 8000e8e:	f7ff feed 	bl	8000c6c <USART_fsend>

	// Jeśli znaleziono znak rozpoczęcia rozpoczyna odczyt
	if (character == '@') {
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	2b40      	cmp	r3, #64	; 0x40
 8000e98:	d105      	bne.n	8000ea6 <searchFrame+0x36>
	    frameLength = 0;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <searchFrame+0xac>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
	    detectionFlag = 1;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <searchFrame+0xb0>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
	}

	if (detectionFlag == 1) {
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <searchFrame+0xb0>)
 8000ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d12f      	bne.n	8000f10 <searchFrame+0xa0>
	    frame[frameLength++] = character;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <searchFrame+0xac>)
 8000eb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000eb6:	b293      	uxth	r3, r2
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b219      	sxth	r1, r3
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <searchFrame+0xac>)
 8000ec0:	8019      	strh	r1, [r3, #0]
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	b2d9      	uxtb	r1, r3
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <searchFrame+0xb4>)
 8000ec8:	5499      	strb	r1, [r3, r2]
	    // Jeśli znaleziono znak końca ramki
	    if (character == '$') {
 8000eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ece:	2b24      	cmp	r3, #36	; 0x24
 8000ed0:	d114      	bne.n	8000efc <searchFrame+0x8c>
	        frame[frameLength] = '\0';
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <searchFrame+0xac>)
 8000ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <searchFrame+0xb4>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	5499      	strb	r1, [r3, r2]
	        // Reset funkcji jeżeli ramka jest za krótka
	        if (frameLength < 10) {
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <searchFrame+0xac>)
 8000ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	dc03      	bgt.n	8000ef2 <searchFrame+0x82>
	    		detectionFlag = 0;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <searchFrame+0xb0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
	    		return;
 8000ef0:	e00e      	b.n	8000f10 <searchFrame+0xa0>
	    	}
	        readFrame();
 8000ef2:	f000 f8e1 	bl	80010b8 <readFrame>
	        detectionFlag = 0;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <searchFrame+0xb0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
	    }
	    // Jeśli ramka przekroczyła maksymalny rozmiar
	    if (frameLength > MAX_SIZE){
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <searchFrame+0xac>)
 8000efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f02:	2bda      	cmp	r3, #218	; 0xda
 8000f04:	dd04      	ble.n	8000f10 <searchFrame+0xa0>
	        detectionFlag = 0;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <searchFrame+0xb0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
	        return;
 8000f0c:	e000      	b.n	8000f10 <searchFrame+0xa0>
	if (character < 0) return;
 8000f0e:	bf00      	nop
	    }
	}
}
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	0800b254 	.word	0x0800b254
 8000f1c:	20000e44 	.word	0x20000e44
 8000f20:	20000e46 	.word	0x20000e46
 8000f24:	20000e48 	.word	0x20000e48

08000f28 <getSection>:
						* Usunąłem ponieważ za sprawdzanie długość sekcji danych odpowiada funckja getSection

 	 ************************************************************************************************************************* */


int getSection(int8_t dlugoscSekcji, int8_t sekcjaID, int16_t globalIndex, char oczekiwanyZnak){
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	80bb      	strh	r3, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	70fb      	strb	r3, [r7, #3]
	// Pętla odpowiedzialna za pobieranie znaków do tablicy tymczasowej
	for (int localIndex = 0; localIndex < dlugoscSekcji + 1; localIndex++){
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e04d      	b.n	8000fe8 <getSection+0xc0>
		if (errorFlag == 1) return 0;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <getSection+0xd8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d101      	bne.n	8000f58 <getSection+0x30>
 8000f54:	2300      	movs	r3, #0
 8000f56:	e04e      	b.n	8000ff6 <getSection+0xce>
		// Sprawdzenie czy w sekcji nie znajdują się separatory np. @PC:
		if (localIndex < dlugoscSekcji){
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	da25      	bge.n	8000fae <getSection+0x86>
			// Sprawdzenie czy znak to '\0'
			if (frame[globalIndex] == '\0') frameRecall(1003, sekcjaID);
 8000f62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f66:	4a27      	ldr	r2, [pc, #156]	; (8001004 <getSection+0xdc>)
 8000f68:	5cd3      	ldrb	r3, [r2, r3]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d107      	bne.n	8000f7e <getSection+0x56>
 8000f6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f72:	4619      	mov	r1, r3
 8000f74:	f240 30eb 	movw	r0, #1003	; 0x3eb
 8000f78:	f001 fd20 	bl	80029bc <frameRecall>
 8000f7c:	e02b      	b.n	8000fd6 <getSection+0xae>
			else if (frame[globalIndex] == separator) frameRecall(1001, sekcjaID);
 8000f7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f82:	4a20      	ldr	r2, [pc, #128]	; (8001004 <getSection+0xdc>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	2b3a      	cmp	r3, #58	; 0x3a
 8000f88:	d107      	bne.n	8000f9a <getSection+0x72>
 8000f8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f240 30e9 	movw	r0, #1001	; 0x3e9
 8000f94:	f001 fd12 	bl	80029bc <frameRecall>
 8000f98:	e01d      	b.n	8000fd6 <getSection+0xae>
			else tmpArr[localIndex] = frame[globalIndex];
 8000f9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f9e:	4a19      	ldr	r2, [pc, #100]	; (8001004 <getSection+0xdc>)
 8000fa0:	5cd1      	ldrb	r1, [r2, r3]
 8000fa2:	4a19      	ldr	r2, [pc, #100]	; (8001008 <getSection+0xe0>)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	460a      	mov	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e013      	b.n	8000fd6 <getSection+0xae>
		} else {
			// Jeżeli w sekcji nie było separatorów sprawdza czy ':' lub '$' znajduje się za nią.
			if (frame[globalIndex] != oczekiwanyZnak) frameRecall(1002, sekcjaID);
 8000fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <getSection+0xdc>)
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d007      	beq.n	8000fcc <getSection+0xa4>
 8000fbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f240 30ea 	movw	r0, #1002	; 0x3ea
 8000fc6:	f001 fcf9 	bl	80029bc <frameRecall>
 8000fca:	e004      	b.n	8000fd6 <getSection+0xae>
			else tmpArr[localIndex] = '\0';
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <getSection+0xe0>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		}
		globalIndex++;
 8000fd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	80bb      	strh	r3, [r7, #4]
	for (int localIndex = 0; localIndex < dlugoscSekcji + 1; localIndex++){
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	ddac      	ble.n	8000f4c <getSection+0x24>
	}
	return globalIndex; // Zwraca wartość indeksu w celu odczytu dalszej części ramki
 8000ff2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200011ec 	.word	0x200011ec
 8001004:	20000e48 	.word	0x20000e48
 8001008:	20001110 	.word	0x20001110

0800100c <isNUM>:

int isNUM(int8_t numberLength, int16_t maxValue, int8_t minValue, int8_t section){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4623      	mov	r3, r4
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4603      	mov	r3, r0
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	71bb      	strb	r3, [r7, #6]
 8001026:	4613      	mov	r3, r2
 8001028:	70fb      	strb	r3, [r7, #3]
	// Sprawdzenie czy znaki są liczbami systemu dziesiętnego

	for (int i = 0; i < numberLength; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e019      	b.n	8001064 <isNUM+0x58>
		if ((tmpArr[i] < '0' || tmpArr[i] > '9') && errorFlag == 0) frameRecall(2001, section);
 8001030:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <isNUM+0xa4>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b2f      	cmp	r3, #47	; 0x2f
 800103a:	d905      	bls.n	8001048 <isNUM+0x3c>
 800103c:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <isNUM+0xa4>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b39      	cmp	r3, #57	; 0x39
 8001046:	d90a      	bls.n	800105e <isNUM+0x52>
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <isNUM+0xa8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d106      	bne.n	800105e <isNUM+0x52>
 8001050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001054:	4619      	mov	r1, r3
 8001056:	f240 70d1 	movw	r0, #2001	; 0x7d1
 800105a:	f001 fcaf 	bl	80029bc <frameRecall>
	for (int i = 0; i < numberLength; i++){
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbe0      	blt.n	8001030 <isNUM+0x24>
	}
	if (errorFlag == 0){
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <isNUM+0xa8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d117      	bne.n	80010a6 <isNUM+0x9a>
		int number = atoi(tmpArr);
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <isNUM+0xa4>)
 8001078:	f007 fce7 	bl	8008a4a <atoi>
 800107c:	60b8      	str	r0, [r7, #8]
		// Sprawdzenie czy liczba mieści się w dopuszczalnym zakresie.
		if (number < minValue || number > maxValue) frameRecall(2002, section);
 800107e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	429a      	cmp	r2, r3
 8001086:	db04      	blt.n	8001092 <isNUM+0x86>
 8001088:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	429a      	cmp	r2, r3
 8001090:	dd07      	ble.n	80010a2 <isNUM+0x96>
 8001092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001096:	4619      	mov	r1, r3
 8001098:	f240 70d2 	movw	r0, #2002	; 0x7d2
 800109c:	f001 fc8e 	bl	80029bc <frameRecall>
 80010a0:	e001      	b.n	80010a6 <isNUM+0x9a>
		else return number;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	e7ff      	b.n	80010a6 <isNUM+0x9a>
	}
} // Jeżeli nie było błędów funkcja zwraca liczbe typu INT
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20001110 	.word	0x20001110
 80010b4:	200011ec 	.word	0x200011ec

080010b8 <readFrame>:

void readFrame(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	int16_t globalIndex = 1;					// Indeks odczytu przysłanej ramki
 80010be:	2301      	movs	r3, #1
 80010c0:	80fb      	strh	r3, [r7, #6]
	int8_t section = 0;							// Flaga sekcji
 80010c2:	2300      	movs	r3, #0
 80010c4:	717b      	strb	r3, [r7, #5]
	errorFlag = 0;								// Zerowanie flagi błędu
 80010c6:	4b6d      	ldr	r3, [pc, #436]	; (800127c <readFrame+0x1c4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

	// Pętla wykona się tyle razy ile jest sekcji + sekcja anonimowa EXECUTE ( Tylko widoczna dla programu )
	for (section; section <= EXECUTE; section){
 80010cc:	e0cb      	b.n	8001266 <readFrame+0x1ae>
		// Sprawdzenie czy nie było błędu w poprzedniej sekcji.
		if (errorFlag == 0) section++;
 80010ce:	4b6b      	ldr	r3, [pc, #428]	; (800127c <readFrame+0x1c4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 80cd 	bne.w	8001272 <readFrame+0x1ba>
 80010d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	717b      	strb	r3, [r7, #5]
		else return;

		switch (section){
 80010e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	2b05      	cmp	r3, #5
 80010ec:	f200 80bb 	bhi.w	8001266 <readFrame+0x1ae>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <readFrame+0x40>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001111 	.word	0x08001111
 80010fc:	0800115f 	.word	0x0800115f
 8001100:	080011a9 	.word	0x080011a9
 8001104:	080011dd 	.word	0x080011dd
 8001108:	08001209 	.word	0x08001209
 800110c:	0800123d 	.word	0x0800123d
		case SENDER:
			globalIndex = getSection(3, section, globalIndex, separator);
 8001110:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001114:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001118:	233a      	movs	r3, #58	; 0x3a
 800111a:	2003      	movs	r0, #3
 800111c:	f7ff ff04 	bl	8000f28 <getSection>
 8001120:	4603      	mov	r3, r0
 8001122:	80fb      	strh	r3, [r7, #6]
			if (errorFlag == 0) strcpy(senderAdr, tmpArr);
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <readFrame+0x1c4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d103      	bne.n	8001134 <readFrame+0x7c>
 800112c:	4954      	ldr	r1, [pc, #336]	; (8001280 <readFrame+0x1c8>)
 800112e:	4855      	ldr	r0, [pc, #340]	; (8001284 <readFrame+0x1cc>)
 8001130:	f007 fd6b 	bl	8008c0a <strcpy>
			// Sprawdzenie ID nadawcy
			if (strcmp(senderAdr, senAdr) != 0 && errorFlag == 0) frameRecall(4001, section);
 8001134:	4954      	ldr	r1, [pc, #336]	; (8001288 <readFrame+0x1d0>)
 8001136:	4853      	ldr	r0, [pc, #332]	; (8001284 <readFrame+0x1cc>)
 8001138:	f7ff f852 	bl	80001e0 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8091 	beq.w	8001266 <readFrame+0x1ae>
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <readFrame+0x1c4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	f040 808c 	bne.w	8001266 <readFrame+0x1ae>
 800114e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001152:	4619      	mov	r1, r3
 8001154:	f640 70a1 	movw	r0, #4001	; 0xfa1
 8001158:	f001 fc30 	bl	80029bc <frameRecall>
			break;
 800115c:	e083      	b.n	8001266 <readFrame+0x1ae>
		case RECEIVER:
			globalIndex = getSection(3, section, globalIndex, separator);
 800115e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001162:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001166:	233a      	movs	r3, #58	; 0x3a
 8001168:	2003      	movs	r0, #3
 800116a:	f7ff fedd 	bl	8000f28 <getSection>
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
			if (errorFlag == 0) strcpy(receiverAdr, tmpArr);
 8001172:	4b42      	ldr	r3, [pc, #264]	; (800127c <readFrame+0x1c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <readFrame+0xca>
 800117a:	4941      	ldr	r1, [pc, #260]	; (8001280 <readFrame+0x1c8>)
 800117c:	4843      	ldr	r0, [pc, #268]	; (800128c <readFrame+0x1d4>)
 800117e:	f007 fd44 	bl	8008c0a <strcpy>
			// Sprawdzenie ID adresata
			if (strcmp(receiverAdr, recAdr) != 0 && errorFlag == 0) frameRecall(4002, section);
 8001182:	4943      	ldr	r1, [pc, #268]	; (8001290 <readFrame+0x1d8>)
 8001184:	4841      	ldr	r0, [pc, #260]	; (800128c <readFrame+0x1d4>)
 8001186:	f7ff f82b 	bl	80001e0 <strcmp>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d06a      	beq.n	8001266 <readFrame+0x1ae>
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <readFrame+0x1c4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d166      	bne.n	8001266 <readFrame+0x1ae>
 8001198:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800119c:	4619      	mov	r1, r3
 800119e:	f640 70a2 	movw	r0, #4002	; 0xfa2
 80011a2:	f001 fc0b 	bl	80029bc <frameRecall>
			break;
 80011a6:	e05e      	b.n	8001266 <readFrame+0x1ae>
		case COMMAND_LENGTH:
			globalIndex = getSection(3, section, globalIndex, separator);
 80011a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011ac:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80011b0:	233a      	movs	r3, #58	; 0x3a
 80011b2:	2003      	movs	r0, #3
 80011b4:	f7ff feb8 	bl	8000f28 <getSection>
 80011b8:	4603      	mov	r3, r0
 80011ba:	80fb      	strh	r3, [r7, #6]
			// Konwersja tablicy char -> int
			if (errorFlag == 0) maxCmdLen = isNUM(3, 200, 10, section);
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <readFrame+0x1c4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d150      	bne.n	8001266 <readFrame+0x1ae>
 80011c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011c8:	220a      	movs	r2, #10
 80011ca:	21c8      	movs	r1, #200	; 0xc8
 80011cc:	2003      	movs	r0, #3
 80011ce:	f7ff ff1d 	bl	800100c <isNUM>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <readFrame+0x1dc>)
 80011d8:	801a      	strh	r2, [r3, #0]
			break;
 80011da:	e044      	b.n	8001266 <readFrame+0x1ae>
		case COMMAND:
			globalIndex = getSection(maxCmdLen, section, globalIndex, separator);
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <readFrame+0x1dc>)
 80011de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e2:	b258      	sxtb	r0, r3
 80011e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011e8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80011ec:	233a      	movs	r3, #58	; 0x3a
 80011ee:	f7ff fe9b 	bl	8000f28 <getSection>
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
			if (errorFlag == 0) strcpy(receivedData, tmpArr);
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <readFrame+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d133      	bne.n	8001266 <readFrame+0x1ae>
 80011fe:	4920      	ldr	r1, [pc, #128]	; (8001280 <readFrame+0x1c8>)
 8001200:	4825      	ldr	r0, [pc, #148]	; (8001298 <readFrame+0x1e0>)
 8001202:	f007 fd02 	bl	8008c0a <strcpy>
			break;
 8001206:	e02e      	b.n	8001266 <readFrame+0x1ae>
		case CHECK_SUM:
			globalIndex = getSection(3, section, globalIndex, endCharacter);
 8001208:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800120c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001210:	2324      	movs	r3, #36	; 0x24
 8001212:	2003      	movs	r0, #3
 8001214:	f7ff fe88 	bl	8000f28 <getSection>
 8001218:	4603      	mov	r3, r0
 800121a:	80fb      	strh	r3, [r7, #6]
			if (errorFlag == 0) frameCRC = isNUM(3, 999, 0, section);
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <readFrame+0x1c4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d120      	bne.n	8001266 <readFrame+0x1ae>
 8001224:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001228:	2200      	movs	r2, #0
 800122a:	f240 31e7 	movw	r1, #999	; 0x3e7
 800122e:	2003      	movs	r0, #3
 8001230:	f7ff feec 	bl	800100c <isNUM>
 8001234:	4603      	mov	r3, r0
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <readFrame+0x1e4>)
 8001238:	6013      	str	r3, [r2, #0]
			break;
 800123a:	e014      	b.n	8001266 <readFrame+0x1ae>
		case EXECUTE:
			// Sprawdzenie sumy kontrolnej
			checkCRC();
 800123c:	f000 f830 	bl	80012a0 <checkCRC>
			// Sprawdzenie sekcji danych ( czy argument / dłgość komendy się zgadzają)
			if (errorFlag == 0) checkData();
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <readFrame+0x1c4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <readFrame+0x194>
 8001248:	f000 f886 	bl	8001358 <checkData>
			// Pobarnie komendy z sekcji danych
			if (errorFlag == 0) getCommand();
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <readFrame+0x1c4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <readFrame+0x1a0>
 8001254:	f000 f8c6 	bl	80013e4 <getCommand>
			// Próba wykonania komendy
			if (errorFlag == 0) executeCommand();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <readFrame+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <readFrame+0x1ac>
 8001260:	f000 f988 	bl	8001574 <executeCommand>
			break;
 8001264:	bf00      	nop
	for (section; section <= EXECUTE; section){
 8001266:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800126a:	2b06      	cmp	r3, #6
 800126c:	f77f af2f 	ble.w	80010ce <readFrame+0x16>
		}
	}
	return;
 8001270:	e000      	b.n	8001274 <readFrame+0x1bc>
		else return;
 8001272:	bf00      	nop
}
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200011ec 	.word	0x200011ec
 8001280:	20001110 	.word	0x20001110
 8001284:	20000f24 	.word	0x20000f24
 8001288:	0800b258 	.word	0x0800b258
 800128c:	20000f28 	.word	0x20000f28
 8001290:	0800b25c 	.word	0x0800b25c
 8001294:	20000f2c 	.word	0x20000f2c
 8001298:	20000f30 	.word	0x20000f30
 800129c:	200010fc 	.word	0x200010fc

080012a0 <checkCRC>:

void checkCRC(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	// Sprawdzenie CRC wynikowe z wysłanym w ramce
	crc_value = crc(receivedData, maxCmdLen) % 999;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <checkCRC+0x4c>)
 80012a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <checkCRC+0x50>)
 80012ae:	f000 f827 	bl	8001300 <crc>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <checkCRC+0x54>)
 80012b6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ba:	1ad1      	subs	r1, r2, r3
 80012bc:	0849      	lsrs	r1, r1, #1
 80012be:	440b      	add	r3, r1
 80012c0:	0a5b      	lsrs	r3, r3, #9
 80012c2:	f240 31e7 	movw	r1, #999	; 0x3e7
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <checkCRC+0x58>)
 80012ce:	6013      	str	r3, [r2, #0]
	if(crc_value != frameCRC) frameRecall(4003, CHECK_SUM);
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <checkCRC+0x58>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <checkCRC+0x5c>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d004      	beq.n	80012e6 <checkCRC+0x46>
 80012dc:	2105      	movs	r1, #5
 80012de:	f640 70a3 	movw	r0, #4003	; 0xfa3
 80012e2:	f001 fb6b 	bl	80029bc <frameRecall>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000f2c 	.word	0x20000f2c
 80012f0:	20000f30 	.word	0x20000f30
 80012f4:	06680a41 	.word	0x06680a41
 80012f8:	20001100 	.word	0x20001100
 80012fc:	200010fc 	.word	0x200010fc

08001300 <crc>:

unsigned int crc(char *data, unsigned int length) {
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
    unsigned int crc = 0xFFFF;
 800130a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130e:	60fb      	str	r3, [r7, #12]
    for (unsigned int i = 0; i < length; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	e011      	b.n	800133a <crc+0x3a>
        crc = (crc >> 8) ^ crc_table[(crc ^ data[i]) & 0xFF];
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	0a1a      	lsrs	r2, r3, #8
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	440b      	add	r3, r1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	404b      	eors	r3, r1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	490a      	ldr	r1, [pc, #40]	; (8001354 <crc+0x54>)
 800132c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001330:	4053      	eors	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
    for (unsigned int i = 0; i < length; i++) {
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3301      	adds	r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3e9      	bcc.n	8001316 <crc+0x16>
    }
    return crc & 0xFFFF;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000

08001358 <checkData>:

// Sprawdzenie poprawności sekcji danych
void checkData(){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
//		frameRecall(4004, COMMAND);
//		return;
//	}

	// Sprawdzenie czy separatory argumentu są na odpowiednich miejscach ( - 1 bo tablica ma jeszcze miejsce dla '\0')
	if (receivedData[8] != '(' || receivedData[maxCmdLen - 1] != ')') {
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <checkData+0x84>)
 8001360:	7a1b      	ldrb	r3, [r3, #8]
 8001362:	2b28      	cmp	r3, #40	; 0x28
 8001364:	d107      	bne.n	8001376 <checkData+0x1e>
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <checkData+0x88>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <checkData+0x84>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	2b29      	cmp	r3, #41	; 0x29
 8001374:	d005      	beq.n	8001382 <checkData+0x2a>
		frameRecall(4005, COMMAND);
 8001376:	2104      	movs	r1, #4
 8001378:	f640 70a5 	movw	r0, #4005	; 0xfa5
 800137c:	f001 fb1e 	bl	80029bc <frameRecall>
		return;
 8001380:	e028      	b.n	80013d4 <checkData+0x7c>
	}
	// Sprawdzenie czy separatory nie występują w nieoczekiwanych miejscach.
	for (int i = 0; i < maxCmdLen; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e01e      	b.n	80013c6 <checkData+0x6e>
		if (i != 8 && i != maxCmdLen - 1 && (receivedData[i] == '(' || receivedData[i] == ')')) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d018      	beq.n	80013c0 <checkData+0x68>
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <checkData+0x88>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	3b01      	subs	r3, #1
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d011      	beq.n	80013c0 <checkData+0x68>
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <checkData+0x84>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b28      	cmp	r3, #40	; 0x28
 80013a6:	d005      	beq.n	80013b4 <checkData+0x5c>
 80013a8:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <checkData+0x84>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b29      	cmp	r3, #41	; 0x29
 80013b2:	d105      	bne.n	80013c0 <checkData+0x68>
			frameRecall(4006, COMMAND);
 80013b4:	2104      	movs	r1, #4
 80013b6:	f640 70a6 	movw	r0, #4006	; 0xfa6
 80013ba:	f001 faff 	bl	80029bc <frameRecall>
			return;
 80013be:	e009      	b.n	80013d4 <checkData+0x7c>
	for (int i = 0; i < maxCmdLen; i++) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <checkData+0x88>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	dbd9      	blt.n	8001388 <checkData+0x30>
		}
	}
}
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000f30 	.word	0x20000f30
 80013e0:	20000f2c 	.word	0x20000f2c

080013e4 <getCommand>:

// Pobranie typu komendy, komendy i argumentu.
void getCommand(){
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
	// Pobranie typu komendy z sekcji danych
	for (int i = 0; i < 3; i++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	e00b      	b.n	8001408 <getCommand+0x24>
		commandType[i] = receivedData[i];
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <getCommand+0xa0>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4413      	add	r3, r2
 80013f6:	7819      	ldrb	r1, [r3, #0]
 80013f8:	4a23      	ldr	r2, [pc, #140]	; (8001488 <getCommand+0xa4>)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	460a      	mov	r2, r1
 8001400:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b02      	cmp	r3, #2
 800140c:	ddf0      	ble.n	80013f0 <getCommand+0xc>
	}
	commandType[3] = '\0';
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <getCommand+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	70da      	strb	r2, [r3, #3]

	// Pobranie komendy z sekcji danych
	for (int i = 0; i < 5; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	e00b      	b.n	8001432 <getCommand+0x4e>
		command[i] = receivedData[i+3];
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3303      	adds	r3, #3
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <getCommand+0xa0>)
 8001420:	5cd1      	ldrb	r1, [r2, r3]
 8001422:	4a1a      	ldr	r2, [pc, #104]	; (800148c <getCommand+0xa8>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4413      	add	r3, r2
 8001428:	460a      	mov	r2, r1
 800142a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b04      	cmp	r3, #4
 8001436:	ddf0      	ble.n	800141a <getCommand+0x36>
	}
	command[5] = '\0';
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <getCommand+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	715a      	strb	r2, [r3, #5]

	// Pobranie argumentu z sekcji danych (typ + komenda + () = 10)
	for (int i = 0; i < maxCmdLen - 10; i++) {
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	e00b      	b.n	800145c <getCommand+0x78>
		commandArg[i] = receivedData[i+9];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3309      	adds	r3, #9
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <getCommand+0xa0>)
 800144a:	5cd1      	ldrb	r1, [r2, r3]
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <getCommand+0xac>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	460a      	mov	r2, r1
 8001454:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < maxCmdLen - 10; i++) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3301      	adds	r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <getCommand+0xb0>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	3b0a      	subs	r3, #10
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	dbec      	blt.n	8001444 <getCommand+0x60>
	}
	// Zamienienie ostatniego znaku argumentu komendy na znak końca stringa
	commandArg[maxCmdLen - 10] = '\0';
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <getCommand+0xb0>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	3b0a      	subs	r3, #10
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <getCommand+0xac>)
 8001474:	2100      	movs	r1, #0
 8001476:	54d1      	strb	r1, [r2, r3]
	return;
 8001478:	bf00      	nop
}
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	20000f30 	.word	0x20000f30
 8001488:	2000100c 	.word	0x2000100c
 800148c:	20001010 	.word	0x20001010
 8001490:	20001020 	.word	0x20001020
 8001494:	20000f2c 	.word	0x20000f2c

08001498 <getNumArgument>:

// Funkcja konwertująca argument typu STR -> INT
void getNumArgument(){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0

	// Zerowanie wartości z ostatniej ramki
	for (int i = 0; i < 3; i++) numArguments[i] = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e007      	b.n	80014b4 <getNumArgument+0x1c>
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <getNumArgument+0xcc>)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2100      	movs	r1, #0
 80014aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	ddf4      	ble.n	80014a4 <getNumArgument+0xc>

	int numberIndex = 0;                                // Indeks aktualnie odczytywanej liczby
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
	int argumentNr = 0;                                 // Licznik ilości argumentów
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]

	for (int i = 0; i <= strlen(commandArg); i++){
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	e041      	b.n	800154c <getNumArgument+0xb4>
		tmpArr[numberIndex] = '\0';
 80014c8:	4a27      	ldr	r2, [pc, #156]	; (8001568 <getNumArgument+0xd0>)
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
		// Jeżeli jest więcej argumentów niż 3 zwraca błąd
        if (argumentNr > 2){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	dd05      	ble.n	80014e4 <getNumArgument+0x4c>
			frameRecall(5007, COMMAND);
 80014d8:	2104      	movs	r1, #4
 80014da:	f241 308f 	movw	r0, #5007	; 0x138f
 80014de:	f001 fa6d 	bl	80029bc <frameRecall>
			return;
 80014e2:	e03c      	b.n	800155e <getNumArgument+0xc6>
		}
        // Jeżeli znak nie jest separatorem argumentu zapisze znak w tablicy pomocniczej
		if (commandArg[i] != ',' && i != strlen(commandArg)){
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <getNumArgument+0xd4>)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b2c      	cmp	r3, #44	; 0x2c
 80014ee:	d015      	beq.n	800151c <getNumArgument+0x84>
 80014f0:	481e      	ldr	r0, [pc, #120]	; (800156c <getNumArgument+0xd4>)
 80014f2:	f7fe fe7f 	bl	80001f4 <strlen>
 80014f6:	4602      	mov	r2, r0
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d00e      	beq.n	800151c <getNumArgument+0x84>
			tmpArr[numberIndex++] = commandArg[i];
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	60ba      	str	r2, [r7, #8]
 8001504:	4919      	ldr	r1, [pc, #100]	; (800156c <getNumArgument+0xd4>)
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	440a      	add	r2, r1
 800150a:	7811      	ldrb	r1, [r2, #0]
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <getNumArgument+0xd0>)
 800150e:	54d1      	strb	r1, [r2, r3]
			tmpArr[numberIndex] = '\0';
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <getNumArgument+0xd0>)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	4413      	add	r3, r2
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e014      	b.n	8001546 <getNumArgument+0xae>
		}
        // W przeciwnym razie przejdzie do sprawdzenia argumentu jeżeli jest poprawny odczytuje kolejny
        else {
			numArguments[argumentNr++] = isNUM(numberIndex, 999, 0, COMMAND);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	b258      	sxtb	r0, r3
 8001520:	687c      	ldr	r4, [r7, #4]
 8001522:	1c63      	adds	r3, r4, #1
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	2304      	movs	r3, #4
 8001528:	2200      	movs	r2, #0
 800152a:	f240 31e7 	movw	r1, #999	; 0x3e7
 800152e:	f7ff fd6d 	bl	800100c <isNUM>
 8001532:	4603      	mov	r3, r0
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <getNumArgument+0xcc>)
 8001536:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if (errorFlag == 1) return;
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <getNumArgument+0xd8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d00c      	beq.n	800155c <getNumArgument+0xc4>
			numberIndex = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i <= strlen(commandArg); i++){
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <getNumArgument+0xd4>)
 800154e:	f7fe fe51 	bl	80001f4 <strlen>
 8001552:	4602      	mov	r2, r0
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d2b6      	bcs.n	80014c8 <getNumArgument+0x30>
 800155a:	e000      	b.n	800155e <getNumArgument+0xc6>
			if (errorFlag == 1) return;
 800155c:	bf00      	nop
		}
	}
}
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	20001104 	.word	0x20001104
 8001568:	20001110 	.word	0x20001110
 800156c:	20001020 	.word	0x20001020
 8001570:	200011ec 	.word	0x200011ec

08001574 <executeCommand>:

// Wykonywanie komend
void executeCommand(){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	// Sprawdzenie czy komenda jest typu TXT
	if (strcmp(commandType, "TXT") == 0){
 8001578:	4932      	ldr	r1, [pc, #200]	; (8001644 <executeCommand+0xd0>)
 800157a:	4833      	ldr	r0, [pc, #204]	; (8001648 <executeCommand+0xd4>)
 800157c:	f7fe fe30 	bl	80001e0 <strcmp>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d12d      	bne.n	80015e2 <executeCommand+0x6e>
		if (strcmp(command, "COLOR") == 0) COLOR();
 8001586:	4931      	ldr	r1, [pc, #196]	; (800164c <executeCommand+0xd8>)
 8001588:	4831      	ldr	r0, [pc, #196]	; (8001650 <executeCommand+0xdc>)
 800158a:	f7fe fe29 	bl	80001e0 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <executeCommand+0x26>
 8001594:	f000 ff6c 	bl	8002470 <COLOR>
        // Jeżeli podana komenda nie istnieje zwróci błąd
		else frameRecall(5002, EXECUTE);
	}
    // Jeżeli podany typ komendy nie istnieje zwórci błąd
    else frameRecall(5003, EXECUTE);
	return;
 8001598:	e052      	b.n	8001640 <executeCommand+0xcc>
		else if (strcmp(command, "EFFCT") == 0) EFFCT();
 800159a:	492e      	ldr	r1, [pc, #184]	; (8001654 <executeCommand+0xe0>)
 800159c:	482c      	ldr	r0, [pc, #176]	; (8001650 <executeCommand+0xdc>)
 800159e:	f7fe fe1f 	bl	80001e0 <strcmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <executeCommand+0x3a>
 80015a8:	f000 fa92 	bl	8001ad0 <EFFCT>
	return;
 80015ac:	e048      	b.n	8001640 <executeCommand+0xcc>
		else if (strcmp(command, "RGBST") == 0) RGBST();
 80015ae:	492a      	ldr	r1, [pc, #168]	; (8001658 <executeCommand+0xe4>)
 80015b0:	4827      	ldr	r0, [pc, #156]	; (8001650 <executeCommand+0xdc>)
 80015b2:	f7fe fe15 	bl	80001e0 <strcmp>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <executeCommand+0x4e>
 80015bc:	f001 f9b6 	bl	800292c <RGBST>
	return;
 80015c0:	e03e      	b.n	8001640 <executeCommand+0xcc>
		else if (strcmp(command, "GETST") == 0) GETST();
 80015c2:	4926      	ldr	r1, [pc, #152]	; (800165c <executeCommand+0xe8>)
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <executeCommand+0xdc>)
 80015c6:	f7fe fe0b 	bl	80001e0 <strcmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <executeCommand+0x62>
 80015d0:	f001 f9ea 	bl	80029a8 <GETST>
	return;
 80015d4:	e034      	b.n	8001640 <executeCommand+0xcc>
		else frameRecall(5001, EXECUTE);
 80015d6:	2106      	movs	r1, #6
 80015d8:	f241 3089 	movw	r0, #5001	; 0x1389
 80015dc:	f001 f9ee 	bl	80029bc <frameRecall>
	return;
 80015e0:	e02e      	b.n	8001640 <executeCommand+0xcc>
	else if (strcmp(commandType, "NUM") == 0){
 80015e2:	491f      	ldr	r1, [pc, #124]	; (8001660 <executeCommand+0xec>)
 80015e4:	4818      	ldr	r0, [pc, #96]	; (8001648 <executeCommand+0xd4>)
 80015e6:	f7fe fdfb 	bl	80001e0 <strcmp>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d120      	bne.n	8001632 <executeCommand+0xbe>
		getNumArgument();
 80015f0:	f7ff ff52 	bl	8001498 <getNumArgument>
		if (errorFlag == 1) return;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <executeCommand+0xf0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d020      	beq.n	800163e <executeCommand+0xca>
		if (strcmp(command, "BRGHT") == 0) BRGHT(0);
 80015fc:	491a      	ldr	r1, [pc, #104]	; (8001668 <executeCommand+0xf4>)
 80015fe:	4814      	ldr	r0, [pc, #80]	; (8001650 <executeCommand+0xdc>)
 8001600:	f7fe fdee 	bl	80001e0 <strcmp>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <executeCommand+0x9e>
 800160a:	2000      	movs	r0, #0
 800160c:	f001 f800 	bl	8002610 <BRGHT>
	return;
 8001610:	e016      	b.n	8001640 <executeCommand+0xcc>
		else if (strcmp(command, "STCLR") == 0) STCLR();
 8001612:	4916      	ldr	r1, [pc, #88]	; (800166c <executeCommand+0xf8>)
 8001614:	480e      	ldr	r0, [pc, #56]	; (8001650 <executeCommand+0xdc>)
 8001616:	f7fe fde3 	bl	80001e0 <strcmp>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <executeCommand+0xb2>
 8001620:	f000 fed8 	bl	80023d4 <STCLR>
	return;
 8001624:	e00c      	b.n	8001640 <executeCommand+0xcc>
		else frameRecall(5002, EXECUTE);
 8001626:	2106      	movs	r1, #6
 8001628:	f241 308a 	movw	r0, #5002	; 0x138a
 800162c:	f001 f9c6 	bl	80029bc <frameRecall>
	return;
 8001630:	e006      	b.n	8001640 <executeCommand+0xcc>
    else frameRecall(5003, EXECUTE);
 8001632:	2106      	movs	r1, #6
 8001634:	f241 308b 	movw	r0, #5003	; 0x138b
 8001638:	f001 f9c0 	bl	80029bc <frameRecall>
	return;
 800163c:	e000      	b.n	8001640 <executeCommand+0xcc>
		if (errorFlag == 1) return;
 800163e:	bf00      	nop
}
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	0800b260 	.word	0x0800b260
 8001648:	2000100c 	.word	0x2000100c
 800164c:	0800b264 	.word	0x0800b264
 8001650:	20001010 	.word	0x20001010
 8001654:	0800b26c 	.word	0x0800b26c
 8001658:	0800b274 	.word	0x0800b274
 800165c:	0800b27c 	.word	0x0800b27c
 8001660:	0800b284 	.word	0x0800b284
 8001664:	200011ec 	.word	0x200011ec
 8001668:	0800b288 	.word	0x0800b288
 800166c:	0800b290 	.word	0x0800b290

08001670 <TIM4_change_prescaler>:
int callbackTwo = 0;												// Dodatkowa flaga zmiany efektu

// ====================================== FUNKCJE POMOCNICZE ======================================

// Inicjalizacja ustawień PWM
void TIM4_change_prescaler(int prescaler) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    // Ustawienie prescalera w celu zmiany częstotliwości sygnału
	__HAL_TIM_SET_PRESCALER(&htim4, prescaler);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <TIM4_change_prescaler+0x1c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	200004b0 	.word	0x200004b0

08001690 <HALF_Transmit_Callback>:

// Wypełnianie pierwszej połowy DMA w połowie bufora
void HALF_Transmit_Callback(DMA_HandleTypeDef *htim){
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	// Jeżeli zaszła jakaś zmiana efektu diody zostaje przepisana do tablic używanych przez DMA
	if (callbackOne){
 8001698:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HALF_Transmit_Callback+0xe8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d024      	beq.n	80016ea <HALF_Transmit_Callback+0x5a>
		// Podmienienie wartości DMA na nowe
		for (int i = 0; i < 256; i++){
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e01a      	b.n	80016dc <HALF_Transmit_Callback+0x4c>
			redDMAValues_ACTUAL[i] = redDMAValues_NEW[i];
 80016a6:	4a35      	ldr	r2, [pc, #212]	; (800177c <HALF_Transmit_Callback+0xec>)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016ae:	4934      	ldr	r1, [pc, #208]	; (8001780 <HALF_Transmit_Callback+0xf0>)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_ACTUAL[i] = greenDMAValues_NEW[i];
 80016b6:	4a33      	ldr	r2, [pc, #204]	; (8001784 <HALF_Transmit_Callback+0xf4>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016be:	4932      	ldr	r1, [pc, #200]	; (8001788 <HALF_Transmit_Callback+0xf8>)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_ACTUAL[i] = blueDMAValues_NEW[i];
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <HALF_Transmit_Callback+0xfc>)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016ce:	4930      	ldr	r1, [pc, #192]	; (8001790 <HALF_Transmit_Callback+0x100>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 256; i++){
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3301      	adds	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	dde1      	ble.n	80016a6 <HALF_Transmit_Callback+0x16>
		}
		// Flaga zakończenia zapełniania pierwszej połowy DMA
		is_half_callbackOne_end = END;
 80016e2:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HALF_Transmit_Callback+0x104>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

		}
		// Flaga zakończenia zapełniania pierwszej połowy DMA.
		is_half_callbackTwo_end = END;
	}
};
 80016e8:	e03f      	b.n	800176a <HALF_Transmit_Callback+0xda>
	else if (callbackTwo){
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HALF_Transmit_Callback+0x108>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d03b      	beq.n	800176a <HALF_Transmit_Callback+0xda>
		for (int i = 0; i < 256; i++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	e032      	b.n	800175e <HALF_Transmit_Callback+0xce>
			redDMAValues_ACTUAL[i] = redDMAValues_SPECIAL[i];
 80016f8:	4a28      	ldr	r2, [pc, #160]	; (800179c <HALF_Transmit_Callback+0x10c>)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001700:	491f      	ldr	r1, [pc, #124]	; (8001780 <HALF_Transmit_Callback+0xf0>)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_ACTUAL[i] = greenDMAValues_SPECIAL[i];
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <HALF_Transmit_Callback+0x110>)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001710:	491d      	ldr	r1, [pc, #116]	; (8001788 <HALF_Transmit_Callback+0xf8>)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_ACTUAL[i] = blueDMABalues_SPECIAL[i];
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <HALF_Transmit_Callback+0x114>)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001720:	491b      	ldr	r1, [pc, #108]	; (8001790 <HALF_Transmit_Callback+0x100>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			redDMAValues_NEW[i] = redDMAValues_SPECIAL[i];
 8001728:	4a1c      	ldr	r2, [pc, #112]	; (800179c <HALF_Transmit_Callback+0x10c>)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001730:	4912      	ldr	r1, [pc, #72]	; (800177c <HALF_Transmit_Callback+0xec>)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_NEW[i] = greenDMAValues_SPECIAL[i];
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HALF_Transmit_Callback+0x110>)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001740:	4910      	ldr	r1, [pc, #64]	; (8001784 <HALF_Transmit_Callback+0xf4>)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_NEW[i] = blueDMABalues_SPECIAL[i];
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <HALF_Transmit_Callback+0x114>)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <HALF_Transmit_Callback+0xfc>)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 256; i++){
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3301      	adds	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2bff      	cmp	r3, #255	; 0xff
 8001762:	ddc9      	ble.n	80016f8 <HALF_Transmit_Callback+0x68>
		is_half_callbackTwo_end = END;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HALF_Transmit_Callback+0x118>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
};
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200059f8 	.word	0x200059f8
 800177c:	200029f0 	.word	0x200029f0
 8001780:	200011f0 	.word	0x200011f0
 8001784:	200031f0 	.word	0x200031f0
 8001788:	200019f0 	.word	0x200019f0
 800178c:	200039f0 	.word	0x200039f0
 8001790:	200021f0 	.word	0x200021f0
 8001794:	200059f0 	.word	0x200059f0
 8001798:	200059fc 	.word	0x200059fc
 800179c:	200041f0 	.word	0x200041f0
 80017a0:	200049f0 	.word	0x200049f0
 80017a4:	200051f0 	.word	0x200051f0
 80017a8:	200059f4 	.word	0x200059f4

080017ac <END_Transmit_Callback>:

// Wypełnienie drugiej częsci DMA na końcu bufora
void END_Transmit_Callback(DMA_HandleTypeDef *htim)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	// Jeżeli zaszła jakaś zmiana efektu diody zostaje przepisana do tablic używanych przez DMA
	if (callbackOne && is_half_callbackOne_end == END){
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <END_Transmit_Callback+0x11c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d032      	beq.n	8001822 <END_Transmit_Callback+0x76>
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <END_Transmit_Callback+0x120>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d12e      	bne.n	8001822 <END_Transmit_Callback+0x76>
		// Ustawienie prędkości efektu
		TIM4_change_prescaler(prescaler);
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <END_Transmit_Callback+0x124>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff51 	bl	8001670 <TIM4_change_prescaler>
		// Podmienienie wartości DMA na nowe
		for (int i = 256; i < 512; i++){
 80017ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e01a      	b.n	800180c <END_Transmit_Callback+0x60>
			redDMAValues_ACTUAL[i] = redDMAValues_NEW[i];
 80017d6:	4a3f      	ldr	r2, [pc, #252]	; (80018d4 <END_Transmit_Callback+0x128>)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017de:	493e      	ldr	r1, [pc, #248]	; (80018d8 <END_Transmit_Callback+0x12c>)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_ACTUAL[i] = greenDMAValues_NEW[i];
 80017e6:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <END_Transmit_Callback+0x130>)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ee:	493c      	ldr	r1, [pc, #240]	; (80018e0 <END_Transmit_Callback+0x134>)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_ACTUAL[i] = blueDMAValues_NEW[i];
 80017f6:	4a3b      	ldr	r2, [pc, #236]	; (80018e4 <END_Transmit_Callback+0x138>)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017fe:	493a      	ldr	r1, [pc, #232]	; (80018e8 <END_Transmit_Callback+0x13c>)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 256; i < 512; i++){
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3301      	adds	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001812:	dbe0      	blt.n	80017d6 <END_Transmit_Callback+0x2a>
		}
		// Reset flag wykonujących kod przerwania
		callbackOne = 0;
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <END_Transmit_Callback+0x11c>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
		is_half_callbackOne_end = 0;
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <END_Transmit_Callback+0x120>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
		}
		// Reset flag wykonujących kod przerwania
		callbackTwo = 0;
		is_half_callbackTwo_end = 0;
	}
}
 8001820:	e04d      	b.n	80018be <END_Transmit_Callback+0x112>
	else if (callbackTwo && is_half_callbackTwo_end == END){
 8001822:	4b32      	ldr	r3, [pc, #200]	; (80018ec <END_Transmit_Callback+0x140>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d049      	beq.n	80018be <END_Transmit_Callback+0x112>
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <END_Transmit_Callback+0x144>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d145      	bne.n	80018be <END_Transmit_Callback+0x112>
		TIM4_change_prescaler(prescaler);
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <END_Transmit_Callback+0x124>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff1a 	bl	8001670 <TIM4_change_prescaler>
		for (int i = 256; i < 512; i++){
 800183c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	e032      	b.n	80018aa <END_Transmit_Callback+0xfe>
			redDMAValues_ACTUAL[i] = redDMAValues_SPECIAL[i];
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <END_Transmit_Callback+0x148>)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800184c:	4922      	ldr	r1, [pc, #136]	; (80018d8 <END_Transmit_Callback+0x12c>)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_ACTUAL[i] = greenDMAValues_SPECIAL[i];
 8001854:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <END_Transmit_Callback+0x14c>)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800185c:	4920      	ldr	r1, [pc, #128]	; (80018e0 <END_Transmit_Callback+0x134>)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_ACTUAL[i] = blueDMABalues_SPECIAL[i];
 8001864:	4a25      	ldr	r2, [pc, #148]	; (80018fc <END_Transmit_Callback+0x150>)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800186c:	491e      	ldr	r1, [pc, #120]	; (80018e8 <END_Transmit_Callback+0x13c>)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			redDMAValues_NEW[i] = redDMAValues_SPECIAL[i];
 8001874:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <END_Transmit_Callback+0x148>)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800187c:	4915      	ldr	r1, [pc, #84]	; (80018d4 <END_Transmit_Callback+0x128>)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_NEW[i] = greenDMAValues_SPECIAL[i];
 8001884:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <END_Transmit_Callback+0x14c>)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800188c:	4913      	ldr	r1, [pc, #76]	; (80018dc <END_Transmit_Callback+0x130>)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_NEW[i] = blueDMABalues_SPECIAL[i];
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <END_Transmit_Callback+0x150>)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800189c:	4911      	ldr	r1, [pc, #68]	; (80018e4 <END_Transmit_Callback+0x138>)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 256; i < 512; i++){
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b0:	dbc8      	blt.n	8001844 <END_Transmit_Callback+0x98>
		callbackTwo = 0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <END_Transmit_Callback+0x140>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
		is_half_callbackTwo_end = 0;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <END_Transmit_Callback+0x144>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200059f8 	.word	0x200059f8
 80018cc:	200059f0 	.word	0x200059f0
 80018d0:	2000041c 	.word	0x2000041c
 80018d4:	200029f0 	.word	0x200029f0
 80018d8:	200011f0 	.word	0x200011f0
 80018dc:	200031f0 	.word	0x200031f0
 80018e0:	200019f0 	.word	0x200019f0
 80018e4:	200039f0 	.word	0x200039f0
 80018e8:	200021f0 	.word	0x200021f0
 80018ec:	200059fc 	.word	0x200059fc
 80018f0:	200059f4 	.word	0x200059f4
 80018f4:	200041f0 	.word	0x200041f0
 80018f8:	200049f0 	.word	0x200049f0
 80018fc:	200051f0 	.word	0x200051f0

08001900 <start_PWM_DMA>:


void start_PWM_DMA(){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	// Inicjalizacja transmisji 3 KANAŁÓW PWM'a z użyciem DMA
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)redDMAValues_ACTUAL, 512);
 8001904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <start_PWM_DMA+0x44>)
 800190a:	2100      	movs	r1, #0
 800190c:	480e      	ldr	r0, [pc, #56]	; (8001948 <start_PWM_DMA+0x48>)
 800190e:	f004 fa61 	bl	8005dd4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2, (uint32_t *)greenDMAValues_ACTUAL, 512);
 8001912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <start_PWM_DMA+0x4c>)
 8001918:	2104      	movs	r1, #4
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <start_PWM_DMA+0x48>)
 800191c:	f004 fa5a 	bl	8005dd4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t *)blueDMAValues_ACTUAL, 512);
 8001920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <start_PWM_DMA+0x50>)
 8001926:	2108      	movs	r1, #8
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <start_PWM_DMA+0x48>)
 800192a:	f004 fa53 	bl	8005dd4 <HAL_TIM_PWM_Start_DMA>

	// Ustawienie wskaźnika callback w połowie transmisji z DMA do peryferium
	htim4.hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = HALF_Transmit_Callback;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <start_PWM_DMA+0x48>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <start_PWM_DMA+0x54>)
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c

	// Ustawienie wskaźnika callback na końcu transmisji z DMA do peryferium.
	htim4.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = END_Transmit_Callback;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <start_PWM_DMA+0x48>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <start_PWM_DMA+0x58>)
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200011f0 	.word	0x200011f0
 8001948:	200004b0 	.word	0x200004b0
 800194c:	200019f0 	.word	0x200019f0
 8001950:	200021f0 	.word	0x200021f0
 8001954:	08001691 	.word	0x08001691
 8001958:	080017ad 	.word	0x080017ad

0800195c <switch_PWM_DMA>:

// Funkcja odpowiedzialna za wyłączanie i włączanie diody (Podmiana starych wartości na 0 lub odwrotnie)
void switch_PWM_DMA(uint32_t *nullDMARed, uint32_t *nullDMAGreen, uint32_t *nullDMABlue, int ledFlag){
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
	// Zmienne przechowujące stare wartości DMA
	static uint32_t oldRedDMA[512];
	static uint32_t oldGreenDMA[512];
	static uint32_t oldBlueDMA[512];
	// Wyłączenie polega na podmienieniu wartości tablic DMA na zerowe
	if (ledFlag == OFF){
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d138      	bne.n	80019e4 <switch_PWM_DMA+0x88>
		for (int i = 0; i < 512; i++){
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	e030      	b.n	80019da <switch_PWM_DMA+0x7e>
			// Zapamiętanie ostatniego stanu.
			oldRedDMA[i] = redDMAValues_NEW[i];
 8001978:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <switch_PWM_DMA+0x154>)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001980:	494c      	ldr	r1, [pc, #304]	; (8001ab4 <switch_PWM_DMA+0x158>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			oldGreenDMA[i] = greenDMAValues_NEW[i];
 8001988:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <switch_PWM_DMA+0x15c>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001990:	494a      	ldr	r1, [pc, #296]	; (8001abc <switch_PWM_DMA+0x160>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			oldBlueDMA[i] = blueDMAValues_NEW[i];
 8001998:	4a49      	ldr	r2, [pc, #292]	; (8001ac0 <switch_PWM_DMA+0x164>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019a0:	4948      	ldr	r1, [pc, #288]	; (8001ac4 <switch_PWM_DMA+0x168>)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// Wyłączenie diody
			redDMAValues_NEW[i] = 0;
 80019a8:	4a41      	ldr	r2, [pc, #260]	; (8001ab0 <switch_PWM_DMA+0x154>)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2100      	movs	r1, #0
 80019ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			greenDMAValues_NEW[i] = 0;
 80019b2:	4a41      	ldr	r2, [pc, #260]	; (8001ab8 <switch_PWM_DMA+0x15c>)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2100      	movs	r1, #0
 80019b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			blueDMAValues_NEW[i] = 0;
 80019bc:	4a40      	ldr	r2, [pc, #256]	; (8001ac0 <switch_PWM_DMA+0x164>)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2100      	movs	r1, #0
 80019c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			ledState = OFF;
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <switch_PWM_DMA+0x16c>)
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	601a      	str	r2, [r3, #0]
			callbackOne = 1;
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <switch_PWM_DMA+0x170>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 512; i++){
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	3301      	adds	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e0:	dbca      	blt.n	8001978 <switch_PWM_DMA+0x1c>
			oldRedDMA[i] = redDMAValues_NEW[i];
			oldGreenDMA[i] = greenDMAValues_NEW[i];
			oldBlueDMA[i] = blueDMAValues_NEW[i];
		}
	}
}
 80019e2:	e05f      	b.n	8001aa4 <switch_PWM_DMA+0x148>
	} else if (ledFlag == ON){
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d137      	bne.n	8001a5a <switch_PWM_DMA+0xfe>
		for (int i = 0; i < 512; i++){
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	e02f      	b.n	8001a50 <switch_PWM_DMA+0xf4>
			redDMAValues_NEW[i] = oldRedDMA[i];
 80019f0:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <switch_PWM_DMA+0x158>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019f8:	492d      	ldr	r1, [pc, #180]	; (8001ab0 <switch_PWM_DMA+0x154>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_NEW[i] = oldGreenDMA[i];
 8001a00:	4a2e      	ldr	r2, [pc, #184]	; (8001abc <switch_PWM_DMA+0x160>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a08:	492b      	ldr	r1, [pc, #172]	; (8001ab8 <switch_PWM_DMA+0x15c>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_NEW[i] = oldBlueDMA[i];
 8001a10:	4a2c      	ldr	r2, [pc, #176]	; (8001ac4 <switch_PWM_DMA+0x168>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a18:	4929      	ldr	r1, [pc, #164]	; (8001ac0 <switch_PWM_DMA+0x164>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			oldRedDMA[i] = 0;
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <switch_PWM_DMA+0x158>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2100      	movs	r1, #0
 8001a26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			oldGreenDMA[i] = 0;
 8001a2a:	4a24      	ldr	r2, [pc, #144]	; (8001abc <switch_PWM_DMA+0x160>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			oldBlueDMA[i] = 0;
 8001a34:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <switch_PWM_DMA+0x168>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2100      	movs	r1, #0
 8001a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			ledState = ON;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <switch_PWM_DMA+0x16c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
			callbackOne = 1;
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <switch_PWM_DMA+0x170>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 512; i++){
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a56:	dbcb      	blt.n	80019f0 <switch_PWM_DMA+0x94>
}
 8001a58:	e024      	b.n	8001aa4 <switch_PWM_DMA+0x148>
	} else if (ledFlag == RESET){
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d121      	bne.n	8001aa4 <switch_PWM_DMA+0x148>
		for (int i = 0; i < 512; i++){
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e01a      	b.n	8001a9c <switch_PWM_DMA+0x140>
			oldRedDMA[i] = redDMAValues_NEW[i];
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <switch_PWM_DMA+0x154>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a6e:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <switch_PWM_DMA+0x158>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			oldGreenDMA[i] = greenDMAValues_NEW[i];
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <switch_PWM_DMA+0x15c>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a7e:	490f      	ldr	r1, [pc, #60]	; (8001abc <switch_PWM_DMA+0x160>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			oldBlueDMA[i] = blueDMAValues_NEW[i];
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <switch_PWM_DMA+0x164>)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <switch_PWM_DMA+0x168>)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 512; i++){
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa2:	dbe0      	blt.n	8001a66 <switch_PWM_DMA+0x10a>
}
 8001aa4:	bf00      	nop
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	200029f0 	.word	0x200029f0
 8001ab4:	20005a00 	.word	0x20005a00
 8001ab8:	200031f0 	.word	0x200031f0
 8001abc:	20006200 	.word	0x20006200
 8001ac0:	200039f0 	.word	0x200039f0
 8001ac4:	20006a00 	.word	0x20006a00
 8001ac8:	20000414 	.word	0x20000414
 8001acc:	200059f8 	.word	0x200059f8

08001ad0 <EFFCT>:

// ====================================== FUNKCJE EFEKTÓW ======================================

// Funkcja odpowiadająca za zmianę efektu diody
void EFFCT(){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (strcmp(commandArg, "POLICE") == 0){
 8001ad4:	4948      	ldr	r1, [pc, #288]	; (8001bf8 <EFFCT+0x128>)
 8001ad6:	4849      	ldr	r0, [pc, #292]	; (8001bfc <EFFCT+0x12c>)
 8001ad8:	f7fe fb82 	bl	80001e0 <strcmp>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <EFFCT+0x2c>
		strcpy(actualEffect, commandArg);
 8001ae2:	4946      	ldr	r1, [pc, #280]	; (8001bfc <EFFCT+0x12c>)
 8001ae4:	4846      	ldr	r0, [pc, #280]	; (8001c00 <EFFCT+0x130>)
 8001ae6:	f007 f890 	bl	8008c0a <strcpy>
		prescaler = 35;
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <EFFCT+0x134>)
 8001aec:	2223      	movs	r2, #35	; 0x23
 8001aee:	601a      	str	r2, [r3, #0]
		generatePoliceLights(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW);
 8001af0:	4a45      	ldr	r2, [pc, #276]	; (8001c08 <EFFCT+0x138>)
 8001af2:	4946      	ldr	r1, [pc, #280]	; (8001c0c <EFFCT+0x13c>)
 8001af4:	4846      	ldr	r0, [pc, #280]	; (8001c10 <EFFCT+0x140>)
 8001af6:	f000 f899 	bl	8001c2c <generatePoliceLights>
 8001afa:	e06a      	b.n	8001bd2 <EFFCT+0x102>
	}
	else if (strcmp(commandArg, "DISCO") == 0){
 8001afc:	4945      	ldr	r1, [pc, #276]	; (8001c14 <EFFCT+0x144>)
 8001afe:	483f      	ldr	r0, [pc, #252]	; (8001bfc <EFFCT+0x12c>)
 8001b00:	f7fe fb6e 	bl	80001e0 <strcmp>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <EFFCT+0x54>
		prescaler = 35;
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <EFFCT+0x134>)
 8001b0c:	2223      	movs	r2, #35	; 0x23
 8001b0e:	601a      	str	r2, [r3, #0]
		strcpy(actualEffect, commandArg);
 8001b10:	493a      	ldr	r1, [pc, #232]	; (8001bfc <EFFCT+0x12c>)
 8001b12:	483b      	ldr	r0, [pc, #236]	; (8001c00 <EFFCT+0x130>)
 8001b14:	f007 f879 	bl	8008c0a <strcpy>
		generateDiscoEffect(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW);
 8001b18:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <EFFCT+0x138>)
 8001b1a:	493c      	ldr	r1, [pc, #240]	; (8001c0c <EFFCT+0x13c>)
 8001b1c:	483c      	ldr	r0, [pc, #240]	; (8001c10 <EFFCT+0x140>)
 8001b1e:	f000 f8c7 	bl	8001cb0 <generateDiscoEffect>
 8001b22:	e056      	b.n	8001bd2 <EFFCT+0x102>

	}
	else if (strcmp(commandArg, "BREATH") == 0){
 8001b24:	493c      	ldr	r1, [pc, #240]	; (8001c18 <EFFCT+0x148>)
 8001b26:	4835      	ldr	r0, [pc, #212]	; (8001bfc <EFFCT+0x12c>)
 8001b28:	f7fe fb5a 	bl	80001e0 <strcmp>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <EFFCT+0x7e>
		prescaler = 550;
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <EFFCT+0x134>)
 8001b34:	f240 2226 	movw	r2, #550	; 0x226
 8001b38:	601a      	str	r2, [r3, #0]
		strcpy(actualEffect, commandArg);
 8001b3a:	4930      	ldr	r1, [pc, #192]	; (8001bfc <EFFCT+0x12c>)
 8001b3c:	4830      	ldr	r0, [pc, #192]	; (8001c00 <EFFCT+0x130>)
 8001b3e:	f007 f864 	bl	8008c0a <strcpy>
		generateBreathingEffect(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW);
 8001b42:	4a31      	ldr	r2, [pc, #196]	; (8001c08 <EFFCT+0x138>)
 8001b44:	4931      	ldr	r1, [pc, #196]	; (8001c0c <EFFCT+0x13c>)
 8001b46:	4832      	ldr	r0, [pc, #200]	; (8001c10 <EFFCT+0x140>)
 8001b48:	f000 f9ba 	bl	8001ec0 <generateBreathingEffect>
 8001b4c:	e041      	b.n	8001bd2 <EFFCT+0x102>

	}
	else if (strcmp(commandArg, "HEART") == 0){
 8001b4e:	4933      	ldr	r1, [pc, #204]	; (8001c1c <EFFCT+0x14c>)
 8001b50:	482a      	ldr	r0, [pc, #168]	; (8001bfc <EFFCT+0x12c>)
 8001b52:	f7fe fb45 	bl	80001e0 <strcmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10c      	bne.n	8001b76 <EFFCT+0xa6>
		strcpy(actualEffect, commandArg);
 8001b5c:	4927      	ldr	r1, [pc, #156]	; (8001bfc <EFFCT+0x12c>)
 8001b5e:	4828      	ldr	r0, [pc, #160]	; (8001c00 <EFFCT+0x130>)
 8001b60:	f007 f853 	bl	8008c0a <strcpy>
		prescaler = 35;
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <EFFCT+0x134>)
 8001b66:	2223      	movs	r2, #35	; 0x23
 8001b68:	601a      	str	r2, [r3, #0]
		generateHeartBeatEffect(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW);
 8001b6a:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <EFFCT+0x138>)
 8001b6c:	4927      	ldr	r1, [pc, #156]	; (8001c0c <EFFCT+0x13c>)
 8001b6e:	4828      	ldr	r0, [pc, #160]	; (8001c10 <EFFCT+0x140>)
 8001b70:	f000 fade 	bl	8002130 <generateHeartBeatEffect>
 8001b74:	e02d      	b.n	8001bd2 <EFFCT+0x102>

	}
	else if (strcmp(commandArg, "BLINKING") == 0){
 8001b76:	492a      	ldr	r1, [pc, #168]	; (8001c20 <EFFCT+0x150>)
 8001b78:	4820      	ldr	r0, [pc, #128]	; (8001bfc <EFFCT+0x12c>)
 8001b7a:	f7fe fb31 	bl	80001e0 <strcmp>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10c      	bne.n	8001b9e <EFFCT+0xce>
		prescaler = 150;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <EFFCT+0x134>)
 8001b86:	2296      	movs	r2, #150	; 0x96
 8001b88:	601a      	str	r2, [r3, #0]
		strcpy(actualEffect, commandArg);
 8001b8a:	491c      	ldr	r1, [pc, #112]	; (8001bfc <EFFCT+0x12c>)
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <EFFCT+0x130>)
 8001b8e:	f007 f83c 	bl	8008c0a <strcpy>
		generateBlinkingEffect(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW);
 8001b92:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <EFFCT+0x138>)
 8001b94:	491d      	ldr	r1, [pc, #116]	; (8001c0c <EFFCT+0x13c>)
 8001b96:	481e      	ldr	r0, [pc, #120]	; (8001c10 <EFFCT+0x140>)
 8001b98:	f000 fb10 	bl	80021bc <generateBlinkingEffect>
 8001b9c:	e019      	b.n	8001bd2 <EFFCT+0x102>
	}
	else if (strcmp(commandArg, "RANDOM") == 0){
 8001b9e:	4921      	ldr	r1, [pc, #132]	; (8001c24 <EFFCT+0x154>)
 8001ba0:	4816      	ldr	r0, [pc, #88]	; (8001bfc <EFFCT+0x12c>)
 8001ba2:	f7fe fb1d 	bl	80001e0 <strcmp>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <EFFCT+0xf6>
		prescaler = 175;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <EFFCT+0x134>)
 8001bae:	22af      	movs	r2, #175	; 0xaf
 8001bb0:	601a      	str	r2, [r3, #0]
		strcpy(actualEffect, commandArg);
 8001bb2:	4912      	ldr	r1, [pc, #72]	; (8001bfc <EFFCT+0x12c>)
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <EFFCT+0x130>)
 8001bb6:	f007 f828 	bl	8008c0a <strcpy>
		generaterandomBlinkingEffect(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW);
 8001bba:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <EFFCT+0x138>)
 8001bbc:	4913      	ldr	r1, [pc, #76]	; (8001c0c <EFFCT+0x13c>)
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <EFFCT+0x140>)
 8001bc0:	f000 fb66 	bl	8002290 <generaterandomBlinkingEffect>
 8001bc4:	e005      	b.n	8001bd2 <EFFCT+0x102>
	} else {
		frameRecall(5005, EXECUTE);
 8001bc6:	2106      	movs	r1, #6
 8001bc8:	f241 308d 	movw	r0, #5005	; 0x138d
 8001bcc:	f000 fef6 	bl	80029bc <frameRecall>
		return;
 8001bd0:	e010      	b.n	8001bf4 <EFFCT+0x124>
	}
	// Flaga infomrująca ze nastąpiła zmiana efektu diody ( callback )
	callbackOne = 1;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <EFFCT+0x158>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
	// Resetowanie jasności diody
	BRGHT(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f000 fd19 	bl	8002610 <BRGHT>
	// Wysłanie komunikatu zwrotnego.
	frameRecall(9002, EXECUTE);
 8001bde:	2106      	movs	r1, #6
 8001be0:	f242 302a 	movw	r0, #9002	; 0x232a
 8001be4:	f000 feea 	bl	80029bc <frameRecall>
	// Pobranie nowego efektu w celu przechowywania podczas wyłączonej diody.
	switch_PWM_DMA(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW, RESET);
 8001be8:	2300      	movs	r3, #0
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <EFFCT+0x138>)
 8001bec:	4907      	ldr	r1, [pc, #28]	; (8001c0c <EFFCT+0x13c>)
 8001bee:	4808      	ldr	r0, [pc, #32]	; (8001c10 <EFFCT+0x140>)
 8001bf0:	f7ff feb4 	bl	800195c <switch_PWM_DMA>
}
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800b298 	.word	0x0800b298
 8001bfc:	20001020 	.word	0x20001020
 8001c00:	20000400 	.word	0x20000400
 8001c04:	2000041c 	.word	0x2000041c
 8001c08:	200039f0 	.word	0x200039f0
 8001c0c:	200031f0 	.word	0x200031f0
 8001c10:	200029f0 	.word	0x200029f0
 8001c14:	0800b2a0 	.word	0x0800b2a0
 8001c18:	0800b2a8 	.word	0x0800b2a8
 8001c1c:	0800b2b0 	.word	0x0800b2b0
 8001c20:	0800b2b8 	.word	0x0800b2b8
 8001c24:	0800b2c4 	.word	0x0800b2c4
 8001c28:	200059f8 	.word	0x200059f8

08001c2c <generatePoliceLights>:

void generatePoliceLights(uint32_t *redPWMValues, uint32_t *greenPWMValues, uint32_t *bluePWMValues) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 512; i++){
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e02c      	b.n	8001c98 <generatePoliceLights+0x6c>
		// Wypełnienie tablicy koloru czerwonego w 50%
		if (i < 256){
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2bff      	cmp	r3, #255	; 0xff
 8001c42:	dc13      	bgt.n	8001c6c <generatePoliceLights+0x40>
			bluePWMValues[i] = 0;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
			redPWMValues[i] = 899;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	f240 3283 	movw	r2, #899	; 0x383
 8001c5c:	601a      	str	r2, [r3, #0]
			greenPWMValues[i] = 0;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e012      	b.n	8001c92 <generatePoliceLights+0x66>
		}
		// Wypełnienie tablicy koloru niebieskiego w 50%
		else {
			bluePWMValues[i] = 899;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	f240 3283 	movw	r2, #899	; 0x383
 8001c78:	601a      	str	r2, [r3, #0]
			redPWMValues[i] = 0;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
			greenPWMValues[i] = 0;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 512; i++){
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9e:	dbce      	blt.n	8001c3e <generatePoliceLights+0x12>
		}
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <generateDiscoEffect>:

void generateDiscoEffect(uint32_t *redPWMValues, uint32_t *greenPWMValues, uint32_t *bluePWMValues) {
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	// Pętla przygotowująca wartości dla bufora DMA
	for (int i = 0; i < 512; i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e0dd      	b.n	8001e7e <generateDiscoEffect+0x1ce>
        redPWMValues[i] = (uint32_t)((sin(i * 2 * M_PI / 512) + 1) * 0.5 * 999);
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc44 	bl	8000554 <__aeabi_i2d>
 8001ccc:	a374      	add	r3, pc, #464	; (adr r3, 8001ea0 <generateDiscoEffect+0x1f0>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fca9 	bl	8000628 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001ce6:	f7fe fdc9 	bl	800087c <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	ec43 2b17 	vmov	d7, r2, r3
 8001cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf6:	eef0 0a67 	vmov.f32	s1, s15
 8001cfa:	f008 fa29 	bl	800a150 <sin>
 8001cfe:	ec51 0b10 	vmov	r0, r1, d0
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <generateDiscoEffect+0x208>)
 8001d08:	f7fe fad8 	bl	80002bc <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <generateDiscoEffect+0x20c>)
 8001d1a:	f7fe fc85 	bl	8000628 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	a35c      	add	r3, pc, #368	; (adr r3, 8001e98 <generateDiscoEffect+0x1e8>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fc7c 	bl	8000628 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	18d4      	adds	r4, r2, r3
 8001d40:	f7fe ff34 	bl	8000bac <__aeabi_d2uiz>
 8001d44:	4603      	mov	r3, r0
 8001d46:	6023      	str	r3, [r4, #0]
        greenPWMValues[i] = (uint32_t)((sin(i * 2 * M_PI / 512 + 2 * M_PI / 3) + 1) * 0.5 * 999);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc01 	bl	8000554 <__aeabi_i2d>
 8001d52:	a353      	add	r3, pc, #332	; (adr r3, 8001ea0 <generateDiscoEffect+0x1f0>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc66 	bl	8000628 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001d6c:	f7fe fd86 	bl	800087c <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	a34b      	add	r3, pc, #300	; (adr r3, 8001ea8 <generateDiscoEffect+0x1f8>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fa9d 	bl	80002bc <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b17 	vmov	d7, r2, r3
 8001d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8e:	eef0 0a67 	vmov.f32	s1, s15
 8001d92:	f008 f9dd 	bl	800a150 <sin>
 8001d96:	ec51 0b10 	vmov	r0, r1, d0
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <generateDiscoEffect+0x208>)
 8001da0:	f7fe fa8c 	bl	80002bc <__adddf3>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <generateDiscoEffect+0x20c>)
 8001db2:	f7fe fc39 	bl	8000628 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	a336      	add	r3, pc, #216	; (adr r3, 8001e98 <generateDiscoEffect+0x1e8>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fc30 	bl	8000628 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	18d4      	adds	r4, r2, r3
 8001dd8:	f7fe fee8 	bl	8000bac <__aeabi_d2uiz>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	6023      	str	r3, [r4, #0]
        bluePWMValues[i] = (uint32_t)((sin(i * 2 * M_PI / 512 + 4 * M_PI / 3) + 1) * 0.5 * 999);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fbb5 	bl	8000554 <__aeabi_i2d>
 8001dea:	a32d      	add	r3, pc, #180	; (adr r3, 8001ea0 <generateDiscoEffect+0x1f0>)
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fc1a 	bl	8000628 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001e04:	f7fe fd3a 	bl	800087c <__aeabi_ddiv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	a327      	add	r3, pc, #156	; (adr r3, 8001eb0 <generateDiscoEffect+0x200>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fa51 	bl	80002bc <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	ec43 2b17 	vmov	d7, r2, r3
 8001e22:	eeb0 0a47 	vmov.f32	s0, s14
 8001e26:	eef0 0a67 	vmov.f32	s1, s15
 8001e2a:	f008 f991 	bl	800a150 <sin>
 8001e2e:	ec51 0b10 	vmov	r0, r1, d0
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <generateDiscoEffect+0x208>)
 8001e38:	f7fe fa40 	bl	80002bc <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <generateDiscoEffect+0x20c>)
 8001e4a:	f7fe fbed 	bl	8000628 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	a310      	add	r3, pc, #64	; (adr r3, 8001e98 <generateDiscoEffect+0x1e8>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fbe4 	bl	8000628 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	18d4      	adds	r4, r2, r3
 8001e70:	f7fe fe9c 	bl	8000bac <__aeabi_d2uiz>
 8001e74:	4603      	mov	r3, r0
 8001e76:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 512; i++) {
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e84:	f6ff af1d 	blt.w	8001cc2 <generateDiscoEffect+0x12>
    }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	f3af 8000 	nop.w
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	408f3800 	.word	0x408f3800
 8001ea0:	54442d18 	.word	0x54442d18
 8001ea4:	400921fb 	.word	0x400921fb
 8001ea8:	382d7365 	.word	0x382d7365
 8001eac:	4000c152 	.word	0x4000c152
 8001eb0:	382d7365 	.word	0x382d7365
 8001eb4:	4010c152 	.word	0x4010c152
 8001eb8:	3ff00000 	.word	0x3ff00000
 8001ebc:	3fe00000 	.word	0x3fe00000

08001ec0 <generateBreathingEffect>:

void generateBreathingEffect(uint32_t *redPWMValues, uint32_t *greenPWMValues, uint32_t *bluePWMValues) {
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b0b8      	sub	sp, #224	; 0xe0
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	// Paleta kolorów dla wartości RGB w systemie <0, 255> mnożnik * 3,917647058823529.
	uint32_t colorPalette[16][3] = {
 8001ecc:	4a94      	ldr	r2, [pc, #592]	; (8002120 <generateBreathingEffect+0x260>)
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	22c0      	movs	r2, #192	; 0xc0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f006 fde6 	bl	8008aa8 <memcpy>
			{999,0,0},		{600,0,0},		{999,501,0},	{999,999,0},
			{501,999,0},	{0,999,0}, 		{0,999,501},	{0,999,999},
			{0,501,999},	{0,0,999},		{501,0,999},	{298,0,600},
			{999,0,999},	{600,0,600},	{999,0,498},	{600,0,298}
	};
	int nextColor = 32;
 8001edc:	2320      	movs	r3, #32
 8001ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int paletteIndex = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    // Pętla przygotowująca wartości dla bufora DMA ( takie aby generowały efekt oddychania dla każdego koloru )
	for (uint32_t i = 0; i < 512; i++) {
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001eee:	e106      	b.n	80020fe <generateBreathingEffect+0x23e>
    	if (i < nextColor){
 8001ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ef4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f080 80f1 	bcs.w	80020e0 <generateBreathingEffect+0x220>
    		redPWMValues[i] = (uint32_t)((sin(i * 1 * M_PI / 16) + 1) * 0.5 * colorPalette[paletteIndex][0]);
 8001efe:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001f02:	f7fe fb17 	bl	8000534 <__aeabi_ui2d>
 8001f06:	a384      	add	r3, pc, #528	; (adr r3, 8002118 <generateBreathingEffect+0x258>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb8c 	bl	8000628 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <generateBreathingEffect+0x264>)
 8001f1e:	f7fe fcad 	bl	800087c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ec43 2b17 	vmov	d7, r2, r3
 8001f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2e:	eef0 0a67 	vmov.f32	s1, s15
 8001f32:	f008 f90d 	bl	800a150 <sin>
 8001f36:	ec51 0b10 	vmov	r0, r1, d0
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b7a      	ldr	r3, [pc, #488]	; (8002128 <generateBreathingEffect+0x268>)
 8001f40:	f7fe f9bc 	bl	80002bc <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <generateBreathingEffect+0x26c>)
 8001f52:	f7fe fb69 	bl	8000628 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	33e0      	adds	r3, #224	; 0xe0
 8001f6c:	443b      	add	r3, r7
 8001f6e:	3bcc      	subs	r3, #204	; 0xcc
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fade 	bl	8000534 <__aeabi_ui2d>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f7fe fb52 	bl	8000628 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	18d4      	adds	r4, r2, r3
 8001f96:	f7fe fe09 	bl	8000bac <__aeabi_d2uiz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6023      	str	r3, [r4, #0]
    		greenPWMValues[i] = (uint32_t)((sin(i * 1 * M_PI / 16) + 1) * 0.5 * colorPalette[paletteIndex][1]);
 8001f9e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001fa2:	f7fe fac7 	bl	8000534 <__aeabi_ui2d>
 8001fa6:	a35c      	add	r3, pc, #368	; (adr r3, 8002118 <generateBreathingEffect+0x258>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fb3c 	bl	8000628 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <generateBreathingEffect+0x264>)
 8001fbe:	f7fe fc5d 	bl	800087c <__aeabi_ddiv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	ec43 2b17 	vmov	d7, r2, r3
 8001fca:	eeb0 0a47 	vmov.f32	s0, s14
 8001fce:	eef0 0a67 	vmov.f32	s1, s15
 8001fd2:	f008 f8bd 	bl	800a150 <sin>
 8001fd6:	ec51 0b10 	vmov	r0, r1, d0
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	4b52      	ldr	r3, [pc, #328]	; (8002128 <generateBreathingEffect+0x268>)
 8001fe0:	f7fe f96c 	bl	80002bc <__adddf3>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b4e      	ldr	r3, [pc, #312]	; (800212c <generateBreathingEffect+0x26c>)
 8001ff2:	f7fe fb19 	bl	8000628 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4614      	mov	r4, r2
 8001ffc:	461d      	mov	r5, r3
 8001ffe:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	33e0      	adds	r3, #224	; 0xe0
 800200c:	443b      	add	r3, r7
 800200e:	3bc8      	subs	r3, #200	; 0xc8
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa8e 	bl	8000534 <__aeabi_ui2d>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	18d4      	adds	r4, r2, r3
 8002036:	f7fe fdb9 	bl	8000bac <__aeabi_d2uiz>
 800203a:	4603      	mov	r3, r0
 800203c:	6023      	str	r3, [r4, #0]
    		bluePWMValues[i] = (uint32_t)((sin(i * 1 * M_PI / 16) + 1) * 0.5 * colorPalette[paletteIndex][2]);
 800203e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002042:	f7fe fa77 	bl	8000534 <__aeabi_ui2d>
 8002046:	a334      	add	r3, pc, #208	; (adr r3, 8002118 <generateBreathingEffect+0x258>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	f7fe faec 	bl	8000628 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <generateBreathingEffect+0x264>)
 800205e:	f7fe fc0d 	bl	800087c <__aeabi_ddiv>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	ec43 2b17 	vmov	d7, r2, r3
 800206a:	eeb0 0a47 	vmov.f32	s0, s14
 800206e:	eef0 0a67 	vmov.f32	s1, s15
 8002072:	f008 f86d 	bl	800a150 <sin>
 8002076:	ec51 0b10 	vmov	r0, r1, d0
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <generateBreathingEffect+0x268>)
 8002080:	f7fe f91c 	bl	80002bc <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <generateBreathingEffect+0x26c>)
 8002092:	f7fe fac9 	bl	8000628 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4614      	mov	r4, r2
 800209c:	461d      	mov	r5, r3
 800209e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	33e0      	adds	r3, #224	; 0xe0
 80020ac:	443b      	add	r3, r7
 80020ae:	3bc4      	subs	r3, #196	; 0xc4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa3e 	bl	8000534 <__aeabi_ui2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4620      	mov	r0, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	f7fe fab2 	bl	8000628 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	18d4      	adds	r4, r2, r3
 80020d6:	f7fe fd69 	bl	8000bac <__aeabi_d2uiz>
 80020da:	4603      	mov	r3, r0
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	e009      	b.n	80020f4 <generateBreathingEffect+0x234>
    	}
    	else {
    		paletteIndex++;
 80020e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020e4:	3301      	adds	r3, #1
 80020e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    		nextColor += 32;
 80020ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ee:	3320      	adds	r3, #32
 80020f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for (uint32_t i = 0; i < 512; i++) {
 80020f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020f8:	3301      	adds	r3, #1
 80020fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80020fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002106:	f4ff aef3 	bcc.w	8001ef0 <generateBreathingEffect+0x30>

    	}
    }
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	37e0      	adds	r7, #224	; 0xe0
 8002110:	46bd      	mov	sp, r7
 8002112:	bdb0      	pop	{r4, r5, r7, pc}
 8002114:	f3af 8000 	nop.w
 8002118:	54442d18 	.word	0x54442d18
 800211c:	400921fb 	.word	0x400921fb
 8002120:	0800b2cc 	.word	0x0800b2cc
 8002124:	40300000 	.word	0x40300000
 8002128:	3ff00000 	.word	0x3ff00000
 800212c:	3fe00000 	.word	0x3fe00000

08002130 <generateHeartBeatEffect>:

void generateHeartBeatEffect(uint32_t *redPWMValues, uint32_t *greenPWMValues, uint32_t *bluePWMValues) {
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	// Przebieg zmieniający wartości wypełnienia okresu PWM OUT ( W tym przypadku jasność danej składowej R/G/B )
	for (int i = 0; i < 512; i++) {
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e030      	b.n	80021a4 <generateHeartBeatEffect+0x74>
		if (i < 256) {
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2bff      	cmp	r3, #255	; 0xff
 8002146:	dc18      	bgt.n	800217a <generateHeartBeatEffect+0x4a>
			redPWMValues[i] = 999 - (i * 3);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	461a      	mov	r2, r3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f203 31e7 	addw	r1, r3, #999	; 0x3e7
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	460a      	mov	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
			greenPWMValues[i] = 0;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	4413      	add	r3, r2
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
			bluePWMValues[i] = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e011      	b.n	800219e <generateHeartBeatEffect+0x6e>
		}
		else
		{
			// Przytrzymanie wypełnienia na 999 - (256 * 3) = 231 dla lepszego efektu bicia serca.
			redPWMValues[i] = 231;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	22e7      	movs	r2, #231	; 0xe7
 8002184:	601a      	str	r2, [r3, #0]
			greenPWMValues[i] = 0;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
			bluePWMValues[i] = 0;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 512; i++) {
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021aa:	dbca      	blt.n	8002142 <generateHeartBeatEffect+0x12>
		}
	}
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <generateBlinkingEffect>:

void generateBlinkingEffect(uint32_t *redPWMValues, uint32_t *greenPWMValues, uint32_t *bluePWMValues){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b0b8      	sub	sp, #224	; 0xe0
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
	// Paleta kolorów dla wartości RGB w systemie <0, 255> mnożnik * 3,917647058823529.
	uint32_t colorPalette[16][3] = {
 80021c8:	4a30      	ldr	r2, [pc, #192]	; (800228c <generateBlinkingEffect+0xd0>)
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4611      	mov	r1, r2
 80021d0:	22c0      	movs	r2, #192	; 0xc0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f006 fc68 	bl	8008aa8 <memcpy>
			{501,999,0},	{0,999,0}, 		{0,999,501},	{0,999,999},
			{0,501,999},	{0,0,999},		{501,0,999},	{298,0,600},
			{999,0,999},	{600,0,600},	{999,0,498},	{600,0,298}
	};

	int nextColor = 32;
 80021d8:	2320      	movs	r3, #32
 80021da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int paletteIndex = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	// Pętla przygotowująca wartości dla bufora DMA ( co 32 słowa zmiana koloru )
	for (int i = 0; i < 512; i++){
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80021ea:	e045      	b.n	8002278 <generateBlinkingEffect+0xbc>
		if (i < nextColor){
 80021ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80021f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021f4:	429a      	cmp	r2, r3
 80021f6:	da30      	bge.n	800225a <generateBlinkingEffect+0x9e>
			redPWMValues[i] = colorPalette[paletteIndex][0];
 80021f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	18d1      	adds	r1, r2, r3
 8002202:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	33e0      	adds	r3, #224	; 0xe0
 8002210:	443b      	add	r3, r7
 8002212:	3bcc      	subs	r3, #204	; 0xcc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	600b      	str	r3, [r1, #0]
			greenPWMValues[i] = colorPalette[paletteIndex][1];
 8002218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	18d1      	adds	r1, r2, r3
 8002222:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	33e0      	adds	r3, #224	; 0xe0
 8002230:	443b      	add	r3, r7
 8002232:	3bc8      	subs	r3, #200	; 0xc8
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	600b      	str	r3, [r1, #0]
			bluePWMValues[i] = colorPalette[paletteIndex][2];
 8002238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	18d1      	adds	r1, r2, r3
 8002242:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	33e0      	adds	r3, #224	; 0xe0
 8002250:	443b      	add	r3, r7
 8002252:	3bc4      	subs	r3, #196	; 0xc4
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e009      	b.n	800226e <generateBlinkingEffect+0xb2>
		} else {
			paletteIndex++;
 800225a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800225e:	3301      	adds	r3, #1
 8002260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			nextColor += 32;
 8002264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002268:	3320      	adds	r3, #32
 800226a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for (int i = 0; i < 512; i++){
 800226e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002272:	3301      	adds	r3, #1
 8002274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800227c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002280:	dbb4      	blt.n	80021ec <generateBlinkingEffect+0x30>
		}
	}
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	37e0      	adds	r7, #224	; 0xe0
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0800b2cc 	.word	0x0800b2cc

08002290 <generaterandomBlinkingEffect>:

void generaterandomBlinkingEffect(uint32_t *redPWMValues, uint32_t *greenPWMValues, uint32_t *bluePWMValues){
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	int nextColor = 16;
 800229c:	2310      	movs	r3, #16
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
	srand(HAL_GetTick());
 80022a0:	f001 fb4e 	bl	8003940 <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f006 fc14 	bl	8008ad4 <srand>
	int randomR = rand() % 1001;
 80022ac:	f006 fc40 	bl	8008b30 <rand>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <generaterandomBlinkingEffect+0x140>)
 80022b4:	fb82 1203 	smull	r1, r2, r2, r3
 80022b8:	1211      	asrs	r1, r2, #8
 80022ba:	17da      	asrs	r2, r3, #31
 80022bc:	1a8a      	subs	r2, r1, r2
 80022be:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80022c2:	fb01 f202 	mul.w	r2, r1, r2
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	623b      	str	r3, [r7, #32]
	int randomG = rand() % 1001;
 80022ca:	f006 fc31 	bl	8008b30 <rand>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4a3f      	ldr	r2, [pc, #252]	; (80023d0 <generaterandomBlinkingEffect+0x140>)
 80022d2:	fb82 1203 	smull	r1, r2, r2, r3
 80022d6:	1211      	asrs	r1, r2, #8
 80022d8:	17da      	asrs	r2, r3, #31
 80022da:	1a8a      	subs	r2, r1, r2
 80022dc:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80022e0:	fb01 f202 	mul.w	r2, r1, r2
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
	int randomB = rand() % 1001;
 80022e8:	f006 fc22 	bl	8008b30 <rand>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a38      	ldr	r2, [pc, #224]	; (80023d0 <generaterandomBlinkingEffect+0x140>)
 80022f0:	fb82 1203 	smull	r1, r2, r2, r3
 80022f4:	1211      	asrs	r1, r2, #8
 80022f6:	17da      	asrs	r2, r3, #31
 80022f8:	1a8a      	subs	r2, r1, r2
 80022fa:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80022fe:	fb01 f202 	mul.w	r2, r1, r2
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 512; i++){
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e058      	b.n	80023be <generaterandomBlinkingEffect+0x12e>
		if (i <= nextColor){
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	429a      	cmp	r2, r3
 8002312:	dc12      	bgt.n	800233a <generaterandomBlinkingEffect+0xaa>
		redPWMValues[i] = randomR;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	601a      	str	r2, [r3, #0]
		greenPWMValues[i] = randomG;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	4413      	add	r3, r2
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	601a      	str	r2, [r3, #0]
		bluePWMValues[i] = randomB;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e03e      	b.n	80023b8 <generaterandomBlinkingEffect+0x128>
		} else {
			int tmp = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
			while (tmp++ < 100) if(USART_kbhit()) searchFrame();
 800233e:	e006      	b.n	800234e <generaterandomBlinkingEffect+0xbe>
 8002340:	f7fe fc54 	bl	8000bec <USART_kbhit>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <generaterandomBlinkingEffect+0xbe>
 800234a:	f7fe fd91 	bl	8000e70 <searchFrame>
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	613a      	str	r2, [r7, #16]
 8002354:	2b63      	cmp	r3, #99	; 0x63
 8002356:	ddf3      	ble.n	8002340 <generaterandomBlinkingEffect+0xb0>
			randomR = rand() % 1001;
 8002358:	f006 fbea 	bl	8008b30 <rand>
 800235c:	4603      	mov	r3, r0
 800235e:	4a1c      	ldr	r2, [pc, #112]	; (80023d0 <generaterandomBlinkingEffect+0x140>)
 8002360:	fb82 1203 	smull	r1, r2, r2, r3
 8002364:	1211      	asrs	r1, r2, #8
 8002366:	17da      	asrs	r2, r3, #31
 8002368:	1a8a      	subs	r2, r1, r2
 800236a:	f240 31e9 	movw	r1, #1001	; 0x3e9
 800236e:	fb01 f202 	mul.w	r2, r1, r2
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	623b      	str	r3, [r7, #32]
			randomG = rand() % 1001;
 8002376:	f006 fbdb 	bl	8008b30 <rand>
 800237a:	4603      	mov	r3, r0
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <generaterandomBlinkingEffect+0x140>)
 800237e:	fb82 1203 	smull	r1, r2, r2, r3
 8002382:	1211      	asrs	r1, r2, #8
 8002384:	17da      	asrs	r2, r3, #31
 8002386:	1a8a      	subs	r2, r1, r2
 8002388:	f240 31e9 	movw	r1, #1001	; 0x3e9
 800238c:	fb01 f202 	mul.w	r2, r1, r2
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	61fb      	str	r3, [r7, #28]
			randomB = rand() % 1001;
 8002394:	f006 fbcc 	bl	8008b30 <rand>
 8002398:	4603      	mov	r3, r0
 800239a:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <generaterandomBlinkingEffect+0x140>)
 800239c:	fb82 1203 	smull	r1, r2, r2, r3
 80023a0:	1211      	asrs	r1, r2, #8
 80023a2:	17da      	asrs	r2, r3, #31
 80023a4:	1a8a      	subs	r2, r1, r2
 80023a6:	f240 31e9 	movw	r1, #1001	; 0x3e9
 80023aa:	fb01 f202 	mul.w	r2, r1, r2
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
			nextColor += nextColor;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 512; i++){
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c4:	dba2      	blt.n	800230c <generaterandomBlinkingEffect+0x7c>
		}
	}
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	4178749f 	.word	0x4178749f

080023d4 <STCLR>:

// ====================================== FUNKCJE ZMIANY KOLORÓW ======================================

void STCLR(){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
	strcpy(actualEffect, command);
 80023da:	491d      	ldr	r1, [pc, #116]	; (8002450 <STCLR+0x7c>)
 80023dc:	481d      	ldr	r0, [pc, #116]	; (8002454 <STCLR+0x80>)
 80023de:	f006 fc14 	bl	8008c0a <strcpy>
	for (int i = 0; i < 512; i++){
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	e017      	b.n	8002418 <STCLR+0x44>
		redDMAValues_NEW[i] = numArguments[0];
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <STCLR+0x84>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	4a1b      	ldr	r2, [pc, #108]	; (800245c <STCLR+0x88>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		greenDMAValues_NEW[i] = numArguments[1];
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <STCLR+0x84>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <STCLR+0x8c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		blueDMAValues_NEW[i] = numArguments[2];
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <STCLR+0x84>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4619      	mov	r1, r3
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <STCLR+0x90>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 512; i++){
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3301      	adds	r3, #1
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241e:	dbe3      	blt.n	80023e8 <STCLR+0x14>
	}
	// Ustawienie częstotliowsci TIMERA
	prescaler = 35;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <STCLR+0x94>)
 8002422:	2223      	movs	r2, #35	; 0x23
 8002424:	601a      	str	r2, [r3, #0]
	// Informacja że powinna nastąpić zmiana efektu diody RGB ( callback )
	callbackOne = 1;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <STCLR+0x98>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
	// Resetowanie jasności
	BRGHT(1);
 800242c:	2001      	movs	r0, #1
 800242e:	f000 f8ef 	bl	8002610 <BRGHT>
	// Pobranie nowego efektu w celu przechowywania podczas wyłączonej diody.
	switch_PWM_DMA(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW, RESET);
 8002432:	2300      	movs	r3, #0
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <STCLR+0x90>)
 8002436:	490a      	ldr	r1, [pc, #40]	; (8002460 <STCLR+0x8c>)
 8002438:	4808      	ldr	r0, [pc, #32]	; (800245c <STCLR+0x88>)
 800243a:	f7ff fa8f 	bl	800195c <switch_PWM_DMA>
	// Wysłanie komunikatu zwrotnego
	frameRecall(9001, EXECUTE);
 800243e:	2106      	movs	r1, #6
 8002440:	f242 3029 	movw	r0, #9001	; 0x2329
 8002444:	f000 faba 	bl	80029bc <frameRecall>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20001010 	.word	0x20001010
 8002454:	20000400 	.word	0x20000400
 8002458:	20001104 	.word	0x20001104
 800245c:	200029f0 	.word	0x200029f0
 8002460:	200031f0 	.word	0x200031f0
 8002464:	200039f0 	.word	0x200039f0
 8002468:	2000041c 	.word	0x2000041c
 800246c:	200059f8 	.word	0x200059f8

08002470 <COLOR>:

void COLOR(){
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
	// Pobranie nazwy efektu w celu wyświetlenia callback'a
	strcpy(actualEffect, command);
 8002476:	4956      	ldr	r1, [pc, #344]	; (80025d0 <COLOR+0x160>)
 8002478:	4856      	ldr	r0, [pc, #344]	; (80025d4 <COLOR+0x164>)
 800247a:	f006 fbc6 	bl	8008c0a <strcpy>
	// Ustawia diodę na wybrany kolor.
	int redValue = 0, greenValue = 0, blueValue = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
		if (strcmp(commandArg, "RED") == 0) {
 800248a:	4953      	ldr	r1, [pc, #332]	; (80025d8 <COLOR+0x168>)
 800248c:	4853      	ldr	r0, [pc, #332]	; (80025dc <COLOR+0x16c>)
 800248e:	f7fd fea7 	bl	80001e0 <strcmp>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <COLOR+0x30>
			redValue = 999;
 8002498:	f240 33e7 	movw	r3, #999	; 0x3e7
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e065      	b.n	800256c <COLOR+0xfc>
		} else if (strcmp(commandArg, "GREEN") == 0) {
 80024a0:	494f      	ldr	r1, [pc, #316]	; (80025e0 <COLOR+0x170>)
 80024a2:	484e      	ldr	r0, [pc, #312]	; (80025dc <COLOR+0x16c>)
 80024a4:	f7fd fe9c 	bl	80001e0 <strcmp>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <COLOR+0x46>
			greenValue = 999;
 80024ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	e05a      	b.n	800256c <COLOR+0xfc>
		} else if (strcmp(commandArg, "BLUE") == 0) {
 80024b6:	494b      	ldr	r1, [pc, #300]	; (80025e4 <COLOR+0x174>)
 80024b8:	4848      	ldr	r0, [pc, #288]	; (80025dc <COLOR+0x16c>)
 80024ba:	f7fd fe91 	bl	80001e0 <strcmp>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <COLOR+0x5c>
			blueValue = 999;
 80024c4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	e04f      	b.n	800256c <COLOR+0xfc>
		} else if (strcmp(commandArg, "YELLOW") == 0) {
 80024cc:	4946      	ldr	r1, [pc, #280]	; (80025e8 <COLOR+0x178>)
 80024ce:	4843      	ldr	r0, [pc, #268]	; (80025dc <COLOR+0x16c>)
 80024d0:	f7fd fe86 	bl	80001e0 <strcmp>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <COLOR+0x78>
			redValue = 999;
 80024da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024de:	60fb      	str	r3, [r7, #12]
			greenValue = 999;
 80024e0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	e041      	b.n	800256c <COLOR+0xfc>
		} else if (strcmp(commandArg, "ORANGE") == 0) {
 80024e8:	4940      	ldr	r1, [pc, #256]	; (80025ec <COLOR+0x17c>)
 80024ea:	483c      	ldr	r0, [pc, #240]	; (80025dc <COLOR+0x16c>)
 80024ec:	f7fd fe78 	bl	80001e0 <strcmp>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <COLOR+0x94>
			redValue = 999;
 80024f6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024fa:	60fb      	str	r3, [r7, #12]
			greenValue = 501;
 80024fc:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	e033      	b.n	800256c <COLOR+0xfc>
		} else if (strcmp(commandArg, "PINK") == 0) {
 8002504:	493a      	ldr	r1, [pc, #232]	; (80025f0 <COLOR+0x180>)
 8002506:	4835      	ldr	r0, [pc, #212]	; (80025dc <COLOR+0x16c>)
 8002508:	f7fd fe6a 	bl	80001e0 <strcmp>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d108      	bne.n	8002524 <COLOR+0xb4>
			redValue = 999;
 8002512:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002516:	60fb      	str	r3, [r7, #12]
			greenValue = 200;
 8002518:	23c8      	movs	r3, #200	; 0xc8
 800251a:	60bb      	str	r3, [r7, #8]
			blueValue = 600;
 800251c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	e023      	b.n	800256c <COLOR+0xfc>
		} else if (strcmp(commandArg, "PURPLE") == 0) {
 8002524:	4933      	ldr	r1, [pc, #204]	; (80025f4 <COLOR+0x184>)
 8002526:	482d      	ldr	r0, [pc, #180]	; (80025dc <COLOR+0x16c>)
 8002528:	f7fd fe5a 	bl	80001e0 <strcmp>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <COLOR+0xd0>
			redValue = 600;
 8002532:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002536:	60fb      	str	r3, [r7, #12]
			blueValue = 600;
 8002538:	f44f 7316 	mov.w	r3, #600	; 0x258
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	e015      	b.n	800256c <COLOR+0xfc>
		} else if (strcmp(commandArg, "CYAN") == 0) {
 8002540:	492d      	ldr	r1, [pc, #180]	; (80025f8 <COLOR+0x188>)
 8002542:	4826      	ldr	r0, [pc, #152]	; (80025dc <COLOR+0x16c>)
 8002544:	f7fd fe4c 	bl	80001e0 <strcmp>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <COLOR+0xf0>
			redValue = 200;
 800254e:	23c8      	movs	r3, #200	; 0xc8
 8002550:	60fb      	str	r3, [r7, #12]
			greenValue = 999;
 8002552:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002556:	60bb      	str	r3, [r7, #8]
			blueValue = 999;
 8002558:	f240 33e7 	movw	r3, #999	; 0x3e7
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	e005      	b.n	800256c <COLOR+0xfc>
		} else {
			frameRecall(5006, EXECUTE);
 8002560:	2106      	movs	r1, #6
 8002562:	f241 308e 	movw	r0, #5006	; 0x138e
 8002566:	f000 fa29 	bl	80029bc <frameRecall>
			return;
 800256a:	e02d      	b.n	80025c8 <COLOR+0x158>
		}
		// Przypisywanie wybranych wartości do buforów
		for (int i = 0; i < 512; i++) {
 800256c:	2300      	movs	r3, #0
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	e011      	b.n	8002596 <COLOR+0x126>
			redDMAValues_NEW[i] = redValue;
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4921      	ldr	r1, [pc, #132]	; (80025fc <COLOR+0x18c>)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_NEW[i] = greenValue;
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	4920      	ldr	r1, [pc, #128]	; (8002600 <COLOR+0x190>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_NEW[i] = blueValue;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	491e      	ldr	r1, [pc, #120]	; (8002604 <COLOR+0x194>)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 512; i++) {
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259c:	dbe9      	blt.n	8002572 <COLOR+0x102>
		}
		// Ustawienie częstotliowsci TIMERA
		prescaler = 35;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <COLOR+0x198>)
 80025a0:	2223      	movs	r2, #35	; 0x23
 80025a2:	601a      	str	r2, [r3, #0]
		// Informacja że powinna nastąpić zmiana efektu diody RGB ( callback )
		callbackOne = 1;
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <COLOR+0x19c>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
		// Resetowanie jasności diody
		BRGHT(1);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f000 f830 	bl	8002610 <BRGHT>
		// Wysłanie komunikatu zwrotnego
		frameRecall(9006, EXECUTE);
 80025b0:	2106      	movs	r1, #6
 80025b2:	f242 302e 	movw	r0, #9006	; 0x232e
 80025b6:	f000 fa01 	bl	80029bc <frameRecall>
		// Pobranie nowego efektu w celu przechowywania podczas wyłączonej diody.
		switch_PWM_DMA(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW, RESET);
 80025ba:	2300      	movs	r3, #0
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <COLOR+0x194>)
 80025be:	4910      	ldr	r1, [pc, #64]	; (8002600 <COLOR+0x190>)
 80025c0:	480e      	ldr	r0, [pc, #56]	; (80025fc <COLOR+0x18c>)
 80025c2:	f7ff f9cb 	bl	800195c <switch_PWM_DMA>
		return;
 80025c6:	bf00      	nop
}
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20001010 	.word	0x20001010
 80025d4:	20000400 	.word	0x20000400
 80025d8:	0800b38c 	.word	0x0800b38c
 80025dc:	20001020 	.word	0x20001020
 80025e0:	0800b390 	.word	0x0800b390
 80025e4:	0800b398 	.word	0x0800b398
 80025e8:	0800b3a0 	.word	0x0800b3a0
 80025ec:	0800b3a8 	.word	0x0800b3a8
 80025f0:	0800b3b0 	.word	0x0800b3b0
 80025f4:	0800b3b8 	.word	0x0800b3b8
 80025f8:	0800b3c0 	.word	0x0800b3c0
 80025fc:	200029f0 	.word	0x200029f0
 8002600:	200031f0 	.word	0x200031f0
 8002604:	200039f0 	.word	0x200039f0
 8002608:	2000041c 	.word	0x2000041c
 800260c:	200059f8 	.word	0x200059f8

08002610 <BRGHT>:

// ====================================== FUNKCJE ZMIANY STANU DIODY / ODCZYT STANU DIODY ======================================


void BRGHT(int stockBrigthness){
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	static uint32_t redStockBrigthnes[512];
	static uint32_t greenStockBrigthnes[512];
	static uint32_t blueStockBrigthnes[512];
	static float oldBrightness = 100;							// Stara jasność
	// Jeżeli funkcja przyjeła flage stockBrigthness == 1, zapisuje podstawowe intensywności składowych RGB
	if (stockBrigthness){
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d025      	beq.n	800266a <BRGHT+0x5a>
		// Zapis jasności 100% ( od niej zawsze jest odliczana jasność )
		brightness = (float)100;
 800261e:	4bb1      	ldr	r3, [pc, #708]	; (80028e4 <BRGHT+0x2d4>)
 8002620:	4ab1      	ldr	r2, [pc, #708]	; (80028e8 <BRGHT+0x2d8>)
 8002622:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 512; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	e01a      	b.n	8002660 <BRGHT+0x50>
			redStockBrigthnes[i] = redDMAValues_NEW[i];
 800262a:	4ab0      	ldr	r2, [pc, #704]	; (80028ec <BRGHT+0x2dc>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002632:	49af      	ldr	r1, [pc, #700]	; (80028f0 <BRGHT+0x2e0>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenStockBrigthnes[i] = greenDMAValues_NEW[i];
 800263a:	4aae      	ldr	r2, [pc, #696]	; (80028f4 <BRGHT+0x2e4>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002642:	49ad      	ldr	r1, [pc, #692]	; (80028f8 <BRGHT+0x2e8>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueStockBrigthnes[i] = blueDMAValues_NEW[i];
 800264a:	4aac      	ldr	r2, [pc, #688]	; (80028fc <BRGHT+0x2ec>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002652:	49ab      	ldr	r1, [pc, #684]	; (8002900 <BRGHT+0x2f0>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 512; i++){
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002666:	dbe0      	blt.n	800262a <BRGHT+0x1a>
		}
		callbackOne = 1;					// Wywołanie płynnej zmiany jasności
		callbackTwo = 1;					// Wywołanie statycznej jasności
		frameRecall(9005, EXECUTE);
	}
	return;
 8002668:	e138      	b.n	80028dc <BRGHT+0x2cc>
		oldBrightness = brightness;
 800266a:	4b9e      	ldr	r3, [pc, #632]	; (80028e4 <BRGHT+0x2d4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4aa5      	ldr	r2, [pc, #660]	; (8002904 <BRGHT+0x2f4>)
 8002670:	6013      	str	r3, [r2, #0]
		brightness = (float)numArguments[0];
 8002672:	4ba5      	ldr	r3, [pc, #660]	; (8002908 <BRGHT+0x2f8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	4b99      	ldr	r3, [pc, #612]	; (80028e4 <BRGHT+0x2d4>)
 8002680:	edc3 7a00 	vstr	s15, [r3]
		if (brightness > 100){
 8002684:	4b97      	ldr	r3, [pc, #604]	; (80028e4 <BRGHT+0x2d4>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800290c <BRGHT+0x2fc>
 800268e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002696:	dd05      	ble.n	80026a4 <BRGHT+0x94>
			frameRecall(2002, EXECUTE);
 8002698:	2106      	movs	r1, #6
 800269a:	f240 70d2 	movw	r0, #2002	; 0x7d2
 800269e:	f000 f98d 	bl	80029bc <frameRecall>
			return;
 80026a2:	e11c      	b.n	80028de <BRGHT+0x2ce>
		for (int i = 0; i < 512; i++){
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e08c      	b.n	80027c4 <BRGHT+0x1b4>
			if (i != 0) t = (float) i / 512;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <BRGHT+0xb6>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ba:	eddf 6a95 	vldr	s13, [pc, #596]	; 8002910 <BRGHT+0x300>
 80026be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c2:	edc7 7a06 	vstr	s15, [r7, #24]
			int32_t currentBrightness = oldBrightness + (brightness - oldBrightness) * t;
 80026c6:	4b87      	ldr	r3, [pc, #540]	; (80028e4 <BRGHT+0x2d4>)
 80026c8:	ed93 7a00 	vldr	s14, [r3]
 80026cc:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <BRGHT+0x2f4>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80026da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026de:	4b89      	ldr	r3, [pc, #548]	; (8002904 <BRGHT+0x2f4>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ec:	ee17 3a90 	vmov	r3, s15
 80026f0:	60fb      	str	r3, [r7, #12]
			redDMAValues_NEW[i] = (uint32_t)(redStockBrigthnes[i] * (currentBrightness / 100.0));
 80026f2:	4a7f      	ldr	r2, [pc, #508]	; (80028f0 <BRGHT+0x2e0>)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd ff1a 	bl	8000534 <__aeabi_ui2d>
 8002700:	4604      	mov	r4, r0
 8002702:	460d      	mov	r5, r1
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7fd ff25 	bl	8000554 <__aeabi_i2d>
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b81      	ldr	r3, [pc, #516]	; (8002914 <BRGHT+0x304>)
 8002710:	f7fe f8b4 	bl	800087c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fd ff84 	bl	8000628 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe fa40 	bl	8000bac <__aeabi_d2uiz>
 800272c:	4602      	mov	r2, r0
 800272e:	496f      	ldr	r1, [pc, #444]	; (80028ec <BRGHT+0x2dc>)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_NEW[i] = (uint32_t)(greenStockBrigthnes[i] * (currentBrightness  / 100.0));
 8002736:	4a70      	ldr	r2, [pc, #448]	; (80028f8 <BRGHT+0x2e8>)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fef8 	bl	8000534 <__aeabi_ui2d>
 8002744:	4604      	mov	r4, r0
 8002746:	460d      	mov	r5, r1
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7fd ff03 	bl	8000554 <__aeabi_i2d>
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b70      	ldr	r3, [pc, #448]	; (8002914 <BRGHT+0x304>)
 8002754:	f7fe f892 	bl	800087c <__aeabi_ddiv>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4620      	mov	r0, r4
 800275e:	4629      	mov	r1, r5
 8002760:	f7fd ff62 	bl	8000628 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fa1e 	bl	8000bac <__aeabi_d2uiz>
 8002770:	4602      	mov	r2, r0
 8002772:	4960      	ldr	r1, [pc, #384]	; (80028f4 <BRGHT+0x2e4>)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMAValues_NEW[i] = (uint32_t)(blueStockBrigthnes[i] * (currentBrightness  / 100.0));
 800277a:	4a61      	ldr	r2, [pc, #388]	; (8002900 <BRGHT+0x2f0>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fed6 	bl	8000534 <__aeabi_ui2d>
 8002788:	4604      	mov	r4, r0
 800278a:	460d      	mov	r5, r1
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7fd fee1 	bl	8000554 <__aeabi_i2d>
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <BRGHT+0x304>)
 8002798:	f7fe f870 	bl	800087c <__aeabi_ddiv>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f7fd ff40 	bl	8000628 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe f9fc 	bl	8000bac <__aeabi_d2uiz>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4951      	ldr	r1, [pc, #324]	; (80028fc <BRGHT+0x2ec>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 512; i++){
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ca:	f6ff af6e 	blt.w	80026aa <BRGHT+0x9a>
		for (int i = 0; i < 512; i++){
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e074      	b.n	80028be <BRGHT+0x2ae>
			redDMAValues_SPECIAL[i] = (uint32_t)round(redStockBrigthnes[i] * (brightness / 100));
 80027d4:	4a46      	ldr	r2, [pc, #280]	; (80028f0 <BRGHT+0x2e0>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <BRGHT+0x2d4>)
 80027e6:	edd3 6a00 	vldr	s13, [r3]
 80027ea:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800290c <BRGHT+0x2fc>
 80027ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	ee17 0a90 	vmov	r0, s15
 80027fa:	f7fd febd 	bl	8000578 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b10 	vmov	d0, r2, r3
 8002806:	f007 fc5d 	bl	800a0c4 <round>
 800280a:	ec53 2b10 	vmov	r2, r3, d0
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f7fe f9cb 	bl	8000bac <__aeabi_d2uiz>
 8002816:	4602      	mov	r2, r0
 8002818:	493f      	ldr	r1, [pc, #252]	; (8002918 <BRGHT+0x308>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			greenDMAValues_SPECIAL[i] = (uint32_t)round(greenStockBrigthnes[i] * (brightness / 100));
 8002820:	4a35      	ldr	r2, [pc, #212]	; (80028f8 <BRGHT+0x2e8>)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <BRGHT+0x2d4>)
 8002832:	edd3 6a00 	vldr	s13, [r3]
 8002836:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800290c <BRGHT+0x2fc>
 800283a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	ee17 0a90 	vmov	r0, s15
 8002846:	f7fd fe97 	bl	8000578 <__aeabi_f2d>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	ec43 2b10 	vmov	d0, r2, r3
 8002852:	f007 fc37 	bl	800a0c4 <round>
 8002856:	ec53 2b10 	vmov	r2, r3, d0
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f7fe f9a5 	bl	8000bac <__aeabi_d2uiz>
 8002862:	4602      	mov	r2, r0
 8002864:	492d      	ldr	r1, [pc, #180]	; (800291c <BRGHT+0x30c>)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			blueDMABalues_SPECIAL[i] = (uint32_t)round(blueStockBrigthnes[i] * (brightness / 100));
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <BRGHT+0x2f0>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <BRGHT+0x2d4>)
 800287e:	edd3 6a00 	vldr	s13, [r3]
 8002882:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800290c <BRGHT+0x2fc>
 8002886:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800288a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288e:	ee17 0a90 	vmov	r0, s15
 8002892:	f7fd fe71 	bl	8000578 <__aeabi_f2d>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	ec43 2b10 	vmov	d0, r2, r3
 800289e:	f007 fc11 	bl	800a0c4 <round>
 80028a2:	ec53 2b10 	vmov	r2, r3, d0
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f97f 	bl	8000bac <__aeabi_d2uiz>
 80028ae:	4602      	mov	r2, r0
 80028b0:	491b      	ldr	r1, [pc, #108]	; (8002920 <BRGHT+0x310>)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 512; i++){
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	3301      	adds	r3, #1
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c4:	db86      	blt.n	80027d4 <BRGHT+0x1c4>
		callbackOne = 1;					// Wywołanie płynnej zmiany jasności
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <BRGHT+0x314>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
		callbackTwo = 1;					// Wywołanie statycznej jasności
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <BRGHT+0x318>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
		frameRecall(9005, EXECUTE);
 80028d2:	2106      	movs	r1, #6
 80028d4:	f242 302d 	movw	r0, #9005	; 0x232d
 80028d8:	f000 f870 	bl	80029bc <frameRecall>
	return;
 80028dc:	bf00      	nop
}
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bdb0      	pop	{r4, r5, r7, pc}
 80028e4:	20000418 	.word	0x20000418
 80028e8:	42c80000 	.word	0x42c80000
 80028ec:	200029f0 	.word	0x200029f0
 80028f0:	20007200 	.word	0x20007200
 80028f4:	200031f0 	.word	0x200031f0
 80028f8:	20007a00 	.word	0x20007a00
 80028fc:	200039f0 	.word	0x200039f0
 8002900:	20008200 	.word	0x20008200
 8002904:	20000420 	.word	0x20000420
 8002908:	20001104 	.word	0x20001104
 800290c:	42c80000 	.word	0x42c80000
 8002910:	44000000 	.word	0x44000000
 8002914:	40590000 	.word	0x40590000
 8002918:	200041f0 	.word	0x200041f0
 800291c:	200049f0 	.word	0x200049f0
 8002920:	200051f0 	.word	0x200051f0
 8002924:	200059f8 	.word	0x200059f8
 8002928:	200059fc 	.word	0x200059fc

0800292c <RGBST>:

void RGBST(){
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	// Zmienia stan diody na ON/OFF w zależności od argumentu funkcji.
	if (strcmp(commandArg, "ON") == 0) switch_PWM_DMA(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW, ON);
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <RGBST+0x60>)
 8002932:	4817      	ldr	r0, [pc, #92]	; (8002990 <RGBST+0x64>)
 8002934:	f7fd fc54 	bl	80001e0 <strcmp>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <RGBST+0x20>
 800293e:	2301      	movs	r3, #1
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <RGBST+0x68>)
 8002942:	4915      	ldr	r1, [pc, #84]	; (8002998 <RGBST+0x6c>)
 8002944:	4815      	ldr	r0, [pc, #84]	; (800299c <RGBST+0x70>)
 8002946:	f7ff f809 	bl	800195c <switch_PWM_DMA>
 800294a:	e013      	b.n	8002974 <RGBST+0x48>
	else if (strcmp(commandArg, "OFF") == 0) switch_PWM_DMA(redDMAValues_NEW, greenDMAValues_NEW, blueDMAValues_NEW, OFF);
 800294c:	4914      	ldr	r1, [pc, #80]	; (80029a0 <RGBST+0x74>)
 800294e:	4810      	ldr	r0, [pc, #64]	; (8002990 <RGBST+0x64>)
 8002950:	f7fd fc46 	bl	80001e0 <strcmp>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <RGBST+0x3e>
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <RGBST+0x68>)
 8002960:	490d      	ldr	r1, [pc, #52]	; (8002998 <RGBST+0x6c>)
 8002962:	480e      	ldr	r0, [pc, #56]	; (800299c <RGBST+0x70>)
 8002964:	f7fe fffa 	bl	800195c <switch_PWM_DMA>
 8002968:	e004      	b.n	8002974 <RGBST+0x48>
	else frameRecall(5008, EXECUTE);
 800296a:	2106      	movs	r1, #6
 800296c:	f241 3090 	movw	r0, #5008	; 0x1390
 8002970:	f000 f824 	bl	80029bc <frameRecall>

	if (errorFlag == 0) frameRecall(9003, EXECUTE);
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <RGBST+0x78>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <RGBST+0x5a>
 800297c:	2106      	movs	r1, #6
 800297e:	f242 302b 	movw	r0, #9003	; 0x232b
 8002982:	f000 f81b 	bl	80029bc <frameRecall>
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	0800b3c8 	.word	0x0800b3c8
 8002990:	20001020 	.word	0x20001020
 8002994:	200039f0 	.word	0x200039f0
 8002998:	200031f0 	.word	0x200031f0
 800299c:	200029f0 	.word	0x200029f0
 80029a0:	0800b3cc 	.word	0x0800b3cc
 80029a4:	200011ec 	.word	0x200011ec

080029a8 <GETST>:

void GETST(){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	frameRecall(9004, EXECUTE);
 80029ac:	2106      	movs	r1, #6
 80029ae:	f242 302c 	movw	r0, #9004	; 0x232c
 80029b2:	f000 f803 	bl	80029bc <frameRecall>
	return;
 80029b6:	bf00      	nop
}
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <frameRecall>:

// ====================================================== WYKONYWANIE KOMEND END ======================================================

// ====================================================== KOMUNIKATY ZWROTNE START ======================================================

void frameRecall(int ID, int sectionID){
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	b0b0      	sub	sp, #192	; 0xc0
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
    // Nazwy sekcji w której program zakończył działanie
	const char* sections[] = {"OutOfFrame\0","SENDER\0", "RECEIVER\0", "COMMAND_LENGTH\0", "COMMAND\0", "CHECK_SUM\0", "EXECUTE\0"};
 80029c6:	4bb1      	ldr	r3, [pc, #708]	; (8002c8c <frameRecall+0x2d0>)
 80029c8:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80029cc:	461d      	mov	r5, r3
 80029ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // Przypisanie nazwy sekcji poprzez odebrany identyfikator sekcji (przy wywołaniu funkcji)
    const char* section = sections[sectionID];
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	33b8      	adds	r3, #184	; 0xb8
 80029e0:	443b      	add	r3, r7
 80029e2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80029e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    // Zmienna zawierająca aktualny stan diody wł./wył. etc
	const char* ledStateInf[10];

	// brightness to INT
	int brightnessINT = (int)brightness;
 80029ea:	4ba9      	ldr	r3, [pc, #676]	; (8002c90 <frameRecall+0x2d4>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f4:	ee17 3a90 	vmov	r3, s15
 80029f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    // Tablica zawierająca znaki które mają zostać wysłane
	char dataToSend[100];

    // Jeżeli identyfikator komunikatu pobrany podczas wywołania funkcji jest < 9000 jest to ID błędu
	if (ID < 9000) errorFlag = 1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f242 3227 	movw	r2, #8999	; 0x2327
 8002a02:	4293      	cmp	r3, r2
 8002a04:	dc02      	bgt.n	8002a0c <frameRecall+0x50>
 8002a06:	4ba3      	ldr	r3, [pc, #652]	; (8002c94 <frameRecall+0x2d8>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

    // Switch dopisujący dane do komunikatu zwrotnego
	switch(ID){
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f242 322d 	movw	r2, #9005	; 0x232d
 8002a12:	4293      	cmp	r3, r2
 8002a14:	f300 81c7 	bgt.w	8002da6 <frameRecall+0x3ea>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f242 3229 	movw	r2, #9001	; 0x2329
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	da40      	bge.n	8002aa4 <frameRecall+0xe8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f241 3290 	movw	r2, #5008	; 0x1390
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	f300 81bc 	bgt.w	8002da6 <frameRecall+0x3ea>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f241 3289 	movw	r2, #5001	; 0x1389
 8002a34:	4293      	cmp	r3, r2
 8002a36:	da49      	bge.n	8002acc <frameRecall+0x110>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f640 72a6 	movw	r2, #4006	; 0xfa6
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	f300 81b1 	bgt.w	8002da6 <frameRecall+0x3ea>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002a4a:	dc59      	bgt.n	8002b00 <frameRecall+0x144>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f000 8086 	beq.w	8002b64 <frameRecall+0x1a8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f300 81a1 	bgt.w	8002da6 <frameRecall+0x3ea>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d073      	beq.n	8002b56 <frameRecall+0x19a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8002a74:	4293      	cmp	r3, r2
 8002a76:	f300 8196 	bgt.w	8002da6 <frameRecall+0x3ea>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d061      	beq.n	8002b48 <frameRecall+0x18c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8002a8a:	f280 818c 	bge.w	8002da6 <frameRecall+0x3ea>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d049      	beq.n	8002b2c <frameRecall+0x170>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d04b      	beq.n	8002b3a <frameRecall+0x17e>
 8002aa2:	e180      	b.n	8002da6 <frameRecall+0x3ea>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002aaa:	3b29      	subs	r3, #41	; 0x29
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	f200 817a 	bhi.w	8002da6 <frameRecall+0x3ea>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <frameRecall+0xfc>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002cfb 	.word	0x08002cfb
 8002abc:	08002d15 	.word	0x08002d15
 8002ac0:	08002d21 	.word	0x08002d21
 8002ac4:	08002d5b 	.word	0x08002d5b
 8002ac8:	08002d99 	.word	0x08002d99
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002ad2:	3b09      	subs	r3, #9
 8002ad4:	2b07      	cmp	r3, #7
 8002ad6:	f200 8166 	bhi.w	8002da6 <frameRecall+0x3ea>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <frameRecall+0x124>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002bef 	.word	0x08002bef
 8002ae4:	08002c0f 	.word	0x08002c0f
 8002ae8:	08002c2f 	.word	0x08002c2f
 8002aec:	08002da7 	.word	0x08002da7
 8002af0:	08002c49 	.word	0x08002c49
 8002af4:	08002c63 	.word	0x08002c63
 8002af8:	08002c79 	.word	0x08002c79
 8002afc:	08002ce1 	.word	0x08002ce1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f6a3 73a1 	subw	r3, r3, #4001	; 0xfa1
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	f200 814d 	bhi.w	8002da6 <frameRecall+0x3ea>
 8002b0c:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <frameRecall+0x158>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b73 	.word	0x08002b73
 8002b18:	08002b8d 	.word	0x08002b8d
 8002b1c:	08002ba7 	.word	0x08002ba7
 8002b20:	08002bb9 	.word	0x08002bb9
 8002b24:	08002bcb 	.word	0x08002bcb
 8002b28:	08002bdd 	.word	0x08002bdd
	case 1001:
		sprintf(commandArg, "(1001 - Błąd sekcji %s, wykryto nieoczekiwane użycie separatora!)", section);
 8002b2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b30:	4959      	ldr	r1, [pc, #356]	; (8002c98 <frameRecall+0x2dc>)
 8002b32:	485a      	ldr	r0, [pc, #360]	; (8002c9c <frameRecall+0x2e0>)
 8002b34:	f006 f83a 	bl	8008bac <siprintf>
		break;
 8002b38:	e141      	b.n	8002dbe <frameRecall+0x402>
	case 1002:
		sprintf(commandArg, "(1002 - Błąd sekcji %s, nie wykryto separatora w oczekiwanym miejscu!)", section);
 8002b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b3e:	4958      	ldr	r1, [pc, #352]	; (8002ca0 <frameRecall+0x2e4>)
 8002b40:	4856      	ldr	r0, [pc, #344]	; (8002c9c <frameRecall+0x2e0>)
 8002b42:	f006 f833 	bl	8008bac <siprintf>
		break;
 8002b46:	e13a      	b.n	8002dbe <frameRecall+0x402>
// +++++++++++++++++++++++++++++++++++++++++ DO SPRAWDZENIA +++++++++++++++++++++++++++++++++++++++++
	case 1003:
		sprintf(commandArg, "(1003 - Błąd sekcji %s, wykryto znak bitowego zera \\0 - przerwanie ciągu znaków!)", section);
 8002b48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4c:	4955      	ldr	r1, [pc, #340]	; (8002ca4 <frameRecall+0x2e8>)
 8002b4e:	4853      	ldr	r0, [pc, #332]	; (8002c9c <frameRecall+0x2e0>)
 8002b50:	f006 f82c 	bl	8008bac <siprintf>
		break;
 8002b54:	e133      	b.n	8002dbe <frameRecall+0x402>
// ----------------------------------------- DO SPRAWDZENIA -----------------------------------------
	case 2001:
		sprintf(commandArg, "(2001 - Błąd liczbowy w %s, odczytany znak nie jest cyfrą systemu dziesiętnego!)", section);
 8002b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b5a:	4953      	ldr	r1, [pc, #332]	; (8002ca8 <frameRecall+0x2ec>)
 8002b5c:	484f      	ldr	r0, [pc, #316]	; (8002c9c <frameRecall+0x2e0>)
 8002b5e:	f006 f825 	bl	8008bac <siprintf>
		break;
 8002b62:	e12c      	b.n	8002dbe <frameRecall+0x402>
	case 2002:
		sprintf(commandArg, "(2002 - Błąd liczbowy w %s, wprowadzona wartość jest poza dopuszczalnym zakresem!)", section);
 8002b64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b68:	4950      	ldr	r1, [pc, #320]	; (8002cac <frameRecall+0x2f0>)
 8002b6a:	484c      	ldr	r0, [pc, #304]	; (8002c9c <frameRecall+0x2e0>)
 8002b6c:	f006 f81e 	bl	8008bac <siprintf>
		break;
 8002b70:	e125      	b.n	8002dbe <frameRecall+0x402>
	case 4001:
		strcpy(commandArg, "(4001 - Błąd ramki, nieznany nadawca!)\0");
 8002b72:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <frameRecall+0x2e0>)
 8002b74:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <frameRecall+0x2f4>)
 8002b76:	4614      	mov	r4, r2
 8002b78:	461d      	mov	r5, r3
 8002b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b86:	c403      	stmia	r4!, {r0, r1}
 8002b88:	7022      	strb	r2, [r4, #0]
		break;
 8002b8a:	e118      	b.n	8002dbe <frameRecall+0x402>
	case 4002:
		strcpy(commandArg, "(4002 - Błąd ramki, nieznany odbiorca!)\0");
 8002b8c:	4a43      	ldr	r2, [pc, #268]	; (8002c9c <frameRecall+0x2e0>)
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <frameRecall+0x2f8>)
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ba0:	c403      	stmia	r4!, {r0, r1}
 8002ba2:	8022      	strh	r2, [r4, #0]
		break;
 8002ba4:	e10b      	b.n	8002dbe <frameRecall+0x402>
	case 4003:
		strcpy(commandArg, "(4003 - Błąd ramki, wyliczona suma kontrolna z danych wynikowych jest inna od podanej!)\0");
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <frameRecall+0x2e0>)
 8002ba8:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <frameRecall+0x2fc>)
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	235a      	movs	r3, #90	; 0x5a
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f005 ff79 	bl	8008aa8 <memcpy>
		break;
 8002bb6:	e102      	b.n	8002dbe <frameRecall+0x402>
	case 4004:
		strcpy(commandArg, "(4004 - Błąd ramki, długość otrzymanej komendy jest niezgodna z podaną!)\0");
 8002bb8:	4a38      	ldr	r2, [pc, #224]	; (8002c9c <frameRecall+0x2e0>)
 8002bba:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <frameRecall+0x300>)
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	234f      	movs	r3, #79	; 0x4f
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f005 ff70 	bl	8008aa8 <memcpy>
		break;
 8002bc8:	e0f9      	b.n	8002dbe <frameRecall+0x402>
	case 4005:
        strcpy(commandArg, "(4005 - Błąd ramki, nie wykryto separatorów argumentu w oczekiwanym miejscu!)\0");
 8002bca:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <frameRecall+0x2e0>)
 8002bcc:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <frameRecall+0x304>)
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	2351      	movs	r3, #81	; 0x51
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f005 ff67 	bl	8008aa8 <memcpy>
		break;
 8002bda:	e0f0      	b.n	8002dbe <frameRecall+0x402>
	case 4006:
		strcpy(commandArg, "(4006 - Błąd ramki, wykryto separator argumentu w nieoczekiwanym miejscu!)\0");
 8002bdc:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <frameRecall+0x2e0>)
 8002bde:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <frameRecall+0x308>)
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	234d      	movs	r3, #77	; 0x4d
 8002be6:	461a      	mov	r2, r3
 8002be8:	f005 ff5e 	bl	8008aa8 <memcpy>
		break;
 8002bec:	e0e7      	b.n	8002dbe <frameRecall+0x402>
	case 5001:
		strcpy(commandArg, "(5001 - Błąd komendy tekstowej, nieznana komenda!)\0");
 8002bee:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <frameRecall+0x2e0>)
 8002bf0:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <frameRecall+0x30c>)
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c06:	6020      	str	r0, [r4, #0]
 8002c08:	3404      	adds	r4, #4
 8002c0a:	7021      	strb	r1, [r4, #0]
		break;
 8002c0c:	e0d7      	b.n	8002dbe <frameRecall+0x402>
	case 5002:
		strcpy(commandArg, "(5002 - Błąd komendy liczbowej, nieznana komenda!)\0");
 8002c0e:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <frameRecall+0x2e0>)
 8002c10:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <frameRecall+0x310>)
 8002c12:	4614      	mov	r4, r2
 8002c14:	461d      	mov	r5, r3
 8002c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c26:	6020      	str	r0, [r4, #0]
 8002c28:	3404      	adds	r4, #4
 8002c2a:	7021      	strb	r1, [r4, #0]
		break;
 8002c2c:	e0c7      	b.n	8002dbe <frameRecall+0x402>
	case 5003:
		strcpy(commandArg, "(5003 - Błąd typu komendy, nieznany typ komendy!)\0");
 8002c2e:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <frameRecall+0x2e0>)
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <frameRecall+0x314>)
 8002c32:	4614      	mov	r4, r2
 8002c34:	461d      	mov	r5, r3
 8002c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c42:	682b      	ldr	r3, [r5, #0]
 8002c44:	6023      	str	r3, [r4, #0]
		break;
 8002c46:	e0ba      	b.n	8002dbe <frameRecall+0x402>
	case 5005:
		strcpy(commandArg, "(5005 - Nie znaleziono takiego efektu!)\0");
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <frameRecall+0x2e0>)
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <frameRecall+0x318>)
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c5c:	e884 0003 	stmia.w	r4, {r0, r1}
		break;
 8002c60:	e0ad      	b.n	8002dbe <frameRecall+0x402>
	case 5006:
		strcpy(commandArg, "(5006 - Nie znaleziono koloru!)\0");
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <frameRecall+0x2e0>)
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <frameRecall+0x31c>)
 8002c66:	4614      	mov	r4, r2
 8002c68:	461d      	mov	r5, r3
 8002c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 8002c76:	e0a2      	b.n	8002dbe <frameRecall+0x402>
	case 5007:
		strcpy(commandArg, "(5007 - Błąd komendy liczbowej, wykryto liczbe argumentów większą od 3!)\0");
 8002c78:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <frameRecall+0x2e0>)
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <frameRecall+0x320>)
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	234e      	movs	r3, #78	; 0x4e
 8002c82:	461a      	mov	r2, r3
 8002c84:	f005 ff10 	bl	8008aa8 <memcpy>
		break;
 8002c88:	e099      	b.n	8002dbe <frameRecall+0x402>
 8002c8a:	bf00      	nop
 8002c8c:	0800b9fc 	.word	0x0800b9fc
 8002c90:	20000418 	.word	0x20000418
 8002c94:	200011ec 	.word	0x200011ec
 8002c98:	0800b3d0 	.word	0x0800b3d0
 8002c9c:	20001020 	.word	0x20001020
 8002ca0:	0800b418 	.word	0x0800b418
 8002ca4:	0800b464 	.word	0x0800b464
 8002ca8:	0800b4bc 	.word	0x0800b4bc
 8002cac:	0800b514 	.word	0x0800b514
 8002cb0:	0800b56c 	.word	0x0800b56c
 8002cb4:	0800b598 	.word	0x0800b598
 8002cb8:	0800b5c4 	.word	0x0800b5c4
 8002cbc:	0800b620 	.word	0x0800b620
 8002cc0:	0800b670 	.word	0x0800b670
 8002cc4:	0800b6c4 	.word	0x0800b6c4
 8002cc8:	0800b714 	.word	0x0800b714
 8002ccc:	0800b74c 	.word	0x0800b74c
 8002cd0:	0800b784 	.word	0x0800b784
 8002cd4:	0800b7bc 	.word	0x0800b7bc
 8002cd8:	0800b7e8 	.word	0x0800b7e8
 8002cdc:	0800b80c 	.word	0x0800b80c
	case 5008:
		strcpy(commandArg, "(5008 - Błąd komendy, nieprawidłowy argument!)\0");
 8002ce0:	4a7f      	ldr	r2, [pc, #508]	; (8002ee0 <frameRecall+0x524>)
 8002ce2:	4b80      	ldr	r3, [pc, #512]	; (8002ee4 <frameRecall+0x528>)
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	8023      	strh	r3, [r4, #0]
		break;
 8002cf8:	e061      	b.n	8002dbe <frameRecall+0x402>
	case 9001:
		strcpy(commandArg, "(9001 -Pomyślnie zmieniono kolor diody!)\0");
 8002cfa:	4a79      	ldr	r2, [pc, #484]	; (8002ee0 <frameRecall+0x524>)
 8002cfc:	4b7a      	ldr	r3, [pc, #488]	; (8002ee8 <frameRecall+0x52c>)
 8002cfe:	4614      	mov	r4, r2
 8002d00:	461d      	mov	r5, r3
 8002d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d0e:	c403      	stmia	r4!, {r0, r1}
 8002d10:	8022      	strh	r2, [r4, #0]
		break;
 8002d12:	e054      	b.n	8002dbe <frameRecall+0x402>
	case 9002:
		sprintf(commandArg, "(9002 - Pomyślnie zmieniono efekt diody na %s!)", actualEffect);
 8002d14:	4a75      	ldr	r2, [pc, #468]	; (8002eec <frameRecall+0x530>)
 8002d16:	4976      	ldr	r1, [pc, #472]	; (8002ef0 <frameRecall+0x534>)
 8002d18:	4871      	ldr	r0, [pc, #452]	; (8002ee0 <frameRecall+0x524>)
 8002d1a:	f005 ff47 	bl	8008bac <siprintf>
		break;
 8002d1e:	e04e      	b.n	8002dbe <frameRecall+0x402>
	case 9003:
		if (ledState == ON) strcpy(ledStateInf, "ON");
 8002d20:	4b74      	ldr	r3, [pc, #464]	; (8002ef4 <frameRecall+0x538>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d109      	bne.n	8002d3c <frameRecall+0x380>
 8002d28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d2c:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <frameRecall+0x53c>)
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	4611      	mov	r1, r2
 8002d32:	8019      	strh	r1, [r3, #0]
 8002d34:	3302      	adds	r3, #2
 8002d36:	0c12      	lsrs	r2, r2, #16
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e006      	b.n	8002d4a <frameRecall+0x38e>
		else if (ledState == OFF) strcpy(ledStateInf, "OFF");
 8002d3c:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <frameRecall+0x538>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d101      	bne.n	8002d4a <frameRecall+0x38e>
 8002d46:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <frameRecall+0x540>)
 8002d48:	66fb      	str	r3, [r7, #108]	; 0x6c
		sprintf(commandArg, "(9003 - Pomyślnie zmieniono stan diody na %s!)", ledStateInf);
 8002d4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d4e:	461a      	mov	r2, r3
 8002d50:	496b      	ldr	r1, [pc, #428]	; (8002f00 <frameRecall+0x544>)
 8002d52:	4863      	ldr	r0, [pc, #396]	; (8002ee0 <frameRecall+0x524>)
 8002d54:	f005 ff2a 	bl	8008bac <siprintf>
		break;
 8002d58:	e031      	b.n	8002dbe <frameRecall+0x402>
	case 9004:
		if (ledState == ON) strcpy(ledStateInf, "ON");
 8002d5a:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <frameRecall+0x538>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d108      	bne.n	8002d74 <frameRecall+0x3b8>
 8002d62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d66:	4a64      	ldr	r2, [pc, #400]	; (8002ef8 <frameRecall+0x53c>)
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	8019      	strh	r1, [r3, #0]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	0c12      	lsrs	r2, r2, #16
 8002d72:	701a      	strb	r2, [r3, #0]
		if (ledState == OFF) strcpy(ledStateInf, "OFF");
 8002d74:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <frameRecall+0x538>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d101      	bne.n	8002d82 <frameRecall+0x3c6>
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <frameRecall+0x540>)
 8002d80:	66fb      	str	r3, [r7, #108]	; 0x6c
		sprintf(commandArg, "(9004 - Stan: %s,Jasność: %d%%,Efekt: %s!)",ledStateInf, brightnessINT, actualEffect);
 8002d82:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002d86:	4b59      	ldr	r3, [pc, #356]	; (8002eec <frameRecall+0x530>)
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d8e:	495d      	ldr	r1, [pc, #372]	; (8002f04 <frameRecall+0x548>)
 8002d90:	4853      	ldr	r0, [pc, #332]	; (8002ee0 <frameRecall+0x524>)
 8002d92:	f005 ff0b 	bl	8008bac <siprintf>
		break;
 8002d96:	e012      	b.n	8002dbe <frameRecall+0x402>
	case 9005:
		sprintf(commandArg, "(9005 - Pomyślnie zmieniono jasność diody na %d %%!)", brightnessINT);
 8002d98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d9c:	495a      	ldr	r1, [pc, #360]	; (8002f08 <frameRecall+0x54c>)
 8002d9e:	4850      	ldr	r0, [pc, #320]	; (8002ee0 <frameRecall+0x524>)
 8002da0:	f005 ff04 	bl	8008bac <siprintf>
		break;
 8002da4:	e00b      	b.n	8002dbe <frameRecall+0x402>
	default:
        // Na potrzeby wersji DEBUG
		strcpy(commandArg, "Niezidentyfikowany\0");
 8002da6:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <frameRecall+0x524>)
 8002da8:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <frameRecall+0x550>)
 8002daa:	4614      	mov	r4, r2
 8002dac:	461d      	mov	r5, r3
 8002dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	8022      	strh	r2, [r4, #0]
 8002db8:	3402      	adds	r4, #2
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	7023      	strb	r3, [r4, #0]
	}

    // Przypisane odpowiedniego nagłówka komunikatu zwrotnego poprzez sprawdzenie jego ID
	if (ID < 2000) strcpy(dataToSend, "TXTWRNSEC\0");                                           // Błędy sekcji
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dc4:	da06      	bge.n	8002dd4 <frameRecall+0x418>
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	4a51      	ldr	r2, [pc, #324]	; (8002f10 <frameRecall+0x554>)
 8002dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dce:	c303      	stmia	r3!, {r0, r1}
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	e048      	b.n	8002e66 <frameRecall+0x4aa>
	else if (ID > 2000 && ID < 3000) strcpy(dataToSend, "TXTWRNNUM\0");                         // Błędy liczbowe
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dda:	dd0b      	ble.n	8002df4 <frameRecall+0x438>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002de2:	4293      	cmp	r3, r2
 8002de4:	dc06      	bgt.n	8002df4 <frameRecall+0x438>
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <frameRecall+0x558>)
 8002dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dee:	c303      	stmia	r3!, {r0, r1}
 8002df0:	801a      	strh	r2, [r3, #0]
 8002df2:	e038      	b.n	8002e66 <frameRecall+0x4aa>
	else if (ID > 4000 && ID < 5000) strcpy(dataToSend, "TXTWRNFRM\0");                         // Błędy w ramce
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002dfa:	dd0b      	ble.n	8002e14 <frameRecall+0x458>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e02:	4293      	cmp	r3, r2
 8002e04:	dc06      	bgt.n	8002e14 <frameRecall+0x458>
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	4a43      	ldr	r2, [pc, #268]	; (8002f18 <frameRecall+0x55c>)
 8002e0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e0e:	c303      	stmia	r3!, {r0, r1}
 8002e10:	801a      	strh	r2, [r3, #0]
 8002e12:	e028      	b.n	8002e66 <frameRecall+0x4aa>
	else if (ID > 5000 && ID < 6000) strcpy(dataToSend, "TXTWRNCMD\0");                         // Błędy w komendach (zła komenda etc.)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	dd0b      	ble.n	8002e36 <frameRecall+0x47a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e24:	4293      	cmp	r3, r2
 8002e26:	dc06      	bgt.n	8002e36 <frameRecall+0x47a>
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <frameRecall+0x560>)
 8002e2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e30:	c303      	stmia	r3!, {r0, r1}
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	e017      	b.n	8002e66 <frameRecall+0x4aa>
	else if (ID > 9000 && ID < 10000) strcpy(dataToSend, "TXTCMDCRR\0");                        // Komunikat o prawidłowej obsłudze ramki + komendy
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f242 3228 	movw	r2, #9000	; 0x2328
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	dd0b      	ble.n	8002e58 <frameRecall+0x49c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e46:	4293      	cmp	r3, r2
 8002e48:	dc06      	bgt.n	8002e58 <frameRecall+0x49c>
 8002e4a:	f107 0308 	add.w	r3, r7, #8
 8002e4e:	4a34      	ldr	r2, [pc, #208]	; (8002f20 <frameRecall+0x564>)
 8002e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e52:	c303      	stmia	r3!, {r0, r1}
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	e006      	b.n	8002e66 <frameRecall+0x4aa>
	else strcpy(dataToSend, "UNKNOWN\0");                                                       // Na potrzeby wersji DEBUG
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <frameRecall+0x568>)
 8002e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e62:	e883 0003 	stmia.w	r3, {r0, r1}

	// Połączenie wiadomości do wysłania i obliczenia sumy kontrolnej
	strcat(dataToSend, commandArg);
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	491d      	ldr	r1, [pc, #116]	; (8002ee0 <frameRecall+0x524>)
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f005 febd 	bl	8008bec <strcat>
	maxCmdLen = strlen(dataToSend);                                                             // Wyliczenie długości danych
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd f9bc 	bl	80001f4 <strlen>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	b21a      	sxth	r2, r3
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <frameRecall+0x56c>)
 8002e82:	801a      	strh	r2, [r3, #0]
	crc_value = crc(dataToSend, maxCmdLen) % 999;                                               // Wyliczenie sumy CRC
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <frameRecall+0x56c>)
 8002e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fa34 	bl	8001300 <crc>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <frameRecall+0x570>)
 8002e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea0:	1ad1      	subs	r1, r2, r3
 8002ea2:	0849      	lsrs	r1, r1, #1
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0a5b      	lsrs	r3, r3, #9
 8002ea8:	f240 31e7 	movw	r1, #999	; 0x3e7
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <frameRecall+0x574>)
 8002eb4:	6013      	str	r3, [r2, #0]
    // Wysłanie komunikatu
	USART_fsend("\n\r@%s:%s:%d:%s:%d$\n\r\0", recAdr, senAdr, maxCmdLen, dataToSend, crc_value);
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <frameRecall+0x56c>)
 8002eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <frameRecall+0x574>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <frameRecall+0x578>)
 8002ece:	491a      	ldr	r1, [pc, #104]	; (8002f38 <frameRecall+0x57c>)
 8002ed0:	481a      	ldr	r0, [pc, #104]	; (8002f3c <frameRecall+0x580>)
 8002ed2:	f7fd fecb 	bl	8000c6c <USART_fsend>
	return;
 8002ed6:	bf00      	nop
}
 8002ed8:	37b8      	adds	r7, #184	; 0xb8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20001020 	.word	0x20001020
 8002ee4:	0800b85c 	.word	0x0800b85c
 8002ee8:	0800b890 	.word	0x0800b890
 8002eec:	20000400 	.word	0x20000400
 8002ef0:	0800b8bc 	.word	0x0800b8bc
 8002ef4:	20000414 	.word	0x20000414
 8002ef8:	0800b3c8 	.word	0x0800b3c8
 8002efc:	0046464f 	.word	0x0046464f
 8002f00:	0800b8f0 	.word	0x0800b8f0
 8002f04:	0800b920 	.word	0x0800b920
 8002f08:	0800b950 	.word	0x0800b950
 8002f0c:	0800b988 	.word	0x0800b988
 8002f10:	0800b99c 	.word	0x0800b99c
 8002f14:	0800b9a8 	.word	0x0800b9a8
 8002f18:	0800b9b4 	.word	0x0800b9b4
 8002f1c:	0800b9c0 	.word	0x0800b9c0
 8002f20:	0800b9cc 	.word	0x0800b9cc
 8002f24:	0800b9d8 	.word	0x0800b9d8
 8002f28:	20000f2c 	.word	0x20000f2c
 8002f2c:	06680a41 	.word	0x06680a41
 8002f30:	20001100 	.word	0x20001100
 8002f34:	0800b258 	.word	0x0800b258
 8002f38:	0800b25c 	.word	0x0800b25c
 8002f3c:	0800b9e4 	.word	0x0800b9e4

08002f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f44:	f000 fca2 	bl	800388c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f48:	f000 f816 	bl	8002f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f4c:	f000 f962 	bl	8003214 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f50:	f000 f932 	bl	80031b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002f54:	f000 f900 	bl	8003158 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002f58:	f000 f870 	bl	800303c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Inicjalizacja odbioru USART
  HAL_UART_Receive_IT(&huart2,&RX_BF[0],1);
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4904      	ldr	r1, [pc, #16]	; (8002f70 <main+0x30>)
 8002f60:	4804      	ldr	r0, [pc, #16]	; (8002f74 <main+0x34>)
 8002f62:	f004 fb39 	bl	80075d8 <HAL_UART_Receive_IT>
  // Inicjalizacja PWM + DMA
  start_PWM_DMA();
 8002f66:	f7fe fccb 	bl	8001900 <start_PWM_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	  /* USER CODE BEGIN 3 */
	  searchFrame();										// Szukanie ramki
 8002f6a:	f7fd ff81 	bl	8000e70 <searchFrame>
 8002f6e:	e7fc      	b.n	8002f6a <main+0x2a>
 8002f70:	2000064c 	.word	0x2000064c
 8002f74:	200005c8 	.word	0x200005c8

08002f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b0a6      	sub	sp, #152	; 0x98
 8002f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f82:	2228      	movs	r2, #40	; 0x28
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 fd9c 	bl	8008ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	2258      	movs	r2, #88	; 0x58
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fd8e 	bl	8008ac4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fc4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 f99c 	bl	8004314 <HAL_RCC_OscConfig>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002fe2:	f000 f97d 	bl	80032e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fe6:	230f      	movs	r3, #15
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fea:	2302      	movs	r3, #2
 8002fec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ffc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f002 f9da 	bl	80053bc <HAL_RCC_ClockConfig>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800300e:	f000 f967 	bl	80032e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <SystemClock_Config+0xc0>)
 8003014:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800301a:	2300      	movs	r3, #0
 800301c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	4618      	mov	r0, r3
 8003022:	f002 fc01 	bl	8005828 <HAL_RCCEx_PeriphCLKConfig>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800302c:	f000 f958 	bl	80032e0 <Error_Handler>
  }
}
 8003030:	bf00      	nop
 8003032:	3798      	adds	r7, #152	; 0x98
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	00200002 	.word	0x00200002

0800303c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800305c:	463b      	mov	r3, r7
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	615a      	str	r2, [r3, #20]
 800306c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <MX_TIM4_Init+0x114>)
 8003070:	4a38      	ldr	r2, [pc, #224]	; (8003154 <MX_TIM4_Init+0x118>)
 8003072:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 8003074:	4b36      	ldr	r3, [pc, #216]	; (8003150 <MX_TIM4_Init+0x114>)
 8003076:	2223      	movs	r2, #35	; 0x23
 8003078:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307a:	4b35      	ldr	r3, [pc, #212]	; (8003150 <MX_TIM4_Init+0x114>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003080:	4b33      	ldr	r3, [pc, #204]	; (8003150 <MX_TIM4_Init+0x114>)
 8003082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003086:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <MX_TIM4_Init+0x114>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <MX_TIM4_Init+0x114>)
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003094:	482e      	ldr	r0, [pc, #184]	; (8003150 <MX_TIM4_Init+0x114>)
 8003096:	f002 fde5 	bl	8005c64 <HAL_TIM_Base_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80030a0:	f000 f91e 	bl	80032e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ae:	4619      	mov	r1, r3
 80030b0:	4827      	ldr	r0, [pc, #156]	; (8003150 <MX_TIM4_Init+0x114>)
 80030b2:	f003 fae7 	bl	8006684 <HAL_TIM_ConfigClockSource>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80030bc:	f000 f910 	bl	80032e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80030c0:	4823      	ldr	r0, [pc, #140]	; (8003150 <MX_TIM4_Init+0x114>)
 80030c2:	f002 fe26 	bl	8005d12 <HAL_TIM_PWM_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80030cc:	f000 f908 	bl	80032e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	4619      	mov	r1, r3
 80030de:	481c      	ldr	r0, [pc, #112]	; (8003150 <MX_TIM4_Init+0x114>)
 80030e0:	f004 f914 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80030ea:	f000 f8f9 	bl	80032e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030ee:	2360      	movs	r3, #96	; 0x60
 80030f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030fe:	463b      	mov	r3, r7
 8003100:	2200      	movs	r2, #0
 8003102:	4619      	mov	r1, r3
 8003104:	4812      	ldr	r0, [pc, #72]	; (8003150 <MX_TIM4_Init+0x114>)
 8003106:	f003 f9a9 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003110:	f000 f8e6 	bl	80032e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003114:	463b      	mov	r3, r7
 8003116:	2204      	movs	r2, #4
 8003118:	4619      	mov	r1, r3
 800311a:	480d      	ldr	r0, [pc, #52]	; (8003150 <MX_TIM4_Init+0x114>)
 800311c:	f003 f99e 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8003126:	f000 f8db 	bl	80032e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800312a:	463b      	mov	r3, r7
 800312c:	2208      	movs	r2, #8
 800312e:	4619      	mov	r1, r3
 8003130:	4807      	ldr	r0, [pc, #28]	; (8003150 <MX_TIM4_Init+0x114>)
 8003132:	f003 f993 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800313c:	f000 f8d0 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <MX_TIM4_Init+0x114>)
 8003142:	f000 f9a5 	bl	8003490 <HAL_TIM_MspPostInit>
}
 8003146:	bf00      	nop
 8003148:	3738      	adds	r7, #56	; 0x38
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200004b0 	.word	0x200004b0
 8003154:	40000800 	.word	0x40000800

08003158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 800315e:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <MX_USART2_UART_Init+0x5c>)
 8003160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 8003164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 8003196:	2200      	movs	r2, #0
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800319a:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_USART2_UART_Init+0x58>)
 800319c:	f004 f960 	bl	8007460 <HAL_UART_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80031a6:	f000 f89b 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200005c8 	.word	0x200005c8
 80031b4:	40004400 	.word	0x40004400

080031b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <MX_DMA_Init+0x58>)
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4a13      	ldr	r2, [pc, #76]	; (8003210 <MX_DMA_Init+0x58>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6153      	str	r3, [r2, #20]
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_DMA_Init+0x58>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	200b      	movs	r0, #11
 80031dc:	f000 fc97 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031e0:	200b      	movs	r0, #11
 80031e2:	f000 fcb0 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	200e      	movs	r0, #14
 80031ec:	f000 fc8f 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80031f0:	200e      	movs	r0, #14
 80031f2:	f000 fca8 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	200f      	movs	r0, #15
 80031fc:	f000 fc87 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003200:	200f      	movs	r0, #15
 8003202:	f000 fca0 	bl	8003b46 <HAL_NVIC_EnableIRQ>

}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000

08003214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <MX_GPIO_Init+0xc4>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003234:	6153      	str	r3, [r2, #20]
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800324c:	6153      	str	r3, [r2, #20]
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <MX_GPIO_Init+0xc4>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003264:	6153      	str	r3, [r2, #20]
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327c:	6153      	str	r3, [r2, #20]
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <MX_GPIO_Init+0xc4>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800328a:	2200      	movs	r2, #0
 800328c:	2120      	movs	r1, #32
 800328e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003292:	f001 f827 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800329a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800329c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <MX_GPIO_Init+0xc8>)
 80032ae:	f000 fe8f 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80032b2:	2320      	movs	r3, #32
 80032b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032cc:	f000 fe80 	bl	8003fd0 <HAL_GPIO_Init>

}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000
 80032dc:	48000800 	.word	0x48000800

080032e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80032e4:	b672      	cpsid	i
}
 80032e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <Error_Handler+0x8>
	...

080032ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_MspInit+0x44>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_MspInit+0x44>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6193      	str	r3, [r2, #24]
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_MspInit+0x44>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_MspInit+0x44>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	4a08      	ldr	r2, [pc, #32]	; (8003330 <HAL_MspInit+0x44>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	61d3      	str	r3, [r2, #28]
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_MspInit+0x44>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003322:	2007      	movs	r0, #7
 8003324:	f000 fbe8 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a4b      	ldr	r2, [pc, #300]	; (8003470 <HAL_TIM_Base_MspInit+0x13c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 808f 	bne.w	8003466 <HAL_TIM_Base_MspInit+0x132>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003348:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_TIM_Base_MspInit+0x140>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	4a49      	ldr	r2, [pc, #292]	; (8003474 <HAL_TIM_Base_MspInit+0x140>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	61d3      	str	r3, [r2, #28]
 8003354:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_TIM_Base_MspInit+0x140>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8003360:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 8003362:	4a46      	ldr	r2, [pc, #280]	; (800347c <HAL_TIM_Base_MspInit+0x148>)
 8003364:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003366:	4b44      	ldr	r3, [pc, #272]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 8003368:	2210      	movs	r2, #16
 800336a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800336c:	4b42      	ldr	r3, [pc, #264]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003372:	4b41      	ldr	r3, [pc, #260]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 800337a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800337e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003380:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 8003382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003386:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8003388:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 800338a:	2220      	movs	r2, #32
 800338c:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 8003390:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003394:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003396:	4838      	ldr	r0, [pc, #224]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 8003398:	f000 fbef 	bl	8003b7a <HAL_DMA_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80033a2:	f7ff ff9d 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a33      	ldr	r2, [pc, #204]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24
 80033ac:	4a32      	ldr	r2, [pc, #200]	; (8003478 <HAL_TIM_Base_MspInit+0x144>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80033b2:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033b4:	4a33      	ldr	r2, [pc, #204]	; (8003484 <HAL_TIM_Base_MspInit+0x150>)
 80033b6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033ba:	2210      	movs	r2, #16
 80033bc:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033c6:	2280      	movs	r2, #128	; 0x80
 80033c8:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033d2:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d8:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033dc:	2220      	movs	r2, #32
 80033de:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80033e8:	4825      	ldr	r0, [pc, #148]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033ea:	f000 fbc6 	bl	8003b7a <HAL_DMA_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_TIM_Base_MspInit+0xc4>
    {
      Error_Handler();
 80033f4:	f7ff ff74 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_TIM_Base_MspInit+0x14c>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Channel5;
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <HAL_TIM_Base_MspInit+0x158>)
 8003408:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800340a:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 800340c:	2210      	movs	r2, #16
 800340e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 800341e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003422:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003424:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 8003426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800342a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 800342e:	2220      	movs	r2, #32
 8003430:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 8003434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003438:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800343a:	4813      	ldr	r0, [pc, #76]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 800343c:	f000 fb9d 	bl	8003b7a <HAL_DMA_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_TIM_Base_MspInit+0x116>
    {
      Error_Handler();
 8003446:	f7ff ff4b 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003450:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <HAL_TIM_Base_MspInit+0x154>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	201e      	movs	r0, #30
 800345c:	f000 fb57 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003460:	201e      	movs	r0, #30
 8003462:	f000 fb70 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40000800 	.word	0x40000800
 8003474:	40021000 	.word	0x40021000
 8003478:	200004fc 	.word	0x200004fc
 800347c:	40020008 	.word	0x40020008
 8003480:	20000540 	.word	0x20000540
 8003484:	40020044 	.word	0x40020044
 8003488:	20000584 	.word	0x20000584
 800348c:	40020058 	.word	0x40020058

08003490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a20      	ldr	r2, [pc, #128]	; (8003530 <HAL_TIM_MspPostInit+0xa0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d13a      	bne.n	8003528 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_TIM_MspPostInit+0xa4>)
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_TIM_MspPostInit+0xa4>)
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	6153      	str	r3, [r2, #20]
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_TIM_MspPostInit+0xa4>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_TIM_MspPostInit+0xa4>)
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_TIM_MspPostInit+0xa4>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d4:	6153      	str	r3, [r2, #20]
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_TIM_MspPostInit+0xa4>)
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80034e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80034f4:	230a      	movs	r3, #10
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003502:	f000 fd65 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800350a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003518:	2302      	movs	r3, #2
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	4619      	mov	r1, r3
 8003522:	4805      	ldr	r0, [pc, #20]	; (8003538 <HAL_TIM_MspPostInit+0xa8>)
 8003524:	f000 fd54 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003528:	bf00      	nop
 800352a:	3728      	adds	r7, #40	; 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40000800 	.word	0x40000800
 8003534:	40021000 	.word	0x40021000
 8003538:	48000400 	.word	0x48000400

0800353c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_UART_MspInit+0x8c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d130      	bne.n	80035c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_UART_MspInit+0x90>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <HAL_UART_MspInit+0x90>)
 8003564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003568:	61d3      	str	r3, [r2, #28]
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <HAL_UART_MspInit+0x90>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <HAL_UART_MspInit+0x90>)
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4a14      	ldr	r2, [pc, #80]	; (80035cc <HAL_UART_MspInit+0x90>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	6153      	str	r3, [r2, #20]
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_UART_MspInit+0x90>)
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800358e:	230c      	movs	r3, #12
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800359e:	2307      	movs	r3, #7
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ac:	f000 fd10 	bl	8003fd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	2026      	movs	r0, #38	; 0x26
 80035b6:	f000 faaa 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035ba:	2026      	movs	r0, #38	; 0x26
 80035bc:	f000 fac3 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035c0:	bf00      	nop
 80035c2:	3728      	adds	r7, #40	; 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40004400 	.word	0x40004400
 80035cc:	40021000 	.word	0x40021000

080035d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d4:	e7fe      	b.n	80035d4 <NMI_Handler+0x4>

080035d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035d6:	b480      	push	{r7}
 80035d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035da:	e7fe      	b.n	80035da <HardFault_Handler+0x4>

080035dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <MemManage_Handler+0x4>

080035e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <BusFault_Handler+0x4>

080035e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <UsageFault_Handler+0x4>

080035ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800361c:	f000 f97c 	bl	8003918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}

08003624 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <DMA1_Channel1_IRQHandler+0x10>)
 800362a:	f000 fbc3 	bl	8003db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200004fc 	.word	0x200004fc

08003638 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <DMA1_Channel4_IRQHandler+0x10>)
 800363e:	f000 fbb9 	bl	8003db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000540 	.word	0x20000540

0800364c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <DMA1_Channel5_IRQHandler+0x10>)
 8003652:	f000 fbaf 	bl	8003db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000584 	.word	0x20000584

08003660 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <TIM4_IRQHandler+0x10>)
 8003666:	f002 fdd9 	bl	800621c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200004b0 	.word	0x200004b0

08003674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003678:	4802      	ldr	r0, [pc, #8]	; (8003684 <USART2_IRQHandler+0x10>)
 800367a:	f003 fffb 	bl	8007674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200005c8 	.word	0x200005c8

08003688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
	return 1;
 800368c:	2301      	movs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <_kill>:

int _kill(int pid, int sig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036a2:	f005 f9d7 	bl	8008a54 <__errno>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2216      	movs	r2, #22
 80036aa:	601a      	str	r2, [r3, #0]
	return -1;
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <_exit>:

void _exit (int status)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036c0:	f04f 31ff 	mov.w	r1, #4294967295
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ffe7 	bl	8003698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036ca:	e7fe      	b.n	80036ca <_exit+0x12>

080036cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e00a      	b.n	80036f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036de:	f3af 8000 	nop.w
 80036e2:	4601      	mov	r1, r0
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	60ba      	str	r2, [r7, #8]
 80036ea:	b2ca      	uxtb	r2, r1
 80036ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3301      	adds	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	dbf0      	blt.n	80036de <_read+0x12>
	}

return len;
 80036fc:	687b      	ldr	r3, [r7, #4]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e009      	b.n	800372c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	60ba      	str	r2, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3301      	adds	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	dbf1      	blt.n	8003718 <_write+0x12>
	}
	return len;
 8003734:	687b      	ldr	r3, [r7, #4]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <_close>:

int _close(int file)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	return -1;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003766:	605a      	str	r2, [r3, #4]
	return 0;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_isatty>:

int _isatty(int file)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
	return 1;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	return 0;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <_sbrk+0x5c>)
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <_sbrk+0x60>)
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <_sbrk+0x64>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <_sbrk+0x64>)
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <_sbrk+0x68>)
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d207      	bcs.n	80037e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037d8:	f005 f93c 	bl	8008a54 <__errno>
 80037dc:	4603      	mov	r3, r0
 80037de:	220c      	movs	r2, #12
 80037e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	e009      	b.n	80037fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <_sbrk+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <_sbrk+0x64>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <_sbrk+0x64>)
 80037f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20010000 	.word	0x20010000
 8003808:	00000400 	.word	0x00000400
 800380c:	20008a00 	.word	0x20008a00
 8003810:	20008a18 	.word	0x20008a18

08003814 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <SystemInit+0x20>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <SystemInit+0x20>)
 8003820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003870 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <LoopForever+0x6>)
  ldr r1, =_edata
 800383e:	490e      	ldr	r1, [pc, #56]	; (8003878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003840:	4a0e      	ldr	r2, [pc, #56]	; (800387c <LoopForever+0xe>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003844:	e002      	b.n	800384c <LoopCopyDataInit>

08003846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384a:	3304      	adds	r3, #4

0800384c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800384c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003850:	d3f9      	bcc.n	8003846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003854:	4c0b      	ldr	r4, [pc, #44]	; (8003884 <LoopForever+0x16>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003858:	e001      	b.n	800385e <LoopFillZerobss>

0800385a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800385a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800385c:	3204      	adds	r2, #4

0800385e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003860:	d3fb      	bcc.n	800385a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003862:	f7ff ffd7 	bl	8003814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003866:	f005 f8fb 	bl	8008a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800386a:	f7ff fb69 	bl	8002f40 <main>

0800386e <LoopForever>:

LoopForever:
    b LoopForever
 800386e:	e7fe      	b.n	800386e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003870:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003878:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 800387c:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 8003880:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 8003884:	20008a18 	.word	0x20008a18

08003888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003888:	e7fe      	b.n	8003888 <ADC1_2_IRQHandler>
	...

0800388c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_Init+0x28>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <HAL_Init+0x28>)
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800389c:	2003      	movs	r0, #3
 800389e:	f000 f92b 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038a2:	2000      	movs	r0, #0
 80038a4:	f000 f808 	bl	80038b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a8:	f7ff fd20 	bl	80032ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40022000 	.word	0x40022000

080038b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_InitTick+0x54>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_InitTick+0x58>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f943 	bl	8003b62 <HAL_SYSTICK_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00e      	b.n	8003904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d80a      	bhi.n	8003902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038ec:	2200      	movs	r2, #0
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f000 f90b 	bl	8003b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038f8:	4a06      	ldr	r2, [pc, #24]	; (8003914 <HAL_InitTick+0x5c>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000424 	.word	0x20000424
 8003910:	2000042c 	.word	0x2000042c
 8003914:	20000428 	.word	0x20000428

08003918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x20>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x24>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_IncTick+0x24>)
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	2000042c 	.word	0x2000042c
 800393c:	20008a04 	.word	0x20008a04

08003940 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return uwTick;  
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_GetTick+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20008a04 	.word	0x20008a04

08003958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <__NVIC_GetPriorityGrouping+0x18>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 0307 	and.w	r3, r3, #7
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <__NVIC_EnableIRQ+0x38>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2001      	movs	r0, #1
 80039de:	fa00 f202 	lsl.w	r2, r0, r2
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	; (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff29 	bl	8003958 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff3e 	bl	80039a0 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff8e 	bl	8003a4c <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff31 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffa2 	bl	8003ab4 <SysTick_Config>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e037      	b.n	8003c00 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ba6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003baa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9b8 	bl	8003f58 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}  
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_DMA_Start_IT+0x20>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e04a      	b.n	8003cbe <HAL_DMA_Start_IT+0xb6>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d13a      	bne.n	8003cb0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f94b 	bl	8003efa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 020e 	orr.w	r2, r2, #14
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e00f      	b.n	8003c9e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 020a 	orr.w	r2, r2, #10
 8003c8c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0204 	bic.w	r2, r2, #4
 8003c9c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e005      	b.n	8003cbc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d008      	beq.n	8003cea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e020      	b.n	8003d2c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 020e 	bic.w	r2, r2, #14
 8003cf8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2101      	movs	r1, #1
 8003d14:	fa01 f202 	lsl.w	r2, r1, r2
 8003d18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d005      	beq.n	8003d5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2204      	movs	r2, #4
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e027      	b.n	8003daa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 020e 	bic.w	r2, r2, #14
 8003d68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2101      	movs	r1, #1
 8003d84:	fa01 f202 	lsl.w	r2, r1, r2
 8003d88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
    } 
  }
  return status;
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d024      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x72>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01f      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d107      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0204 	bic.w	r2, r2, #4
 8003e02:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e12:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d06a      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003e24:	e065      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02c      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xdc>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d027      	beq.n	8003e90 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 020a 	bic.w	r2, r2, #10
 8003e5c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	2102      	movs	r1, #2
 8003e70:	fa01 f202 	lsl.w	r2, r1, r2
 8003e74:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d035      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003e8e:	e030      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2208      	movs	r2, #8
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d028      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d023      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 020e 	bic.w	r2, r2, #14
 8003eb8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
    }
  }
}  
 8003ef0:	e7ff      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x13e>
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f202 	lsl.w	r2, r1, r2
 8003f16:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d108      	bne.n	8003f3a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f38:	e007      	b.n	8003f4a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	60da      	str	r2, [r3, #12]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <DMA_CalcBaseAndBitshift+0x60>)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d80f      	bhi.n	8003f8c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <DMA_CalcBaseAndBitshift+0x64>)
 8003f74:	4413      	add	r3, r2
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	009a      	lsls	r2, r3, #2
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <DMA_CalcBaseAndBitshift+0x6c>)
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003f8a:	e00e      	b.n	8003faa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x70>)
 8003f94:	4413      	add	r3, r2
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <DMA_CalcBaseAndBitshift+0x74>)
 8003fa8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40020407 	.word	0x40020407
 8003fbc:	bffdfff8 	.word	0xbffdfff8
 8003fc0:	cccccccd 	.word	0xcccccccd
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	bffdfbf8 	.word	0xbffdfbf8
 8003fcc:	40020400 	.word	0x40020400

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fde:	e160      	b.n	80042a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	4013      	ands	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8152 	beq.w	800429c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d005      	beq.n	8004010 <HAL_GPIO_Init+0x40>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d130      	bne.n	8004072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2203      	movs	r2, #3
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004046:	2201      	movs	r2, #1
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 0201 	and.w	r2, r3, #1
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b03      	cmp	r3, #3
 800407c:	d017      	beq.n	80040ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	2203      	movs	r2, #3
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d123      	bne.n	8004102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	08da      	lsrs	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3208      	adds	r2, #8
 80040c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	220f      	movs	r2, #15
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	08da      	lsrs	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3208      	adds	r2, #8
 80040fc:	6939      	ldr	r1, [r7, #16]
 80040fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	2203      	movs	r2, #3
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0203 	and.w	r2, r3, #3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80ac 	beq.w	800429c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004144:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <HAL_GPIO_Init+0x2f0>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	4a5d      	ldr	r2, [pc, #372]	; (80042c0 <HAL_GPIO_Init+0x2f0>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6193      	str	r3, [r2, #24]
 8004150:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <HAL_GPIO_Init+0x2f0>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800415c:	4a59      	ldr	r2, [pc, #356]	; (80042c4 <HAL_GPIO_Init+0x2f4>)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	3302      	adds	r3, #2
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	220f      	movs	r2, #15
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004186:	d025      	beq.n	80041d4 <HAL_GPIO_Init+0x204>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_GPIO_Init+0x2f8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d01f      	beq.n	80041d0 <HAL_GPIO_Init+0x200>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <HAL_GPIO_Init+0x2fc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d019      	beq.n	80041cc <HAL_GPIO_Init+0x1fc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_GPIO_Init+0x300>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_GPIO_Init+0x1f8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a4c      	ldr	r2, [pc, #304]	; (80042d4 <HAL_GPIO_Init+0x304>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00d      	beq.n	80041c4 <HAL_GPIO_Init+0x1f4>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a4b      	ldr	r2, [pc, #300]	; (80042d8 <HAL_GPIO_Init+0x308>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <HAL_GPIO_Init+0x1f0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <HAL_GPIO_Init+0x30c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d101      	bne.n	80041bc <HAL_GPIO_Init+0x1ec>
 80041b8:	2306      	movs	r3, #6
 80041ba:	e00c      	b.n	80041d6 <HAL_GPIO_Init+0x206>
 80041bc:	2307      	movs	r3, #7
 80041be:	e00a      	b.n	80041d6 <HAL_GPIO_Init+0x206>
 80041c0:	2305      	movs	r3, #5
 80041c2:	e008      	b.n	80041d6 <HAL_GPIO_Init+0x206>
 80041c4:	2304      	movs	r3, #4
 80041c6:	e006      	b.n	80041d6 <HAL_GPIO_Init+0x206>
 80041c8:	2303      	movs	r3, #3
 80041ca:	e004      	b.n	80041d6 <HAL_GPIO_Init+0x206>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e002      	b.n	80041d6 <HAL_GPIO_Init+0x206>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <HAL_GPIO_Init+0x206>
 80041d4:	2300      	movs	r3, #0
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	f002 0203 	and.w	r2, r2, #3
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	4093      	lsls	r3, r2
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041e6:	4937      	ldr	r1, [pc, #220]	; (80042c4 <HAL_GPIO_Init+0x2f4>)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	3302      	adds	r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_GPIO_Init+0x310>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004218:	4a31      	ldr	r2, [pc, #196]	; (80042e0 <HAL_GPIO_Init+0x310>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <HAL_GPIO_Init+0x310>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43db      	mvns	r3, r3
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004242:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <HAL_GPIO_Init+0x310>)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_GPIO_Init+0x310>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	43db      	mvns	r3, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_GPIO_Init+0x310>)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_GPIO_Init+0x310>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004296:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <HAL_GPIO_Init+0x310>)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3301      	adds	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f47f ae97 	bne.w	8003fe0 <HAL_GPIO_Init+0x10>
  }
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40010000 	.word	0x40010000
 80042c8:	48000400 	.word	0x48000400
 80042cc:	48000800 	.word	0x48000800
 80042d0:	48000c00 	.word	0x48000c00
 80042d4:	48001000 	.word	0x48001000
 80042d8:	48001400 	.word	0x48001400
 80042dc:	48001800 	.word	0x48001800
 80042e0:	40010400 	.word	0x40010400

080042e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f4:	787b      	ldrb	r3, [r7, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004300:	e002      	b.n	8004308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800431a:	af00      	add	r7, sp, #0
 800431c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004320:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004324:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f001 b83a 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 816f 	beq.w	800462e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004350:	4bb5      	ldr	r3, [pc, #724]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b04      	cmp	r3, #4
 800435a:	d00c      	beq.n	8004376 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800435c:	4bb2      	ldr	r3, [pc, #712]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b08      	cmp	r3, #8
 8004366:	d15c      	bne.n	8004422 <HAL_RCC_OscConfig+0x10e>
 8004368:	4baf      	ldr	r3, [pc, #700]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004374:	d155      	bne.n	8004422 <HAL_RCC_OscConfig+0x10e>
 8004376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800437a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800438a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d102      	bne.n	80043a8 <HAL_RCC_OscConfig+0x94>
 80043a2:	4ba1      	ldr	r3, [pc, #644]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	e015      	b.n	80043d4 <HAL_RCC_OscConfig+0xc0>
 80043a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80043b4:	fa93 f3a3 	rbit	r3, r3
 80043b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80043bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80043c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80043c8:	fa93 f3a3 	rbit	r3, r3
 80043cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043d0:	4b95      	ldr	r3, [pc, #596]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043d8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80043dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80043e0:	fa92 f2a2 	rbit	r2, r2
 80043e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80043e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80043ec:	fab2 f282 	clz	r2, r2
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	f042 0220 	orr.w	r2, r2, #32
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	f002 021f 	and.w	r2, r2, #31
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8111 	beq.w	800462c <HAL_RCC_OscConfig+0x318>
 800440a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800440e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 8108 	bne.w	800462c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f000 bfc6 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004426:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x12e>
 8004434:	4b7c      	ldr	r3, [pc, #496]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a7b      	ldr	r2, [pc, #492]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800443a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	e036      	b.n	80044b0 <HAL_RCC_OscConfig+0x19c>
 8004442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004446:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0x158>
 8004452:	4b75      	ldr	r3, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a74      	ldr	r2, [pc, #464]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b72      	ldr	r3, [pc, #456]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a71      	ldr	r2, [pc, #452]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e021      	b.n	80044b0 <HAL_RCC_OscConfig+0x19c>
 800446c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004470:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x184>
 800447e:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a69      	ldr	r2, [pc, #420]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b67      	ldr	r3, [pc, #412]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a66      	ldr	r2, [pc, #408]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0x19c>
 8004498:	4b63      	ldr	r3, [pc, #396]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a62      	ldr	r2, [pc, #392]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800449e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b60      	ldr	r3, [pc, #384]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a5f      	ldr	r2, [pc, #380]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 80044aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d059      	beq.n	8004574 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7ff fa3e 	bl	8003940 <HAL_GetTick>
 80044c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ca:	f7ff fa39 	bl	8003940 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d902      	bls.n	80044e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	f000 bf67 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
 80044e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80044ec:	fa93 f3a3 	rbit	r3, r3
 80044f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80044f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d102      	bne.n	8004512 <HAL_RCC_OscConfig+0x1fe>
 800450c:	4b46      	ldr	r3, [pc, #280]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	e015      	b.n	800453e <HAL_RCC_OscConfig+0x22a>
 8004512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004516:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800452a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800452e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800453a:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004542:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004546:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800454a:	fa92 f2a2 	rbit	r2, r2
 800454e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004552:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004556:	fab2 f282 	clz	r2, r2
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	f042 0220 	orr.w	r2, r2, #32
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	f002 021f 	and.w	r2, r2, #31
 8004566:	2101      	movs	r1, #1
 8004568:	fa01 f202 	lsl.w	r2, r1, r2
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0ab      	beq.n	80044ca <HAL_RCC_OscConfig+0x1b6>
 8004572:	e05c      	b.n	800462e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7ff f9e4 	bl	8003940 <HAL_GetTick>
 8004578:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457e:	f7ff f9df 	bl	8003940 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d902      	bls.n	8004594 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	f000 bf0d 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
 8004594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004598:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80045a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2b2>
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	e015      	b.n	80045f2 <HAL_RCC_OscConfig+0x2de>
 80045c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80045da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_RCC_OscConfig+0x314>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80045fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80045fe:	fa92 f2a2 	rbit	r2, r2
 8004602:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004606:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800460a:	fab2 f282 	clz	r2, r2
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f042 0220 	orr.w	r2, r2, #32
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f002 021f 	and.w	r2, r2, #31
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f202 	lsl.w	r2, r1, r2
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ab      	bne.n	800457e <HAL_RCC_OscConfig+0x26a>
 8004626:	e002      	b.n	800462e <HAL_RCC_OscConfig+0x31a>
 8004628:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 817f 	beq.w	8004942 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004644:	4ba7      	ldr	r3, [pc, #668]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00c      	beq.n	800466a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004650:	4ba4      	ldr	r3, [pc, #656]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d173      	bne.n	8004744 <HAL_RCC_OscConfig+0x430>
 800465c:	4ba1      	ldr	r3, [pc, #644]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004668:	d16c      	bne.n	8004744 <HAL_RCC_OscConfig+0x430>
 800466a:	2302      	movs	r3, #2
 800466c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800467c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004680:	fab3 f383 	clz	r3, r3
 8004684:	b2db      	uxtb	r3, r3
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d102      	bne.n	800469a <HAL_RCC_OscConfig+0x386>
 8004694:	4b93      	ldr	r3, [pc, #588]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	e013      	b.n	80046c2 <HAL_RCC_OscConfig+0x3ae>
 800469a:	2302      	movs	r3, #2
 800469c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80046a4:	fa93 f3a3 	rbit	r3, r3
 80046a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80046ac:	2302      	movs	r3, #2
 80046ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046be:	4b89      	ldr	r3, [pc, #548]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2202      	movs	r2, #2
 80046c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80046c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80046cc:	fa92 f2a2 	rbit	r2, r2
 80046d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80046d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046d8:	fab2 f282 	clz	r2, r2
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	f002 021f 	and.w	r2, r2, #31
 80046e8:	2101      	movs	r1, #1
 80046ea:	fa01 f202 	lsl.w	r2, r1, r2
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCC_OscConfig+0x3f6>
 80046f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d002      	beq.n	800470a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f000 be52 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b76      	ldr	r3, [pc, #472]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004716:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	21f8      	movs	r1, #248	; 0xf8
 8004720:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004728:	fa91 f1a1 	rbit	r1, r1
 800472c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004730:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004734:	fab1 f181 	clz	r1, r1
 8004738:	b2c9      	uxtb	r1, r1
 800473a:	408b      	lsls	r3, r1
 800473c:	4969      	ldr	r1, [pc, #420]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004742:	e0fe      	b.n	8004942 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8088 	beq.w	8004866 <HAL_RCC_OscConfig+0x552>
 8004756:	2301      	movs	r3, #1
 8004758:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004768:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004776:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	461a      	mov	r2, r3
 800477e:	2301      	movs	r3, #1
 8004780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7ff f8dd 	bl	8003940 <HAL_GetTick>
 8004786:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800478c:	f7ff f8d8 	bl	8003940 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d902      	bls.n	80047a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	f000 be06 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
 80047a2:	2302      	movs	r3, #2
 80047a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80047b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d102      	bne.n	80047d2 <HAL_RCC_OscConfig+0x4be>
 80047cc:	4b45      	ldr	r3, [pc, #276]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	e013      	b.n	80047fa <HAL_RCC_OscConfig+0x4e6>
 80047d2:	2302      	movs	r3, #2
 80047d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80047e4:	2302      	movs	r3, #2
 80047e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80047f6:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2202      	movs	r2, #2
 80047fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004800:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004804:	fa92 f2a2 	rbit	r2, r2
 8004808:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800480c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004810:	fab2 f282 	clz	r2, r2
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	f042 0220 	orr.w	r2, r2, #32
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	f002 021f 	and.w	r2, r2, #31
 8004820:	2101      	movs	r1, #1
 8004822:	fa01 f202 	lsl.w	r2, r1, r2
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0af      	beq.n	800478c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	21f8      	movs	r1, #248	; 0xf8
 8004842:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800484a:	fa91 f1a1 	rbit	r1, r1
 800484e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004852:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004856:	fab1 f181 	clz	r1, r1
 800485a:	b2c9      	uxtb	r1, r1
 800485c:	408b      	lsls	r3, r1
 800485e:	4921      	ldr	r1, [pc, #132]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
 8004864:	e06d      	b.n	8004942 <HAL_RCC_OscConfig+0x62e>
 8004866:	2301      	movs	r3, #1
 8004868:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004886:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	461a      	mov	r2, r3
 800488e:	2300      	movs	r3, #0
 8004890:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7ff f855 	bl	8003940 <HAL_GetTick>
 8004896:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489c:	f7ff f850 	bl	8003940 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d902      	bls.n	80048b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	f000 bd7e 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
 80048b2:	2302      	movs	r3, #2
 80048b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048bc:	fa93 f3a3 	rbit	r3, r3
 80048c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80048c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5d4>
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <HAL_RCC_OscConfig+0x5d0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	e016      	b.n	8004910 <HAL_RCC_OscConfig+0x5fc>
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	2302      	movs	r3, #2
 80048ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048fa:	2302      	movs	r3, #2
 80048fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004900:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004904:	fa93 f3a3 	rbit	r3, r3
 8004908:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800490c:	4bbf      	ldr	r3, [pc, #764]	; (8004c0c <HAL_RCC_OscConfig+0x8f8>)
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	2202      	movs	r2, #2
 8004912:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004916:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800491a:	fa92 f2a2 	rbit	r2, r2
 800491e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004922:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004926:	fab2 f282 	clz	r2, r2
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	f042 0220 	orr.w	r2, r2, #32
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	f002 021f 	and.w	r2, r2, #31
 8004936:	2101      	movs	r1, #1
 8004938:	fa01 f202 	lsl.w	r2, r1, r2
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ac      	bne.n	800489c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004946:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8113 	beq.w	8004b7e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800495c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d07c      	beq.n	8004a62 <HAL_RCC_OscConfig+0x74e>
 8004968:	2301      	movs	r3, #1
 800496a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800497a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	4ba2      	ldr	r3, [pc, #648]	; (8004c10 <HAL_RCC_OscConfig+0x8fc>)
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	461a      	mov	r2, r3
 800498e:	2301      	movs	r3, #1
 8004990:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004992:	f7fe ffd5 	bl	8003940 <HAL_GetTick>
 8004996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499c:	f7fe ffd0 	bl	8003940 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d902      	bls.n	80049b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	f000 bcfe 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
 80049b2:	2302      	movs	r3, #2
 80049b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049bc:	fa93 f2a3 	rbit	r2, r3
 80049c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d2:	2202      	movs	r2, #2
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	fa93 f2a3 	rbit	r2, r3
 80049e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049f6:	2202      	movs	r2, #2
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	fa93 f2a3 	rbit	r2, r3
 8004a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a12:	4b7e      	ldr	r3, [pc, #504]	; (8004c0c <HAL_RCC_OscConfig+0x8f8>)
 8004a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a1e:	2102      	movs	r1, #2
 8004a20:	6019      	str	r1, [r3, #0]
 8004a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	fa93 f1a3 	rbit	r1, r3
 8004a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a38:	6019      	str	r1, [r3, #0]
  return result;
 8004a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d09d      	beq.n	800499c <HAL_RCC_OscConfig+0x688>
 8004a60:	e08d      	b.n	8004b7e <HAL_RCC_OscConfig+0x86a>
 8004a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f2a3 	rbit	r2, r3
 8004a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a84:	601a      	str	r2, [r3, #0]
  return result;
 8004a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a8e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCC_OscConfig+0x8fc>)
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fe ff4c 	bl	8003940 <HAL_GetTick>
 8004aa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fe ff47 	bl	8003940 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d902      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	f000 bc75 	b.w	80053ae <HAL_RCC_OscConfig+0x109a>
 8004ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004acc:	2202      	movs	r2, #2
 8004ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	fa93 f2a3 	rbit	r2, r3
 8004ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004af0:	2202      	movs	r2, #2
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	fa93 f2a3 	rbit	r2, r3
 8004b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b14:	2202      	movs	r2, #2
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	fa93 f2a3 	rbit	r2, r3
 8004b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_RCC_OscConfig+0x8f8>)
 8004b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	6019      	str	r1, [r3, #0]
 8004b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	fa93 f1a3 	rbit	r1, r3
 8004b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b52:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004b56:	6019      	str	r1, [r3, #0]
  return result;
 8004b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d197      	bne.n	8004aae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 81a5 	beq.w	8004ede <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <HAL_RCC_OscConfig+0x8f8>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d116      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCC_OscConfig+0x8f8>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <HAL_RCC_OscConfig+0x8f8>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	61d3      	str	r3, [r2, #28]
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_RCC_OscConfig+0x8f8>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bcc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <HAL_RCC_OscConfig+0x900>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d121      	bne.n	8004c24 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_RCC_OscConfig+0x900>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <HAL_RCC_OscConfig+0x900>)
 8004be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bec:	f7fe fea8 	bl	8003940 <HAL_GetTick>
 8004bf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	e010      	b.n	8004c18 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7fe fea3 	bl	8003940 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d908      	bls.n	8004c18 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e3d1      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	10908120 	.word	0x10908120
 8004c14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b8d      	ldr	r3, [pc, #564]	; (8004e50 <HAL_RCC_OscConfig+0xb3c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0e8      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d106      	bne.n	8004c42 <HAL_RCC_OscConfig+0x92e>
 8004c34:	4b87      	ldr	r3, [pc, #540]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4a86      	ldr	r2, [pc, #536]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6213      	str	r3, [r2, #32]
 8004c40:	e035      	b.n	8004cae <HAL_RCC_OscConfig+0x99a>
 8004c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x958>
 8004c52:	4b80      	ldr	r3, [pc, #512]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	4a7f      	ldr	r2, [pc, #508]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	6213      	str	r3, [r2, #32]
 8004c5e:	4b7d      	ldr	r3, [pc, #500]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4a7c      	ldr	r2, [pc, #496]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6213      	str	r3, [r2, #32]
 8004c6a:	e020      	b.n	8004cae <HAL_RCC_OscConfig+0x99a>
 8004c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d10c      	bne.n	8004c96 <HAL_RCC_OscConfig+0x982>
 8004c7c:	4b75      	ldr	r3, [pc, #468]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	4a74      	ldr	r2, [pc, #464]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	6213      	str	r3, [r2, #32]
 8004c88:	4b72      	ldr	r3, [pc, #456]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	4a71      	ldr	r2, [pc, #452]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6213      	str	r3, [r2, #32]
 8004c94:	e00b      	b.n	8004cae <HAL_RCC_OscConfig+0x99a>
 8004c96:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	4a6e      	ldr	r2, [pc, #440]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	6213      	str	r3, [r2, #32]
 8004ca2:	4b6c      	ldr	r3, [pc, #432]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	4a6b      	ldr	r2, [pc, #428]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8081 	beq.w	8004dc2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc0:	f7fe fe3e 	bl	8003940 <HAL_GetTick>
 8004cc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc8:	e00b      	b.n	8004ce2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fe fe39 	bl	8003940 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e365      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
 8004ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004cea:	2202      	movs	r2, #2
 8004cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	fa93 f2a3 	rbit	r2, r3
 8004cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d0e:	2202      	movs	r2, #2
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	fa93 f2a3 	rbit	r2, r3
 8004d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d28:	601a      	str	r2, [r3, #0]
  return result;
 8004d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f043 0302 	orr.w	r3, r3, #2
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d102      	bne.n	8004d4e <HAL_RCC_OscConfig+0xa3a>
 8004d48:	4b42      	ldr	r3, [pc, #264]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	e013      	b.n	8004d76 <HAL_RCC_OscConfig+0xa62>
 8004d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d56:	2202      	movs	r2, #2
 8004d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	fa93 f2a3 	rbit	r2, r3
 8004d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	4b38      	ldr	r3, [pc, #224]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d7e:	2102      	movs	r1, #2
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	fa92 f1a2 	rbit	r1, r2
 8004d90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d94:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004d98:	6011      	str	r1, [r2, #0]
  return result;
 8004d9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d9e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	fab2 f282 	clz	r2, r2
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	f002 021f 	and.w	r2, r2, #31
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d084      	beq.n	8004cca <HAL_RCC_OscConfig+0x9b6>
 8004dc0:	e083      	b.n	8004eca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7fe fdbd 	bl	8003940 <HAL_GetTick>
 8004dc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dca:	e00b      	b.n	8004de4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dcc:	f7fe fdb8 	bl	8003940 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e2e4      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
 8004de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004de8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004dec:	2202      	movs	r2, #2
 8004dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	fa93 f2a3 	rbit	r2, r3
 8004dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e10:	2202      	movs	r2, #2
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	fa93 f2a3 	rbit	r2, r3
 8004e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e2a:	601a      	str	r2, [r3, #0]
  return result;
 8004e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f043 0302 	orr.w	r3, r3, #2
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d106      	bne.n	8004e58 <HAL_RCC_OscConfig+0xb44>
 8004e4a:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <HAL_RCC_OscConfig+0xb40>)
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	e017      	b.n	8004e80 <HAL_RCC_OscConfig+0xb6c>
 8004e50:	40007000 	.word	0x40007000
 8004e54:	40021000 	.word	0x40021000
 8004e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e60:	2202      	movs	r2, #2
 8004e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	fa93 f2a3 	rbit	r2, r3
 8004e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	4bb3      	ldr	r3, [pc, #716]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e88:	2102      	movs	r1, #2
 8004e8a:	6011      	str	r1, [r2, #0]
 8004e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	fa92 f1a2 	rbit	r1, r2
 8004e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004e9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004ea2:	6011      	str	r1, [r2, #0]
  return result;
 8004ea4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ea8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	fab2 f282 	clz	r2, r2
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	f002 021f 	and.w	r2, r2, #31
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d180      	bne.n	8004dcc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d105      	bne.n	8004ede <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed2:	4b9e      	ldr	r3, [pc, #632]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4a9d      	ldr	r2, [pc, #628]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8004ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004edc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 825e 	beq.w	80053ac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef0:	4b96      	ldr	r3, [pc, #600]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	f000 821f 	beq.w	800533c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	f040 8170 	bne.w	80051f0 <HAL_RCC_OscConfig+0xedc>
 8004f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	fa93 f2a3 	rbit	r2, r3
 8004f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f34:	601a      	str	r2, [r3, #0]
  return result;
 8004f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	fab3 f383 	clz	r3, r3
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	461a      	mov	r2, r3
 8004f52:	2300      	movs	r3, #0
 8004f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7fe fcf3 	bl	8003940 <HAL_GetTick>
 8004f5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5e:	e009      	b.n	8004f74 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fcee 	bl	8003940 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e21c      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
 8004f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	fa93 f2a3 	rbit	r2, r3
 8004f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004f98:	601a      	str	r2, [r3, #0]
  return result;
 8004f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa4:	fab3 f383 	clz	r3, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d102      	bne.n	8004fbe <HAL_RCC_OscConfig+0xcaa>
 8004fb8:	4b64      	ldr	r3, [pc, #400]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	e027      	b.n	800500e <HAL_RCC_OscConfig+0xcfa>
 8004fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	fa93 f2a3 	rbit	r2, r3
 8004fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fe8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ff6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	fa93 f2a3 	rbit	r2, r3
 8005000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005004:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	4b50      	ldr	r3, [pc, #320]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005012:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005016:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800501a:	6011      	str	r1, [r2, #0]
 800501c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005020:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	fa92 f1a2 	rbit	r1, r2
 800502a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800502e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005032:	6011      	str	r1, [r2, #0]
  return result;
 8005034:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005038:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	fab2 f282 	clz	r2, r2
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	f042 0220 	orr.w	r2, r2, #32
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	f002 021f 	and.w	r2, r2, #31
 800504e:	2101      	movs	r1, #1
 8005050:	fa01 f202 	lsl.w	r2, r1, r2
 8005054:	4013      	ands	r3, r2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d182      	bne.n	8004f60 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800505a:	4b3c      	ldr	r3, [pc, #240]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f023 020f 	bic.w	r2, r3, #15
 8005062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005066:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	4937      	ldr	r1, [pc, #220]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8005070:	4313      	orrs	r3, r2
 8005072:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005074:	4b35      	ldr	r3, [pc, #212]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800507c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a19      	ldr	r1, [r3, #32]
 8005088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800508c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	430b      	orrs	r3, r1
 8005096:	492d      	ldr	r1, [pc, #180]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
 800509c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	fa93 f2a3 	rbit	r2, r3
 80050b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050c0:	601a      	str	r2, [r3, #0]
  return result;
 80050c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	461a      	mov	r2, r3
 80050de:	2301      	movs	r3, #1
 80050e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fe fc2d 	bl	8003940 <HAL_GetTick>
 80050e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ea:	e009      	b.n	8005100 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe fc28 	bl	8003940 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e156      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
 8005100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005104:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800510c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005112:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	fa93 f2a3 	rbit	r2, r3
 800511c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005120:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005124:	601a      	str	r2, [r3, #0]
  return result;
 8005126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800512a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800512e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005130:	fab3 f383 	clz	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d105      	bne.n	8005150 <HAL_RCC_OscConfig+0xe3c>
 8005144:	4b01      	ldr	r3, [pc, #4]	; (800514c <HAL_RCC_OscConfig+0xe38>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	e02a      	b.n	80051a0 <HAL_RCC_OscConfig+0xe8c>
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005154:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800515c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005162:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	fa93 f2a3 	rbit	r2, r3
 800516c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005170:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800517a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800517e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005188:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	fa93 f2a3 	rbit	r2, r3
 8005192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005196:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	4b86      	ldr	r3, [pc, #536]	; (80053b8 <HAL_RCC_OscConfig+0x10a4>)
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051ac:	6011      	str	r1, [r2, #0]
 80051ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	fa92 f1a2 	rbit	r1, r2
 80051bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051c0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80051c4:	6011      	str	r1, [r2, #0]
  return result;
 80051c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051ca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	fab2 f282 	clz	r2, r2
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	f042 0220 	orr.w	r2, r2, #32
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	f002 021f 	and.w	r2, r2, #31
 80051e0:	2101      	movs	r1, #1
 80051e2:	fa01 f202 	lsl.w	r2, r1, r2
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f43f af7f 	beq.w	80050ec <HAL_RCC_OscConfig+0xdd8>
 80051ee:	e0dd      	b.n	80053ac <HAL_RCC_OscConfig+0x1098>
 80051f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005202:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	fa93 f2a3 	rbit	r2, r3
 800520c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005210:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005214:	601a      	str	r2, [r3, #0]
  return result;
 8005216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800521a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800521e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005220:	fab3 f383 	clz	r3, r3
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800522a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	461a      	mov	r2, r3
 8005232:	2300      	movs	r3, #0
 8005234:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7fe fb83 	bl	8003940 <HAL_GetTick>
 800523a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523e:	e009      	b.n	8005254 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005240:	f7fe fb7e 	bl	8003940 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e0ac      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
 8005254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005258:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800525c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005266:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	fa93 f2a3 	rbit	r2, r3
 8005270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005274:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005278:	601a      	str	r2, [r3, #0]
  return result;
 800527a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800527e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d102      	bne.n	800529e <HAL_RCC_OscConfig+0xf8a>
 8005298:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_OscConfig+0x10a4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	e027      	b.n	80052ee <HAL_RCC_OscConfig+0xfda>
 800529e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80052a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	fa93 f2a3 	rbit	r2, r3
 80052ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	fa93 f2a3 	rbit	r2, r3
 80052e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	4b33      	ldr	r3, [pc, #204]	; (80053b8 <HAL_RCC_OscConfig+0x10a4>)
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80052f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052fa:	6011      	str	r1, [r2, #0]
 80052fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005300:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	fa92 f1a2 	rbit	r1, r2
 800530a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800530e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005312:	6011      	str	r1, [r2, #0]
  return result;
 8005314:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005318:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	fab2 f282 	clz	r2, r2
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	f042 0220 	orr.w	r2, r2, #32
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	f002 021f 	and.w	r2, r2, #31
 800532e:	2101      	movs	r1, #1
 8005330:	fa01 f202 	lsl.w	r2, r1, r2
 8005334:	4013      	ands	r3, r2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d182      	bne.n	8005240 <HAL_RCC_OscConfig+0xf2c>
 800533a:	e037      	b.n	80053ac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800533c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e02e      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_OscConfig+0x10a4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005358:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <HAL_RCC_OscConfig+0x10a4>)
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005360:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005364:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800536c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	429a      	cmp	r2, r3
 8005376:	d117      	bne.n	80053a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800537c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005384:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800538c:	429a      	cmp	r2, r3
 800538e:	d10b      	bne.n	80053a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800539c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000

080053bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b09e      	sub	sp, #120	; 0x78
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e162      	b.n	800569a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053d4:	4b90      	ldr	r3, [pc, #576]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d910      	bls.n	8005404 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b8d      	ldr	r3, [pc, #564]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 0207 	bic.w	r2, r3, #7
 80053ea:	498b      	ldr	r1, [pc, #556]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	4b89      	ldr	r3, [pc, #548]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e14a      	b.n	800569a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005410:	4b82      	ldr	r3, [pc, #520]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	497f      	ldr	r1, [pc, #508]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 800541e:	4313      	orrs	r3, r2
 8005420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80dc 	beq.w	80055e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d13c      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xf6>
 8005438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800543c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005440:	fa93 f3a3 	rbit	r3, r3
 8005444:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005448:	fab3 f383 	clz	r3, r3
 800544c:	b2db      	uxtb	r3, r3
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d102      	bne.n	8005462 <HAL_RCC_ClockConfig+0xa6>
 800545c:	4b6f      	ldr	r3, [pc, #444]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	e00f      	b.n	8005482 <HAL_RCC_ClockConfig+0xc6>
 8005462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	667b      	str	r3, [r7, #100]	; 0x64
 8005470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005474:	663b      	str	r3, [r7, #96]	; 0x60
 8005476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005478:	fa93 f3a3 	rbit	r3, r3
 800547c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800547e:	4b67      	ldr	r3, [pc, #412]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005486:	65ba      	str	r2, [r7, #88]	; 0x58
 8005488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800548a:	fa92 f2a2 	rbit	r2, r2
 800548e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005492:	fab2 f282 	clz	r2, r2
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	f042 0220 	orr.w	r2, r2, #32
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f002 021f 	and.w	r2, r2, #31
 80054a2:	2101      	movs	r1, #1
 80054a4:	fa01 f202 	lsl.w	r2, r1, r2
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d17b      	bne.n	80055a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0f3      	b.n	800569a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d13c      	bne.n	8005534 <HAL_RCC_ClockConfig+0x178>
 80054ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ca:	fab3 f383 	clz	r3, r3
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d102      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x128>
 80054de:	4b4f      	ldr	r3, [pc, #316]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	e00f      	b.n	8005504 <HAL_RCC_ClockConfig+0x148>
 80054e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ec:	fa93 f3a3 	rbit	r3, r3
 80054f0:	647b      	str	r3, [r7, #68]	; 0x44
 80054f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054f6:	643b      	str	r3, [r7, #64]	; 0x40
 80054f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005500:	4b46      	ldr	r3, [pc, #280]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005508:	63ba      	str	r2, [r7, #56]	; 0x38
 800550a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800550c:	fa92 f2a2 	rbit	r2, r2
 8005510:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005514:	fab2 f282 	clz	r2, r2
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	f042 0220 	orr.w	r2, r2, #32
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	f002 021f 	and.w	r2, r2, #31
 8005524:	2101      	movs	r1, #1
 8005526:	fa01 f202 	lsl.w	r2, r1, r2
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d13a      	bne.n	80055a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0b2      	b.n	800569a <HAL_RCC_ClockConfig+0x2de>
 8005534:	2302      	movs	r3, #2
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005542:	fab3 f383 	clz	r3, r3
 8005546:	b2db      	uxtb	r3, r3
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d102      	bne.n	800555c <HAL_RCC_ClockConfig+0x1a0>
 8005556:	4b31      	ldr	r3, [pc, #196]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	e00d      	b.n	8005578 <HAL_RCC_ClockConfig+0x1bc>
 800555c:	2302      	movs	r3, #2
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	fa93 f3a3 	rbit	r3, r3
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
 8005568:	2302      	movs	r3, #2
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	fa93 f3a3 	rbit	r3, r3
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	4b29      	ldr	r3, [pc, #164]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2202      	movs	r2, #2
 800557a:	61ba      	str	r2, [r7, #24]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	fa92 f2a2 	rbit	r2, r2
 8005582:	617a      	str	r2, [r7, #20]
  return result;
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	fab2 f282 	clz	r2, r2
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	f042 0220 	orr.w	r2, r2, #32
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	f002 021f 	and.w	r2, r2, #31
 8005596:	2101      	movs	r1, #1
 8005598:	fa01 f202 	lsl.w	r2, r1, r2
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e079      	b.n	800569a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f023 0203 	bic.w	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	491a      	ldr	r1, [pc, #104]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055b8:	f7fe f9c2 	bl	8003940 <HAL_GetTick>
 80055bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c0:	f7fe f9be 	bl	8003940 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e061      	b.n	800569a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <HAL_RCC_ClockConfig+0x260>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 020c 	and.w	r2, r3, #12
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d1eb      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d214      	bcs.n	8005620 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	4906      	ldr	r1, [pc, #24]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <HAL_RCC_ClockConfig+0x25c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e040      	b.n	800569a <HAL_RCC_ClockConfig+0x2de>
 8005618:	40022000 	.word	0x40022000
 800561c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800562c:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <HAL_RCC_ClockConfig+0x2e8>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	491a      	ldr	r1, [pc, #104]	; (80056a4 <HAL_RCC_ClockConfig+0x2e8>)
 800563a:	4313      	orrs	r3, r2
 800563c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800564a:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <HAL_RCC_ClockConfig+0x2e8>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4912      	ldr	r1, [pc, #72]	; (80056a4 <HAL_RCC_ClockConfig+0x2e8>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800565e:	f000 f829 	bl	80056b4 <HAL_RCC_GetSysClockFreq>
 8005662:	4601      	mov	r1, r0
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <HAL_RCC_ClockConfig+0x2e8>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566c:	22f0      	movs	r2, #240	; 0xf0
 800566e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	fa92 f2a2 	rbit	r2, r2
 8005676:	60fa      	str	r2, [r7, #12]
  return result;
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	fab2 f282 	clz	r2, r2
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	40d3      	lsrs	r3, r2
 8005682:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <HAL_RCC_ClockConfig+0x2ec>)
 8005684:	5cd3      	ldrb	r3, [r2, r3]
 8005686:	fa21 f303 	lsr.w	r3, r1, r3
 800568a:	4a08      	ldr	r2, [pc, #32]	; (80056ac <HAL_RCC_ClockConfig+0x2f0>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800568e:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <HAL_RCC_ClockConfig+0x2f4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe f910 	bl	80038b8 <HAL_InitTick>
  
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3778      	adds	r7, #120	; 0x78
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	0800ba18 	.word	0x0800ba18
 80056ac:	20000424 	.word	0x20000424
 80056b0:	20000428 	.word	0x20000428

080056b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b08b      	sub	sp, #44	; 0x2c
 80056b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80056ce:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d002      	beq.n	80056e4 <HAL_RCC_GetSysClockFreq+0x30>
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d003      	beq.n	80056ea <HAL_RCC_GetSysClockFreq+0x36>
 80056e2:	e03f      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <HAL_RCC_GetSysClockFreq+0xc8>)
 80056e6:	623b      	str	r3, [r7, #32]
      break;
 80056e8:	e03f      	b.n	800576a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80056f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80056f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	fa92 f2a2 	rbit	r2, r2
 80056fc:	607a      	str	r2, [r7, #4]
  return result;
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	fab2 f282 	clz	r2, r2
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	40d3      	lsrs	r3, r2
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_RCC_GetSysClockFreq+0xcc>)
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800570e:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	220f      	movs	r2, #15
 8005718:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	fa92 f2a2 	rbit	r2, r2
 8005720:	60fa      	str	r2, [r7, #12]
  return result;
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	fab2 f282 	clz	r2, r2
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	40d3      	lsrs	r3, r2
 800572c:	4a15      	ldr	r2, [pc, #84]	; (8005784 <HAL_RCC_GetSysClockFreq+0xd0>)
 800572e:	5cd3      	ldrb	r3, [r2, r3]
 8005730:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800573c:	4a0f      	ldr	r2, [pc, #60]	; (800577c <HAL_RCC_GetSysClockFreq+0xc8>)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	fbb2 f2f3 	udiv	r2, r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
 800574c:	e007      	b.n	800575e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800574e:	4a0b      	ldr	r2, [pc, #44]	; (800577c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	fbb2 f2f3 	udiv	r2, r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	623b      	str	r3, [r7, #32]
      break;
 8005762:	e002      	b.n	800576a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005766:	623b      	str	r3, [r7, #32]
      break;
 8005768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800576a:	6a3b      	ldr	r3, [r7, #32]
}
 800576c:	4618      	mov	r0, r3
 800576e:	372c      	adds	r7, #44	; 0x2c
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40021000 	.word	0x40021000
 800577c:	007a1200 	.word	0x007a1200
 8005780:	0800ba30 	.word	0x0800ba30
 8005784:	0800ba40 	.word	0x0800ba40

08005788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_RCC_GetHCLKFreq+0x14>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000424 	.word	0x20000424

080057a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057a6:	f7ff ffef 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057aa:	4601      	mov	r1, r0
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	fa92 f2a2 	rbit	r2, r2
 80057c0:	603a      	str	r2, [r7, #0]
  return result;
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	fab2 f282 	clz	r2, r2
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	40d3      	lsrs	r3, r2
 80057cc:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80057ce:	5cd3      	ldrb	r3, [r2, r3]
 80057d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40021000 	.word	0x40021000
 80057e0:	0800ba28 	.word	0x0800ba28

080057e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80057ea:	f7ff ffcd 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057ee:	4601      	mov	r1, r0
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80057f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80057fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	fa92 f2a2 	rbit	r2, r2
 8005804:	603a      	str	r2, [r7, #0]
  return result;
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	fab2 f282 	clz	r2, r2
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	40d3      	lsrs	r3, r2
 8005810:	4a04      	ldr	r2, [pc, #16]	; (8005824 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005812:	5cd3      	ldrb	r3, [r2, r3]
 8005814:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40021000 	.word	0x40021000
 8005824:	0800ba28 	.word	0x0800ba28

08005828 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b092      	sub	sp, #72	; 0x48
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80d4 	beq.w	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800584c:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10e      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005858:	4b4b      	ldr	r3, [pc, #300]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	4a4a      	ldr	r2, [pc, #296]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005862:	61d3      	str	r3, [r2, #28]
 8005864:	4b48      	ldr	r3, [pc, #288]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005876:	4b45      	ldr	r3, [pc, #276]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d118      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005882:	4b42      	ldr	r3, [pc, #264]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a41      	ldr	r2, [pc, #260]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800588e:	f7fe f857 	bl	8003940 <HAL_GetTick>
 8005892:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005894:	e008      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005896:	f7fe f853 	bl	8003940 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b64      	cmp	r3, #100	; 0x64
 80058a2:	d901      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e1d6      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	4b38      	ldr	r3, [pc, #224]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058b4:	4b34      	ldr	r3, [pc, #208]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8084 	beq.w	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d07c      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058d4:	4b2c      	ldr	r3, [pc, #176]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	fa93 f3a3 	rbit	r3, r3
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058ee:	fab3 f383 	clz	r3, r3
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	461a      	mov	r2, r3
 80058fe:	2301      	movs	r3, #1
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	fa93 f3a3 	rbit	r3, r3
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005912:	fab3 f383 	clz	r3, r3
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	461a      	mov	r2, r3
 8005922:	2300      	movs	r3, #0
 8005924:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005926:	4a18      	ldr	r2, [pc, #96]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d04b      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005936:	f7fe f803 	bl	8003940 <HAL_GetTick>
 800593a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593c:	e00a      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fd ffff 	bl	8003940 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e180      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005954:	2302      	movs	r3, #2
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	fa93 f3a3 	rbit	r3, r3
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
 8005960:	2302      	movs	r3, #2
 8005962:	623b      	str	r3, [r7, #32]
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	fa93 f3a3 	rbit	r3, r3
 800596a:	61fb      	str	r3, [r7, #28]
  return result;
 800596c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d108      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005982:	4b01      	ldr	r3, [pc, #4]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	e00d      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005988:	40021000 	.word	0x40021000
 800598c:	40007000 	.word	0x40007000
 8005990:	10908100 	.word	0x10908100
 8005994:	2302      	movs	r3, #2
 8005996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	fa93 f3a3 	rbit	r3, r3
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	4b9a      	ldr	r3, [pc, #616]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2202      	movs	r2, #2
 80059a6:	613a      	str	r2, [r7, #16]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	fa92 f2a2 	rbit	r2, r2
 80059ae:	60fa      	str	r2, [r7, #12]
  return result;
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	fab2 f282 	clz	r2, r2
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	f002 021f 	and.w	r2, r2, #31
 80059c2:	2101      	movs	r1, #1
 80059c4:	fa01 f202 	lsl.w	r2, r1, r2
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0b7      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80059ce:	4b8f      	ldr	r3, [pc, #572]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	498c      	ldr	r1, [pc, #560]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d105      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e8:	4b88      	ldr	r3, [pc, #544]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	4a87      	ldr	r2, [pc, #540]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a00:	4b82      	ldr	r3, [pc, #520]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	f023 0203 	bic.w	r2, r3, #3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	497f      	ldr	r1, [pc, #508]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a1e:	4b7b      	ldr	r3, [pc, #492]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4978      	ldr	r1, [pc, #480]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a3c:	4b73      	ldr	r3, [pc, #460]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	4970      	ldr	r1, [pc, #448]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a5a:	4b6c      	ldr	r3, [pc, #432]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	f023 0210 	bic.w	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	4969      	ldr	r1, [pc, #420]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a78:	4b64      	ldr	r3, [pc, #400]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	4961      	ldr	r1, [pc, #388]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d008      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a96:	4b5d      	ldr	r3, [pc, #372]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f023 0220 	bic.w	r2, r3, #32
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	495a      	ldr	r1, [pc, #360]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ab4:	4b55      	ldr	r3, [pc, #340]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	4952      	ldr	r1, [pc, #328]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ad2:	4b4e      	ldr	r3, [pc, #312]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	494b      	ldr	r1, [pc, #300]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005af0:	4b46      	ldr	r3, [pc, #280]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	4943      	ldr	r1, [pc, #268]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b0e:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	493c      	ldr	r1, [pc, #240]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b2c:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	4934      	ldr	r1, [pc, #208]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b4a:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	492d      	ldr	r1, [pc, #180]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b68:	4b28      	ldr	r3, [pc, #160]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	4925      	ldr	r1, [pc, #148]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d008      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b86:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	491e      	ldr	r1, [pc, #120]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005ba4:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	4916      	ldr	r1, [pc, #88]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d008      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	490f      	ldr	r1, [pc, #60]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bec:	4907      	ldr	r1, [pc, #28]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00c      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005bfe:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	e002      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c12:	4913      	ldr	r1, [pc, #76]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c30:	490b      	ldr	r1, [pc, #44]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005c42:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4e:	4904      	ldr	r1, [pc, #16]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3748      	adds	r7, #72	; 0x48
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000

08005c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e049      	b.n	8005d0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fd fb52 	bl	8003334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f000 fece 	bl	8006a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e049      	b.n	8005db8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f841 	bl	8005dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 fe77 	bl	8006a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e03c      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d109      	bne.n	8005e1a <HAL_TIM_PWM_Start_DMA+0x46>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e02f      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start_DMA+0x60>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	bf0c      	ite	eq
 8005e2c:	2301      	moveq	r3, #1
 8005e2e:	2300      	movne	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e022      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d109      	bne.n	8005e4e <HAL_TIM_PWM_Start_DMA+0x7a>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e015      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d109      	bne.n	8005e68 <HAL_TIM_PWM_Start_DMA+0x94>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e008      	b.n	8005e7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	bf0c      	ite	eq
 8005e74:	2301      	moveq	r3, #1
 8005e76:	2300      	movne	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e1b0      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e03c      	b.n	8005f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d109      	bne.n	8005eb6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e02f      	b.n	8005f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d109      	bne.n	8005ed0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e022      	b.n	8005f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d109      	bne.n	8005eea <HAL_TIM_PWM_Start_DMA+0x116>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	bf0c      	ite	eq
 8005ee2:	2301      	moveq	r3, #1
 8005ee4:	2300      	movne	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e015      	b.n	8005f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d109      	bne.n	8005f04 <HAL_TIM_PWM_Start_DMA+0x130>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	e008      	b.n	8005f16 <HAL_TIM_PWM_Start_DMA+0x142>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d034      	beq.n	8005f84 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_PWM_Start_DMA+0x156>
 8005f20:	887b      	ldrh	r3, [r7, #2]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e15c      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIM_PWM_Start_DMA+0x166>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f38:	e026      	b.n	8005f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_Start_DMA+0x176>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f48:	e01e      	b.n	8005f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x186>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f58:	e016      	b.n	8005f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b0c      	cmp	r3, #12
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x196>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f68:	e00e      	b.n	8005f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f78:	e006      	b.n	8005f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f82:	e001      	b.n	8005f88 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e12d      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	f200 80ae 	bhi.w	80060ec <HAL_TIM_PWM_Start_DMA+0x318>
 8005f90:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	080060ed 	.word	0x080060ed
 8005fa0:	080060ed 	.word	0x080060ed
 8005fa4:	080060ed 	.word	0x080060ed
 8005fa8:	08006015 	.word	0x08006015
 8005fac:	080060ed 	.word	0x080060ed
 8005fb0:	080060ed 	.word	0x080060ed
 8005fb4:	080060ed 	.word	0x080060ed
 8005fb8:	0800605d 	.word	0x0800605d
 8005fbc:	080060ed 	.word	0x080060ed
 8005fc0:	080060ed 	.word	0x080060ed
 8005fc4:	080060ed 	.word	0x080060ed
 8005fc8:	080060a5 	.word	0x080060a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	4a86      	ldr	r2, [pc, #536]	; (80061ec <HAL_TIM_PWM_Start_DMA+0x418>)
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	4a85      	ldr	r2, [pc, #532]	; (80061f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	4a84      	ldr	r2, [pc, #528]	; (80061f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3334      	adds	r3, #52	; 0x34
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	887b      	ldrh	r3, [r7, #2]
 8005ff4:	f7fd fe08 	bl	8003c08 <HAL_DMA_Start_IT>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0f0      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006010:	60da      	str	r2, [r3, #12]
      break;
 8006012:	e06e      	b.n	80060f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	4a74      	ldr	r2, [pc, #464]	; (80061ec <HAL_TIM_PWM_Start_DMA+0x418>)
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	4a73      	ldr	r2, [pc, #460]	; (80061f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	4a72      	ldr	r2, [pc, #456]	; (80061f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 800602a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3338      	adds	r3, #56	; 0x38
 8006038:	461a      	mov	r2, r3
 800603a:	887b      	ldrh	r3, [r7, #2]
 800603c:	f7fd fde4 	bl	8003c08 <HAL_DMA_Start_IT>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0cc      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006058:	60da      	str	r2, [r3, #12]
      break;
 800605a:	e04a      	b.n	80060f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	4a62      	ldr	r2, [pc, #392]	; (80061ec <HAL_TIM_PWM_Start_DMA+0x418>)
 8006062:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	4a61      	ldr	r2, [pc, #388]	; (80061f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	4a60      	ldr	r2, [pc, #384]	; (80061f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006072:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	333c      	adds	r3, #60	; 0x3c
 8006080:	461a      	mov	r2, r3
 8006082:	887b      	ldrh	r3, [r7, #2]
 8006084:	f7fd fdc0 	bl	8003c08 <HAL_DMA_Start_IT>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0a8      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a0:	60da      	str	r2, [r3, #12]
      break;
 80060a2:	e026      	b.n	80060f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	4a50      	ldr	r2, [pc, #320]	; (80061ec <HAL_TIM_PWM_Start_DMA+0x418>)
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	4a4f      	ldr	r2, [pc, #316]	; (80061f0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	4a4e      	ldr	r2, [pc, #312]	; (80061f4 <HAL_TIM_PWM_Start_DMA+0x420>)
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3340      	adds	r3, #64	; 0x40
 80060c8:	461a      	mov	r2, r3
 80060ca:	887b      	ldrh	r3, [r7, #2]
 80060cc:	f7fd fd9c 	bl	8003c08 <HAL_DMA_Start_IT>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e084      	b.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060e8:	60da      	str	r2, [r3, #12]
      break;
 80060ea:	e002      	b.n	80060f2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
      break;
 80060f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d174      	bne.n	80061e2 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2201      	movs	r2, #1
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	4618      	mov	r0, r3
 8006102:	f001 f8dd 	bl	80072c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3b      	ldr	r2, [pc, #236]	; (80061f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a39      	ldr	r2, [pc, #228]	; (80061fc <HAL_TIM_PWM_Start_DMA+0x428>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_TIM_PWM_Start_DMA+0x36e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a38      	ldr	r2, [pc, #224]	; (8006200 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a36      	ldr	r2, [pc, #216]	; (8006204 <HAL_TIM_PWM_Start_DMA+0x430>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_TIM_PWM_Start_DMA+0x36e>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a35      	ldr	r2, [pc, #212]	; (8006208 <HAL_TIM_PWM_Start_DMA+0x434>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a33      	ldr	r2, [pc, #204]	; (800620c <HAL_TIM_PWM_Start_DMA+0x438>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_Start_DMA+0x372>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <HAL_TIM_PWM_Start_DMA+0x374>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800615a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a25      	ldr	r2, [pc, #148]	; (80061f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01d      	beq.n	80061a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d018      	beq.n	80061a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a26      	ldr	r2, [pc, #152]	; (8006210 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a25      	ldr	r2, [pc, #148]	; (8006214 <HAL_TIM_PWM_Start_DMA+0x440>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00e      	beq.n	80061a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_TIM_PWM_Start_DMA+0x428>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d004      	beq.n	80061a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1b      	ldr	r2, [pc, #108]	; (800620c <HAL_TIM_PWM_Start_DMA+0x438>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d115      	bne.n	80061ce <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <HAL_TIM_PWM_Start_DMA+0x444>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	d015      	beq.n	80061e0 <HAL_TIM_PWM_Start_DMA+0x40c>
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ba:	d011      	beq.n	80061e0 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061cc:	e008      	b.n	80061e0 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e000      	b.n	80061e2 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	08006935 	.word	0x08006935
 80061f0:	080069dd 	.word	0x080069dd
 80061f4:	080068a3 	.word	0x080068a3
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800
 800620c:	40015000 	.word	0x40015000
 8006210:	40000400 	.word	0x40000400
 8006214:	40000800 	.word	0x40000800
 8006218:	00010007 	.word	0x00010007

0800621c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d122      	bne.n	8006278 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b02      	cmp	r3, #2
 800623e:	d11b      	bne.n	8006278 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0202 	mvn.w	r2, #2
 8006248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 faed 	bl	800683e <HAL_TIM_IC_CaptureCallback>
 8006264:	e005      	b.n	8006272 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fadf 	bl	800682a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 faf0 	bl	8006852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d122      	bne.n	80062cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b04      	cmp	r3, #4
 8006292:	d11b      	bne.n	80062cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0204 	mvn.w	r2, #4
 800629c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fac3 	bl	800683e <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fab5 	bl	800682a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fac6 	bl	8006852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d122      	bne.n	8006320 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d11b      	bne.n	8006320 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0208 	mvn.w	r2, #8
 80062f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2204      	movs	r2, #4
 80062f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa99 	bl	800683e <HAL_TIM_IC_CaptureCallback>
 800630c:	e005      	b.n	800631a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa8b 	bl	800682a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fa9c 	bl	8006852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0310 	and.w	r3, r3, #16
 800632a:	2b10      	cmp	r3, #16
 800632c:	d122      	bne.n	8006374 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b10      	cmp	r3, #16
 800633a:	d11b      	bne.n	8006374 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0210 	mvn.w	r2, #16
 8006344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2208      	movs	r2, #8
 800634a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa6f 	bl	800683e <HAL_TIM_IC_CaptureCallback>
 8006360:	e005      	b.n	800636e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa61 	bl	800682a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fa72 	bl	8006852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10e      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b01      	cmp	r3, #1
 800638e:	d107      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0201 	mvn.w	r2, #1
 8006398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa3b 	bl	8006816 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b80      	cmp	r3, #128	; 0x80
 80063ac:	d10e      	bne.n	80063cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b80      	cmp	r3, #128	; 0x80
 80063ba:	d107      	bne.n	80063cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 f836 	bl	8007438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063da:	d10e      	bne.n	80063fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b80      	cmp	r3, #128	; 0x80
 80063e8:	d107      	bne.n	80063fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f829 	bl	800744c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d10e      	bne.n	8006426 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d107      	bne.n	8006426 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800641e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fa2a 	bl	800687a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b20      	cmp	r3, #32
 8006432:	d10e      	bne.n	8006452 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b20      	cmp	r3, #32
 8006440:	d107      	bne.n	8006452 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f06f 0220 	mvn.w	r2, #32
 800644a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 ffe9 	bl	8007424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006476:	2302      	movs	r3, #2
 8006478:	e0ff      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b14      	cmp	r3, #20
 8006486:	f200 80f0 	bhi.w	800666a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064e5 	.word	0x080064e5
 8006494:	0800666b 	.word	0x0800666b
 8006498:	0800666b 	.word	0x0800666b
 800649c:	0800666b 	.word	0x0800666b
 80064a0:	08006525 	.word	0x08006525
 80064a4:	0800666b 	.word	0x0800666b
 80064a8:	0800666b 	.word	0x0800666b
 80064ac:	0800666b 	.word	0x0800666b
 80064b0:	08006567 	.word	0x08006567
 80064b4:	0800666b 	.word	0x0800666b
 80064b8:	0800666b 	.word	0x0800666b
 80064bc:	0800666b 	.word	0x0800666b
 80064c0:	080065a7 	.word	0x080065a7
 80064c4:	0800666b 	.word	0x0800666b
 80064c8:	0800666b 	.word	0x0800666b
 80064cc:	0800666b 	.word	0x0800666b
 80064d0:	080065e9 	.word	0x080065e9
 80064d4:	0800666b 	.word	0x0800666b
 80064d8:	0800666b 	.word	0x0800666b
 80064dc:	0800666b 	.word	0x0800666b
 80064e0:	08006629 	.word	0x08006629
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fb48 	bl	8006b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699a      	ldr	r2, [r3, #24]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0208 	orr.w	r2, r2, #8
 80064fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0204 	bic.w	r2, r2, #4
 800650e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6999      	ldr	r1, [r3, #24]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	619a      	str	r2, [r3, #24]
      break;
 8006522:	e0a5      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fbc2 	bl	8006cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6999      	ldr	r1, [r3, #24]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	619a      	str	r2, [r3, #24]
      break;
 8006564:	e084      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fc35 	bl	8006ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0208 	orr.w	r2, r2, #8
 8006580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0204 	bic.w	r2, r2, #4
 8006590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69d9      	ldr	r1, [r3, #28]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	61da      	str	r2, [r3, #28]
      break;
 80065a4:	e064      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fca7 	bl	8006f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69d9      	ldr	r1, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	021a      	lsls	r2, r3, #8
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	61da      	str	r2, [r3, #28]
      break;
 80065e6:	e043      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fcf6 	bl	8006fe0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0208 	orr.w	r2, r2, #8
 8006602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0204 	bic.w	r2, r2, #4
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	691a      	ldr	r2, [r3, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006626:	e023      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fd40 	bl	80070b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	021a      	lsls	r2, r3, #8
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006668:	e002      	b.n	8006670 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
      break;
 800666e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006678:	7dfb      	ldrb	r3, [r7, #23]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop

08006684 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_ConfigClockSource+0x1c>
 800669c:	2302      	movs	r3, #2
 800669e:	e0b6      	b.n	800680e <HAL_TIM_ConfigClockSource+0x18a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066dc:	d03e      	beq.n	800675c <HAL_TIM_ConfigClockSource+0xd8>
 80066de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e2:	f200 8087 	bhi.w	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ea:	f000 8086 	beq.w	80067fa <HAL_TIM_ConfigClockSource+0x176>
 80066ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f2:	d87f      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 80066f4:	2b70      	cmp	r3, #112	; 0x70
 80066f6:	d01a      	beq.n	800672e <HAL_TIM_ConfigClockSource+0xaa>
 80066f8:	2b70      	cmp	r3, #112	; 0x70
 80066fa:	d87b      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 80066fc:	2b60      	cmp	r3, #96	; 0x60
 80066fe:	d050      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0x11e>
 8006700:	2b60      	cmp	r3, #96	; 0x60
 8006702:	d877      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 8006704:	2b50      	cmp	r3, #80	; 0x50
 8006706:	d03c      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0xfe>
 8006708:	2b50      	cmp	r3, #80	; 0x50
 800670a:	d873      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d058      	beq.n	80067c2 <HAL_TIM_ConfigClockSource+0x13e>
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d86f      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 8006714:	2b30      	cmp	r3, #48	; 0x30
 8006716:	d064      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d86b      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 800671c:	2b20      	cmp	r3, #32
 800671e:	d060      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d867      	bhi.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d05c      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006728:	2b10      	cmp	r3, #16
 800672a:	d05a      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0x15e>
 800672c:	e062      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6899      	ldr	r1, [r3, #8]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f000 fd9f 	bl	8007280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	609a      	str	r2, [r3, #8]
      break;
 800675a:	e04f      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	6899      	ldr	r1, [r3, #8]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f000 fd88 	bl	8007280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800677e:	609a      	str	r2, [r3, #8]
      break;
 8006780:	e03c      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6859      	ldr	r1, [r3, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	461a      	mov	r2, r3
 8006790:	f000 fcfc 	bl	800718c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2150      	movs	r1, #80	; 0x50
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fd55 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 80067a0:	e02c      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6859      	ldr	r1, [r3, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f000 fd1b 	bl	80071ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2160      	movs	r1, #96	; 0x60
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fd45 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 80067c0:	e01c      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6859      	ldr	r1, [r3, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	461a      	mov	r2, r3
 80067d0:	f000 fcdc 	bl	800718c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2140      	movs	r1, #64	; 0x40
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fd35 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 80067e0:	e00c      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4619      	mov	r1, r3
 80067ec:	4610      	mov	r0, r2
 80067ee:	f000 fd2c 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 80067f2:	e003      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
      break;
 80067f8:	e000      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80067fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d107      	bne.n	80068ca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c8:	e02a      	b.n	8006920 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d107      	bne.n	80068e4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2202      	movs	r2, #2
 80068d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e2:	e01d      	b.n	8006920 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d107      	bne.n	80068fe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2204      	movs	r2, #4
 80068f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068fc:	e010      	b.n	8006920 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d107      	bne.n	8006918 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2208      	movs	r2, #8
 800690c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006916:	e003      	b.n	8006920 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff ffb4 	bl	800688e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d10b      	bne.n	8006964 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d136      	bne.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006962:	e031      	b.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	429a      	cmp	r2, r3
 800696c:	d10b      	bne.n	8006986 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2202      	movs	r2, #2
 8006972:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d125      	bne.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006984:	e020      	b.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d10b      	bne.n	80069a8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2204      	movs	r2, #4
 8006994:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d114      	bne.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a6:	e00f      	b.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d10a      	bne.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2208      	movs	r2, #8
 80069b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff ff42 	bl	8006852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d103      	bne.n	80069fc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	771a      	strb	r2, [r3, #28]
 80069fa:	e019      	b.n	8006a30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d103      	bne.n	8006a0e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	771a      	strb	r2, [r3, #28]
 8006a0c:	e010      	b.n	8006a30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d103      	bne.n	8006a20 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	771a      	strb	r2, [r3, #28]
 8006a1e:	e007      	b.n	8006a30 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d102      	bne.n	8006a30 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ff18 	bl	8006866 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a42      	ldr	r2, [pc, #264]	; (8006b60 <TIM_Base_SetConfig+0x11c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d013      	beq.n	8006a84 <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a62:	d00f      	beq.n	8006a84 <TIM_Base_SetConfig+0x40>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a3f      	ldr	r2, [pc, #252]	; (8006b64 <TIM_Base_SetConfig+0x120>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <TIM_Base_SetConfig+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <TIM_Base_SetConfig+0x128>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a3c      	ldr	r2, [pc, #240]	; (8006b70 <TIM_Base_SetConfig+0x12c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d108      	bne.n	8006a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a31      	ldr	r2, [pc, #196]	; (8006b60 <TIM_Base_SetConfig+0x11c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01f      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa4:	d01b      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2e      	ldr	r2, [pc, #184]	; (8006b64 <TIM_Base_SetConfig+0x120>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d017      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2d      	ldr	r2, [pc, #180]	; (8006b68 <TIM_Base_SetConfig+0x124>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d013      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <TIM_Base_SetConfig+0x128>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00f      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2c      	ldr	r2, [pc, #176]	; (8006b74 <TIM_Base_SetConfig+0x130>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00b      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <TIM_Base_SetConfig+0x134>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d007      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <TIM_Base_SetConfig+0x138>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d003      	beq.n	8006ade <TIM_Base_SetConfig+0x9a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a25      	ldr	r2, [pc, #148]	; (8006b70 <TIM_Base_SetConfig+0x12c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d108      	bne.n	8006af0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <TIM_Base_SetConfig+0x11c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d013      	beq.n	8006b44 <TIM_Base_SetConfig+0x100>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a13      	ldr	r2, [pc, #76]	; (8006b6c <TIM_Base_SetConfig+0x128>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_Base_SetConfig+0x100>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a13      	ldr	r2, [pc, #76]	; (8006b74 <TIM_Base_SetConfig+0x130>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00b      	beq.n	8006b44 <TIM_Base_SetConfig+0x100>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a12      	ldr	r2, [pc, #72]	; (8006b78 <TIM_Base_SetConfig+0x134>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_Base_SetConfig+0x100>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a11      	ldr	r2, [pc, #68]	; (8006b7c <TIM_Base_SetConfig+0x138>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_Base_SetConfig+0x100>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <TIM_Base_SetConfig+0x12c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d103      	bne.n	8006b4c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	615a      	str	r2, [r3, #20]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40015000 	.word	0x40015000
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800

08006b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f023 0302 	bic.w	r3, r3, #2
 8006bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a30      	ldr	r2, [pc, #192]	; (8006c9c <TIM_OC1_SetConfig+0x11c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d013      	beq.n	8006c08 <TIM_OC1_SetConfig+0x88>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a2f      	ldr	r2, [pc, #188]	; (8006ca0 <TIM_OC1_SetConfig+0x120>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00f      	beq.n	8006c08 <TIM_OC1_SetConfig+0x88>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a2e      	ldr	r2, [pc, #184]	; (8006ca4 <TIM_OC1_SetConfig+0x124>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00b      	beq.n	8006c08 <TIM_OC1_SetConfig+0x88>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a2d      	ldr	r2, [pc, #180]	; (8006ca8 <TIM_OC1_SetConfig+0x128>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <TIM_OC1_SetConfig+0x88>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a2c      	ldr	r2, [pc, #176]	; (8006cac <TIM_OC1_SetConfig+0x12c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_OC1_SetConfig+0x88>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a2b      	ldr	r2, [pc, #172]	; (8006cb0 <TIM_OC1_SetConfig+0x130>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0308 	bic.w	r3, r3, #8
 8006c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 0304 	bic.w	r3, r3, #4
 8006c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <TIM_OC1_SetConfig+0x11c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d013      	beq.n	8006c52 <TIM_OC1_SetConfig+0xd2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ca0 <TIM_OC1_SetConfig+0x120>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00f      	beq.n	8006c52 <TIM_OC1_SetConfig+0xd2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1b      	ldr	r2, [pc, #108]	; (8006ca4 <TIM_OC1_SetConfig+0x124>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00b      	beq.n	8006c52 <TIM_OC1_SetConfig+0xd2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <TIM_OC1_SetConfig+0x128>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d007      	beq.n	8006c52 <TIM_OC1_SetConfig+0xd2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a19      	ldr	r2, [pc, #100]	; (8006cac <TIM_OC1_SetConfig+0x12c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_OC1_SetConfig+0xd2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <TIM_OC1_SetConfig+0x130>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d111      	bne.n	8006c76 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800
 8006cb0:	40015000 	.word	0x40015000

08006cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f023 0210 	bic.w	r2, r3, #16
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0320 	bic.w	r3, r3, #32
 8006d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2c      	ldr	r2, [pc, #176]	; (8006dc4 <TIM_OC2_SetConfig+0x110>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <TIM_OC2_SetConfig+0x74>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <TIM_OC2_SetConfig+0x114>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC2_SetConfig+0x74>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a2a      	ldr	r2, [pc, #168]	; (8006dcc <TIM_OC2_SetConfig+0x118>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d10d      	bne.n	8006d44 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <TIM_OC2_SetConfig+0x110>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <TIM_OC2_SetConfig+0xc0>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a1e      	ldr	r2, [pc, #120]	; (8006dc8 <TIM_OC2_SetConfig+0x114>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00f      	beq.n	8006d74 <TIM_OC2_SetConfig+0xc0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a1e      	ldr	r2, [pc, #120]	; (8006dd0 <TIM_OC2_SetConfig+0x11c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <TIM_OC2_SetConfig+0xc0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <TIM_OC2_SetConfig+0x120>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_OC2_SetConfig+0xc0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	; (8006dd8 <TIM_OC2_SetConfig+0x124>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_OC2_SetConfig+0xc0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a17      	ldr	r2, [pc, #92]	; (8006dcc <TIM_OC2_SetConfig+0x118>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d113      	bne.n	8006d9c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d7a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d82:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40015000 	.word	0x40015000
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40014400 	.word	0x40014400
 8006dd8:	40014800 	.word	0x40014800

08006ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0303 	bic.w	r3, r3, #3
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2b      	ldr	r2, [pc, #172]	; (8006ee8 <TIM_OC3_SetConfig+0x10c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d007      	beq.n	8006e4e <TIM_OC3_SetConfig+0x72>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2a      	ldr	r2, [pc, #168]	; (8006eec <TIM_OC3_SetConfig+0x110>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_OC3_SetConfig+0x72>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a29      	ldr	r2, [pc, #164]	; (8006ef0 <TIM_OC3_SetConfig+0x114>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d10d      	bne.n	8006e6a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e68:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <TIM_OC3_SetConfig+0x10c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <TIM_OC3_SetConfig+0xbe>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <TIM_OC3_SetConfig+0x110>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_OC3_SetConfig+0xbe>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <TIM_OC3_SetConfig+0x118>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_OC3_SetConfig+0xbe>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <TIM_OC3_SetConfig+0x11c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_OC3_SetConfig+0xbe>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <TIM_OC3_SetConfig+0x120>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_OC3_SetConfig+0xbe>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <TIM_OC3_SetConfig+0x114>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d113      	bne.n	8006ec2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	40015000 	.word	0x40015000
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40014400 	.word	0x40014400
 8006efc:	40014800 	.word	0x40014800

08006f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	031b      	lsls	r3, r3, #12
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a1a      	ldr	r2, [pc, #104]	; (8006fc8 <TIM_OC4_SetConfig+0xc8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <TIM_OC4_SetConfig+0x8c>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <TIM_OC4_SetConfig+0xcc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00f      	beq.n	8006f8c <TIM_OC4_SetConfig+0x8c>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a18      	ldr	r2, [pc, #96]	; (8006fd0 <TIM_OC4_SetConfig+0xd0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00b      	beq.n	8006f8c <TIM_OC4_SetConfig+0x8c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <TIM_OC4_SetConfig+0xd4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <TIM_OC4_SetConfig+0x8c>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <TIM_OC4_SetConfig+0xd8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_OC4_SetConfig+0x8c>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <TIM_OC4_SetConfig+0xdc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d109      	bne.n	8006fa0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	019b      	lsls	r3, r3, #6
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40013400 	.word	0x40013400
 8006fd0:	40014000 	.word	0x40014000
 8006fd4:	40014400 	.word	0x40014400
 8006fd8:	40014800 	.word	0x40014800
 8006fdc:	40015000 	.word	0x40015000

08006fe0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	041b      	lsls	r3, r3, #16
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a19      	ldr	r2, [pc, #100]	; (800709c <TIM_OC5_SetConfig+0xbc>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <TIM_OC5_SetConfig+0x82>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a18      	ldr	r2, [pc, #96]	; (80070a0 <TIM_OC5_SetConfig+0xc0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00f      	beq.n	8007062 <TIM_OC5_SetConfig+0x82>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <TIM_OC5_SetConfig+0xc4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_OC5_SetConfig+0x82>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <TIM_OC5_SetConfig+0xc8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_OC5_SetConfig+0x82>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a15      	ldr	r2, [pc, #84]	; (80070ac <TIM_OC5_SetConfig+0xcc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC5_SetConfig+0x82>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a14      	ldr	r2, [pc, #80]	; (80070b0 <TIM_OC5_SetConfig+0xd0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d109      	bne.n	8007076 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	621a      	str	r2, [r3, #32]
}
 8007090:	bf00      	nop
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40013400 	.word	0x40013400
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40014400 	.word	0x40014400
 80070ac:	40014800 	.word	0x40014800
 80070b0:	40015000 	.word	0x40015000

080070b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	021b      	lsls	r3, r3, #8
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	051b      	lsls	r3, r3, #20
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <TIM_OC6_SetConfig+0xc0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <TIM_OC6_SetConfig+0x84>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a19      	ldr	r2, [pc, #100]	; (8007178 <TIM_OC6_SetConfig+0xc4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00f      	beq.n	8007138 <TIM_OC6_SetConfig+0x84>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a18      	ldr	r2, [pc, #96]	; (800717c <TIM_OC6_SetConfig+0xc8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00b      	beq.n	8007138 <TIM_OC6_SetConfig+0x84>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a17      	ldr	r2, [pc, #92]	; (8007180 <TIM_OC6_SetConfig+0xcc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d007      	beq.n	8007138 <TIM_OC6_SetConfig+0x84>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a16      	ldr	r2, [pc, #88]	; (8007184 <TIM_OC6_SetConfig+0xd0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d003      	beq.n	8007138 <TIM_OC6_SetConfig+0x84>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <TIM_OC6_SetConfig+0xd4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d109      	bne.n	800714c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800713e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	029b      	lsls	r3, r3, #10
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40013400 	.word	0x40013400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800
 8007188:	40015000 	.word	0x40015000

0800718c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0201 	bic.w	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 030a 	bic.w	r3, r3, #10
 80071c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0210 	bic.w	r2, r3, #16
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	031b      	lsls	r3, r3, #12
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	f043 0307 	orr.w	r3, r3, #7
 800726c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	609a      	str	r2, [r3, #8]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	021a      	lsls	r2, r3, #8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	401a      	ands	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e06d      	b.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a30      	ldr	r2, [pc, #192]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d009      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2f      	ldr	r2, [pc, #188]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a2d      	ldr	r2, [pc, #180]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d108      	bne.n	8007374 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007368:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1e      	ldr	r2, [pc, #120]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01d      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d018      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1a      	ldr	r2, [pc, #104]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a15      	ldr	r2, [pc, #84]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a16      	ldr	r2, [pc, #88]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a11      	ldr	r2, [pc, #68]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10c      	bne.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40012c00 	.word	0x40012c00
 8007410:	40013400 	.word	0x40013400
 8007414:	40015000 	.word	0x40015000
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800
 8007420:	40014000 	.word	0x40014000

08007424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e040      	b.n	80074f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fc f85a 	bl	800353c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2224      	movs	r2, #36	; 0x24
 800748c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fbdc 	bl	8007c5c <UART_SetConfig>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e022      	b.n	80074f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fda6 	bl	8008008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fe2d 	bl	800814c <UART_CheckIdleState>
 80074f2:	4603      	mov	r3, r0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b08b      	sub	sp, #44	; 0x2c
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	4613      	mov	r3, r2
 8007508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800750e:	2b20      	cmp	r3, #32
 8007510:	d156      	bne.n	80075c0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_UART_Transmit_IT+0x22>
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e04f      	b.n	80075c2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_UART_Transmit_IT+0x34>
 800752c:	2302      	movs	r3, #2
 800752e:	e048      	b.n	80075c2 <HAL_UART_Transmit_IT+0xc6>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	88fa      	ldrh	r2, [r7, #6]
 8007542:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	88fa      	ldrh	r2, [r7, #6]
 800754a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2221      	movs	r2, #33	; 0x21
 8007560:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756a:	d107      	bne.n	800757c <HAL_UART_Transmit_IT+0x80>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a16      	ldr	r2, [pc, #88]	; (80075d0 <HAL_UART_Transmit_IT+0xd4>)
 8007578:	669a      	str	r2, [r3, #104]	; 0x68
 800757a:	e002      	b.n	8007582 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <HAL_UART_Transmit_IT+0xd8>)
 8007580:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	613b      	str	r3, [r7, #16]
   return(result);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	623b      	str	r3, [r7, #32]
 80075aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	69f9      	ldr	r1, [r7, #28]
 80075ae:	6a3a      	ldr	r2, [r7, #32]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	372c      	adds	r7, #44	; 0x2c
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	0800866b 	.word	0x0800866b
 80075d4:	080085b3 	.word	0x080085b3

080075d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d13d      	bne.n	800766a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <HAL_UART_Receive_IT+0x22>
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e036      	b.n	800766c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_UART_Receive_IT+0x34>
 8007608:	2302      	movs	r3, #2
 800760a:	e02f      	b.n	800766c <HAL_UART_Receive_IT+0x94>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d018      	beq.n	800765a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	613b      	str	r3, [r7, #16]
   return(result);
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	623b      	str	r3, [r7, #32]
 8007648:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	69f9      	ldr	r1, [r7, #28]
 800764c:	6a3a      	ldr	r2, [r7, #32]
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	61bb      	str	r3, [r7, #24]
   return(result);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e6      	bne.n	8007628 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	461a      	mov	r2, r3
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fe81 	bl	8008368 <UART_Start_Receive_IT>
 8007666:	4603      	mov	r3, r0
 8007668:	e000      	b.n	800766c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800766a:	2302      	movs	r3, #2
  }
}
 800766c:	4618      	mov	r0, r3
 800766e:	3728      	adds	r7, #40	; 0x28
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b0ba      	sub	sp, #232	; 0xe8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800769a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800769e:	f640 030f 	movw	r3, #2063	; 0x80f
 80076a2:	4013      	ands	r3, r2
 80076a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d115      	bne.n	80076dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00f      	beq.n	80076dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 82a3 	beq.w	8007c18 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	4798      	blx	r3
      }
      return;
 80076da:	e29d      	b.n	8007c18 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8117 	beq.w	8007914 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076f6:	4b85      	ldr	r3, [pc, #532]	; (800790c <HAL_UART_IRQHandler+0x298>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 810a 	beq.w	8007914 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d011      	beq.n	8007730 <HAL_UART_IRQHandler+0xbc>
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2201      	movs	r2, #1
 800771e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007726:	f043 0201 	orr.w	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d011      	beq.n	8007760 <HAL_UART_IRQHandler+0xec>
 800773c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2202      	movs	r2, #2
 800774e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007756:	f043 0204 	orr.w	r2, r3, #4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d011      	beq.n	8007790 <HAL_UART_IRQHandler+0x11c>
 800776c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2204      	movs	r2, #4
 800777e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007786:	f043 0202 	orr.w	r2, r3, #2
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d017      	beq.n	80077cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d105      	bne.n	80077b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2208      	movs	r2, #8
 80077ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077c2:	f043 0208 	orr.w	r2, r3, #8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d012      	beq.n	80077fe <HAL_UART_IRQHandler+0x18a>
 80077d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00c      	beq.n	80077fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f4:	f043 0220 	orr.w	r2, r3, #32
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8209 	beq.w	8007c1c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800780a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00d      	beq.n	8007832 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007846:	2b40      	cmp	r3, #64	; 0x40
 8007848:	d005      	beq.n	8007856 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800784a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800784e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007852:	2b00      	cmp	r3, #0
 8007854:	d04f      	beq.n	80078f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fe32 	bl	80084c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d141      	bne.n	80078ee <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800789a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1d9      	bne.n	800786a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d013      	beq.n	80078e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c2:	4a13      	ldr	r2, [pc, #76]	; (8007910 <HAL_UART_IRQHandler+0x29c>)
 80078c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fc fa34 	bl	8003d38 <HAL_DMA_Abort_IT>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d017      	beq.n	8007906 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e00f      	b.n	8007906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9a2 	bl	8007c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	e00b      	b.n	8007906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f99e 	bl	8007c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f4:	e007      	b.n	8007906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f99a 	bl	8007c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007904:	e18a      	b.n	8007c1c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007906:	bf00      	nop
    return;
 8007908:	e188      	b.n	8007c1c <HAL_UART_IRQHandler+0x5a8>
 800790a:	bf00      	nop
 800790c:	04000120 	.word	0x04000120
 8007910:	08008587 	.word	0x08008587

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007918:	2b01      	cmp	r3, #1
 800791a:	f040 8143 	bne.w	8007ba4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800791e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007922:	f003 0310 	and.w	r3, r3, #16
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 813c 	beq.w	8007ba4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800792c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8135 	beq.w	8007ba4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2210      	movs	r2, #16
 8007940:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794c:	2b40      	cmp	r3, #64	; 0x40
 800794e:	f040 80b1 	bne.w	8007ab4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800795e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 815c 	beq.w	8007c20 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800796e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007972:	429a      	cmp	r2, r3
 8007974:	f080 8154 	bcs.w	8007c20 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800797e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	2b20      	cmp	r3, #32
 800798a:	f000 8085 	beq.w	8007a98 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079bc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1da      	bne.n	800798e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ea:	f023 0301 	bic.w	r3, r3, #1
 80079ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3308      	adds	r3, #8
 80079f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e1      	bne.n	80079d8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a40:	e841 2300 	strex	r3, r2, [r1]
 8007a44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e3      	bne.n	8007a14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e4      	bne.n	8007a58 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fc f917 	bl	8003cc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8c9 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab2:	e0b5      	b.n	8007c20 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80a7 	beq.w	8007c24 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8007ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80a2 	beq.w	8007c24 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b02:	647b      	str	r3, [r7, #68]	; 0x44
 8007b04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e4      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	623b      	str	r3, [r7, #32]
   return(result);
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e3      	bne.n	8007b16 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b82:	61fb      	str	r3, [r7, #28]
 8007b84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	69b9      	ldr	r1, [r7, #24]
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e4      	bne.n	8007b60 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f851 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ba2:	e03f      	b.n	8007c24 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00e      	beq.n	8007bce <HAL_UART_IRQHandler+0x55a>
 8007bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 ff35 	bl	8008a36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bcc:	e02d      	b.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d008      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01c      	beq.n	8007c28 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
    }
    return;
 8007bf6:	e017      	b.n	8007c28 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d012      	beq.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00c      	beq.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fd8a 	bl	800872a <UART_EndTransmit_IT>
    return;
 8007c16:	e008      	b.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
      return;
 8007c18:	bf00      	nop
 8007c1a:	e006      	b.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
    return;
 8007c1c:	bf00      	nop
 8007c1e:	e004      	b.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
      return;
 8007c20:	bf00      	nop
 8007c22:	e002      	b.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
      return;
 8007c24:	bf00      	nop
 8007c26:	e000      	b.n	8007c2a <HAL_UART_IRQHandler+0x5b6>
    return;
 8007c28:	bf00      	nop
  }

}
 8007c2a:	37e8      	adds	r7, #232	; 0xe8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b088      	sub	sp, #32
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	4b92      	ldr	r3, [pc, #584]	; (8007ed0 <UART_SetConfig+0x274>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	6979      	ldr	r1, [r7, #20]
 8007c90:	430b      	orrs	r3, r1
 8007c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a80      	ldr	r2, [pc, #512]	; (8007ed4 <UART_SetConfig+0x278>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d120      	bne.n	8007d1a <UART_SetConfig+0xbe>
 8007cd8:	4b7f      	ldr	r3, [pc, #508]	; (8007ed8 <UART_SetConfig+0x27c>)
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d817      	bhi.n	8007d14 <UART_SetConfig+0xb8>
 8007ce4:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <UART_SetConfig+0x90>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007d09 	.word	0x08007d09
 8007cf4:	08007d0f 	.word	0x08007d0f
 8007cf8:	08007d03 	.word	0x08007d03
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e0b5      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d02:	2302      	movs	r3, #2
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e0b2      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e0af      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d0e:	2308      	movs	r3, #8
 8007d10:	77fb      	strb	r3, [r7, #31]
 8007d12:	e0ac      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d14:	2310      	movs	r3, #16
 8007d16:	77fb      	strb	r3, [r7, #31]
 8007d18:	e0a9      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a6f      	ldr	r2, [pc, #444]	; (8007edc <UART_SetConfig+0x280>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d124      	bne.n	8007d6e <UART_SetConfig+0x112>
 8007d24:	4b6c      	ldr	r3, [pc, #432]	; (8007ed8 <UART_SetConfig+0x27c>)
 8007d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d30:	d011      	beq.n	8007d56 <UART_SetConfig+0xfa>
 8007d32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d36:	d817      	bhi.n	8007d68 <UART_SetConfig+0x10c>
 8007d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d3c:	d011      	beq.n	8007d62 <UART_SetConfig+0x106>
 8007d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d42:	d811      	bhi.n	8007d68 <UART_SetConfig+0x10c>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <UART_SetConfig+0xf4>
 8007d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d4c:	d006      	beq.n	8007d5c <UART_SetConfig+0x100>
 8007d4e:	e00b      	b.n	8007d68 <UART_SetConfig+0x10c>
 8007d50:	2300      	movs	r3, #0
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e08b      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d56:	2302      	movs	r3, #2
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e088      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e085      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d62:	2308      	movs	r3, #8
 8007d64:	77fb      	strb	r3, [r7, #31]
 8007d66:	e082      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e07f      	b.n	8007e6e <UART_SetConfig+0x212>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a5b      	ldr	r2, [pc, #364]	; (8007ee0 <UART_SetConfig+0x284>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d124      	bne.n	8007dc2 <UART_SetConfig+0x166>
 8007d78:	4b57      	ldr	r3, [pc, #348]	; (8007ed8 <UART_SetConfig+0x27c>)
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007d80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d84:	d011      	beq.n	8007daa <UART_SetConfig+0x14e>
 8007d86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d8a:	d817      	bhi.n	8007dbc <UART_SetConfig+0x160>
 8007d8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d90:	d011      	beq.n	8007db6 <UART_SetConfig+0x15a>
 8007d92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d96:	d811      	bhi.n	8007dbc <UART_SetConfig+0x160>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <UART_SetConfig+0x148>
 8007d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007da0:	d006      	beq.n	8007db0 <UART_SetConfig+0x154>
 8007da2:	e00b      	b.n	8007dbc <UART_SetConfig+0x160>
 8007da4:	2300      	movs	r3, #0
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e061      	b.n	8007e6e <UART_SetConfig+0x212>
 8007daa:	2302      	movs	r3, #2
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e05e      	b.n	8007e6e <UART_SetConfig+0x212>
 8007db0:	2304      	movs	r3, #4
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e05b      	b.n	8007e6e <UART_SetConfig+0x212>
 8007db6:	2308      	movs	r3, #8
 8007db8:	77fb      	strb	r3, [r7, #31]
 8007dba:	e058      	b.n	8007e6e <UART_SetConfig+0x212>
 8007dbc:	2310      	movs	r3, #16
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e055      	b.n	8007e6e <UART_SetConfig+0x212>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a47      	ldr	r2, [pc, #284]	; (8007ee4 <UART_SetConfig+0x288>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d124      	bne.n	8007e16 <UART_SetConfig+0x1ba>
 8007dcc:	4b42      	ldr	r3, [pc, #264]	; (8007ed8 <UART_SetConfig+0x27c>)
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007dd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dd8:	d011      	beq.n	8007dfe <UART_SetConfig+0x1a2>
 8007dda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dde:	d817      	bhi.n	8007e10 <UART_SetConfig+0x1b4>
 8007de0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007de4:	d011      	beq.n	8007e0a <UART_SetConfig+0x1ae>
 8007de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dea:	d811      	bhi.n	8007e10 <UART_SetConfig+0x1b4>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <UART_SetConfig+0x19c>
 8007df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007df4:	d006      	beq.n	8007e04 <UART_SetConfig+0x1a8>
 8007df6:	e00b      	b.n	8007e10 <UART_SetConfig+0x1b4>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	77fb      	strb	r3, [r7, #31]
 8007dfc:	e037      	b.n	8007e6e <UART_SetConfig+0x212>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e034      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e04:	2304      	movs	r3, #4
 8007e06:	77fb      	strb	r3, [r7, #31]
 8007e08:	e031      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e0a:	2308      	movs	r3, #8
 8007e0c:	77fb      	strb	r3, [r7, #31]
 8007e0e:	e02e      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e10:	2310      	movs	r3, #16
 8007e12:	77fb      	strb	r3, [r7, #31]
 8007e14:	e02b      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <UART_SetConfig+0x28c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d124      	bne.n	8007e6a <UART_SetConfig+0x20e>
 8007e20:	4b2d      	ldr	r3, [pc, #180]	; (8007ed8 <UART_SetConfig+0x27c>)
 8007e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e24:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e2c:	d011      	beq.n	8007e52 <UART_SetConfig+0x1f6>
 8007e2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e32:	d817      	bhi.n	8007e64 <UART_SetConfig+0x208>
 8007e34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e38:	d011      	beq.n	8007e5e <UART_SetConfig+0x202>
 8007e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e3e:	d811      	bhi.n	8007e64 <UART_SetConfig+0x208>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <UART_SetConfig+0x1f0>
 8007e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e48:	d006      	beq.n	8007e58 <UART_SetConfig+0x1fc>
 8007e4a:	e00b      	b.n	8007e64 <UART_SetConfig+0x208>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	77fb      	strb	r3, [r7, #31]
 8007e50:	e00d      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e52:	2302      	movs	r3, #2
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	e00a      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	e007      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e5e:	2308      	movs	r3, #8
 8007e60:	77fb      	strb	r3, [r7, #31]
 8007e62:	e004      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e64:	2310      	movs	r3, #16
 8007e66:	77fb      	strb	r3, [r7, #31]
 8007e68:	e001      	b.n	8007e6e <UART_SetConfig+0x212>
 8007e6a:	2310      	movs	r3, #16
 8007e6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e76:	d16c      	bne.n	8007f52 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8007e78:	7ffb      	ldrb	r3, [r7, #31]
 8007e7a:	2b08      	cmp	r3, #8
 8007e7c:	d838      	bhi.n	8007ef0 <UART_SetConfig+0x294>
 8007e7e:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <UART_SetConfig+0x228>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007eb9 	.word	0x08007eb9
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	08007ebf 	.word	0x08007ebf
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007ec7 	.word	0x08007ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea8:	f7fd fc7a 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8007eac:	61b8      	str	r0, [r7, #24]
        break;
 8007eae:	e024      	b.n	8007efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb0:	f7fd fc98 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
 8007eb4:	61b8      	str	r0, [r7, #24]
        break;
 8007eb6:	e020      	b.n	8007efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <UART_SetConfig+0x290>)
 8007eba:	61bb      	str	r3, [r7, #24]
        break;
 8007ebc:	e01d      	b.n	8007efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ebe:	f7fd fbf9 	bl	80056b4 <HAL_RCC_GetSysClockFreq>
 8007ec2:	61b8      	str	r0, [r7, #24]
        break;
 8007ec4:	e019      	b.n	8007efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eca:	61bb      	str	r3, [r7, #24]
        break;
 8007ecc:	e015      	b.n	8007efa <UART_SetConfig+0x29e>
 8007ece:	bf00      	nop
 8007ed0:	efff69f3 	.word	0xefff69f3
 8007ed4:	40013800 	.word	0x40013800
 8007ed8:	40021000 	.word	0x40021000
 8007edc:	40004400 	.word	0x40004400
 8007ee0:	40004800 	.word	0x40004800
 8007ee4:	40004c00 	.word	0x40004c00
 8007ee8:	40005000 	.word	0x40005000
 8007eec:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	77bb      	strb	r3, [r7, #30]
        break;
 8007ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d075      	beq.n	8007fec <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	005a      	lsls	r2, r3, #1
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	441a      	add	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b0f      	cmp	r3, #15
 8007f1c:	d916      	bls.n	8007f4c <UART_SetConfig+0x2f0>
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f24:	d212      	bcs.n	8007f4c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f023 030f 	bic.w	r3, r3, #15
 8007f2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	89fb      	ldrh	r3, [r7, #14]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	89fa      	ldrh	r2, [r7, #14]
 8007f48:	60da      	str	r2, [r3, #12]
 8007f4a:	e04f      	b.n	8007fec <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	77bb      	strb	r3, [r7, #30]
 8007f50:	e04c      	b.n	8007fec <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f52:	7ffb      	ldrb	r3, [r7, #31]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d828      	bhi.n	8007faa <UART_SetConfig+0x34e>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x304>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007f8d 	.word	0x08007f8d
 8007f68:	08007f95 	.word	0x08007f95
 8007f6c:	08007fab 	.word	0x08007fab
 8007f70:	08007f9b 	.word	0x08007f9b
 8007f74:	08007fab 	.word	0x08007fab
 8007f78:	08007fab 	.word	0x08007fab
 8007f7c:	08007fab 	.word	0x08007fab
 8007f80:	08007fa3 	.word	0x08007fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f84:	f7fd fc0c 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8007f88:	61b8      	str	r0, [r7, #24]
        break;
 8007f8a:	e013      	b.n	8007fb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f8c:	f7fd fc2a 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
 8007f90:	61b8      	str	r0, [r7, #24]
        break;
 8007f92:	e00f      	b.n	8007fb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f94:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <UART_SetConfig+0x3a8>)
 8007f96:	61bb      	str	r3, [r7, #24]
        break;
 8007f98:	e00c      	b.n	8007fb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f9a:	f7fd fb8b 	bl	80056b4 <HAL_RCC_GetSysClockFreq>
 8007f9e:	61b8      	str	r0, [r7, #24]
        break;
 8007fa0:	e008      	b.n	8007fb4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa6:	61bb      	str	r3, [r7, #24]
        break;
 8007fa8:	e004      	b.n	8007fb4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8007fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d018      	beq.n	8007fec <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	085a      	lsrs	r2, r3, #1
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	441a      	add	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	d908      	bls.n	8007fe8 <UART_SetConfig+0x38c>
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fdc:	d204      	bcs.n	8007fe8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	60da      	str	r2, [r3, #12]
 8007fe6:	e001      	b.n	8007fec <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ff8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3720      	adds	r7, #32
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	007a1200 	.word	0x007a1200

08008008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01a      	beq.n	800811e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008106:	d10a      	bne.n	800811e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	605a      	str	r2, [r3, #4]
  }
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af02      	add	r7, sp, #8
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800815c:	f7fb fbf0 	bl	8003940 <HAL_GetTick>
 8008160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b08      	cmp	r3, #8
 800816e:	d10e      	bne.n	800818e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f82d 	bl	80081de <UART_WaitOnFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e023      	b.n	80081d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b04      	cmp	r3, #4
 800819a:	d10e      	bne.n	80081ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800819c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f817 	bl	80081de <UART_WaitOnFlagUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e00d      	b.n	80081d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b09c      	sub	sp, #112	; 0x70
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	603b      	str	r3, [r7, #0]
 80081ea:	4613      	mov	r3, r2
 80081ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ee:	e0a5      	b.n	800833c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f6:	f000 80a1 	beq.w	800833c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fa:	f7fb fba1 	bl	8003940 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <UART_WaitOnFlagUntilTimeout+0x32>
 800820a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800820c:	2b00      	cmp	r3, #0
 800820e:	d13e      	bne.n	800828e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800821e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008224:	667b      	str	r3, [r7, #100]	; 0x64
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800822e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008230:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800823c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e6      	bne.n	8008210 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	663b      	str	r3, [r7, #96]	; 0x60
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008262:	64ba      	str	r2, [r7, #72]	; 0x48
 8008264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e5      	bne.n	8008242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e067      	b.n	800835e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d04f      	beq.n	800833c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082aa:	d147      	bne.n	800833c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d4:	637b      	str	r3, [r7, #52]	; 0x34
 80082d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e6      	bne.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3308      	adds	r3, #8
 80082ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	613b      	str	r3, [r7, #16]
   return(result);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008308:	623a      	str	r2, [r7, #32]
 800830a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	6a3a      	ldr	r2, [r7, #32]
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	61bb      	str	r3, [r7, #24]
   return(result);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e5      	bne.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e010      	b.n	800835e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69da      	ldr	r2, [r3, #28]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	4013      	ands	r3, r2
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	bf0c      	ite	eq
 800834c:	2301      	moveq	r3, #1
 800834e:	2300      	movne	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	461a      	mov	r2, r3
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	429a      	cmp	r2, r3
 8008358:	f43f af4a 	beq.w	80081f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3770      	adds	r7, #112	; 0x70
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008368:	b480      	push	{r7}
 800836a:	b091      	sub	sp, #68	; 0x44
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839a:	d10e      	bne.n	80083ba <UART_Start_Receive_IT+0x52>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d105      	bne.n	80083b0 <UART_Start_Receive_IT+0x48>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083ae:	e02d      	b.n	800840c <UART_Start_Receive_IT+0xa4>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	22ff      	movs	r2, #255	; 0xff
 80083b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b8:	e028      	b.n	800840c <UART_Start_Receive_IT+0xa4>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10d      	bne.n	80083de <UART_Start_Receive_IT+0x76>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <UART_Start_Receive_IT+0x6c>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	22ff      	movs	r2, #255	; 0xff
 80083ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083d2:	e01b      	b.n	800840c <UART_Start_Receive_IT+0xa4>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	227f      	movs	r2, #127	; 0x7f
 80083d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083dc:	e016      	b.n	800840c <UART_Start_Receive_IT+0xa4>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e6:	d10d      	bne.n	8008404 <UART_Start_Receive_IT+0x9c>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d104      	bne.n	80083fa <UART_Start_Receive_IT+0x92>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	227f      	movs	r2, #127	; 0x7f
 80083f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083f8:	e008      	b.n	800840c <UART_Start_Receive_IT+0xa4>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	223f      	movs	r2, #63	; 0x3f
 80083fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008402:	e003      	b.n	800840c <UART_Start_Receive_IT+0xa4>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2222      	movs	r2, #34	; 0x22
 8008418:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3308      	adds	r3, #8
 8008420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800843a:	637a      	str	r2, [r7, #52]	; 0x34
 800843c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e5      	bne.n	800841a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008456:	d107      	bne.n	8008468 <UART_Start_Receive_IT+0x100>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <UART_Start_Receive_IT+0x150>)
 8008464:	665a      	str	r2, [r3, #100]	; 0x64
 8008466:	e002      	b.n	800846e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4a14      	ldr	r2, [pc, #80]	; (80084bc <UART_Start_Receive_IT+0x154>)
 800846c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	613b      	str	r3, [r7, #16]
   return(result);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800848a:	63bb      	str	r3, [r7, #56]	; 0x38
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	623b      	str	r3, [r7, #32]
 8008496:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	69f9      	ldr	r1, [r7, #28]
 800849a:	6a3a      	ldr	r2, [r7, #32]
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e6      	bne.n	8008476 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3744      	adds	r7, #68	; 0x44
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	080088db 	.word	0x080088db
 80084bc:	0800877f 	.word	0x0800877f

080084c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b095      	sub	sp, #84	; 0x54
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e6:	643b      	str	r3, [r7, #64]	; 0x40
 80084e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e6      	bne.n	80084c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	61fb      	str	r3, [r7, #28]
   return(result);
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	64bb      	str	r3, [r7, #72]	; 0x48
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3308      	adds	r3, #8
 8008518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800851a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008532:	2b01      	cmp	r3, #1
 8008534:	d118      	bne.n	8008568 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	60bb      	str	r3, [r7, #8]
   return(result);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f023 0310 	bic.w	r3, r3, #16
 800854a:	647b      	str	r3, [r7, #68]	; 0x44
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008554:	61bb      	str	r3, [r7, #24]
 8008556:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6979      	ldr	r1, [r7, #20]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	613b      	str	r3, [r7, #16]
   return(result);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e6      	bne.n	8008536 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	665a      	str	r2, [r3, #100]	; 0x64
}
 800857a:	bf00      	nop
 800857c:	3754      	adds	r7, #84	; 0x54
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fb43 	bl	8007c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b08f      	sub	sp, #60	; 0x3c
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085be:	2b21      	cmp	r3, #33	; 0x21
 80085c0:	d14d      	bne.n	800865e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d132      	bne.n	8008634 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	61fb      	str	r3, [r7, #28]
   return(result);
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e6      	bne.n	80085ce <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	60bb      	str	r3, [r7, #8]
   return(result);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008614:	633b      	str	r3, [r7, #48]	; 0x30
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6979      	ldr	r1, [r7, #20]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	613b      	str	r3, [r7, #16]
   return(result);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e6      	bne.n	8008600 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008632:	e014      	b.n	800865e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	b292      	uxth	r2, r2
 8008640:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008652:	b29b      	uxth	r3, r3
 8008654:	3b01      	subs	r3, #1
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800865e:	bf00      	nop
 8008660:	373c      	adds	r7, #60	; 0x3c
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800866a:	b480      	push	{r7}
 800866c:	b091      	sub	sp, #68	; 0x44
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008676:	2b21      	cmp	r3, #33	; 0x21
 8008678:	d151      	bne.n	800871e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d132      	bne.n	80086ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	623b      	str	r3, [r7, #32]
   return(result);
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800869a:	63bb      	str	r3, [r7, #56]	; 0x38
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	633b      	str	r3, [r7, #48]	; 0x30
 80086a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e6      	bne.n	8008686 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	69b9      	ldr	r1, [r7, #24]
 80086dc:	69fa      	ldr	r2, [r7, #28]
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	617b      	str	r3, [r7, #20]
   return(result);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e6      	bne.n	80086b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80086ea:	e018      	b.n	800871e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	881a      	ldrh	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086fe:	b292      	uxth	r2, r2
 8008700:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008706:	1c9a      	adds	r2, r3, #2
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008712:	b29b      	uxth	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800871e:	bf00      	nop
 8008720:	3744      	adds	r7, #68	; 0x44
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b088      	sub	sp, #32
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008746:	61fb      	str	r3, [r7, #28]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6979      	ldr	r1, [r7, #20]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	613b      	str	r3, [r7, #16]
   return(result);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e6      	bne.n	8008732 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7f8 fb21 	bl	8000db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008776:	bf00      	nop
 8008778:	3720      	adds	r7, #32
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b096      	sub	sp, #88	; 0x58
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800878c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008794:	2b22      	cmp	r3, #34	; 0x22
 8008796:	f040 8094 	bne.w	80088c2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80087a8:	b2d9      	uxtb	r1, r3
 80087aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b4:	400a      	ands	r2, r1
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d177      	bne.n	80088d2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f6:	653b      	str	r3, [r7, #80]	; 0x50
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008800:	647b      	str	r3, [r7, #68]	; 0x44
 8008802:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800880e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e6      	bne.n	80087e2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3308      	adds	r3, #8
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	623b      	str	r3, [r7, #32]
   return(result);
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	f023 0301 	bic.w	r3, r3, #1
 800882a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008834:	633a      	str	r2, [r7, #48]	; 0x30
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800883a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e5      	bne.n	8008814 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008858:	2b01      	cmp	r3, #1
 800885a:	d12e      	bne.n	80088ba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f023 0310 	bic.w	r3, r3, #16
 8008876:	64bb      	str	r3, [r7, #72]	; 0x48
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	69b9      	ldr	r1, [r7, #24]
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	617b      	str	r3, [r7, #20]
   return(result);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e6      	bne.n	8008862 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f003 0310 	and.w	r3, r3, #16
 800889e:	2b10      	cmp	r3, #16
 80088a0:	d103      	bne.n	80088aa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2210      	movs	r2, #16
 80088a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff f9c6 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088b8:	e00b      	b.n	80088d2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7f8 fab0 	bl	8000e20 <HAL_UART_RxCpltCallback>
}
 80088c0:	e007      	b.n	80088d2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f042 0208 	orr.w	r2, r2, #8
 80088d0:	619a      	str	r2, [r3, #24]
}
 80088d2:	bf00      	nop
 80088d4:	3758      	adds	r7, #88	; 0x58
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b096      	sub	sp, #88	; 0x58
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f0:	2b22      	cmp	r3, #34	; 0x22
 80088f2:	f040 8094 	bne.w	8008a1e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008904:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008906:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800890a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800890e:	4013      	ands	r3, r2
 8008910:	b29a      	uxth	r2, r3
 8008912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008914:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	1c9a      	adds	r2, r3, #2
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d177      	bne.n	8008a2e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	e853 3f00 	ldrex	r3, [r3]
 800894a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800895c:	643b      	str	r3, [r7, #64]	; 0x40
 800895e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e6      	bne.n	800893e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	64bb      	str	r3, [r7, #72]	; 0x48
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008990:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e5      	bne.n	8008970 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d12e      	bne.n	8008a16 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0310 	bic.w	r3, r3, #16
 80089d2:	647b      	str	r3, [r7, #68]	; 0x44
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089dc:	61bb      	str	r3, [r7, #24]
 80089de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d103      	bne.n	8008a06 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2210      	movs	r2, #16
 8008a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff f918 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a14:	e00b      	b.n	8008a2e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7f8 fa02 	bl	8000e20 <HAL_UART_RxCpltCallback>
}
 8008a1c:	e007      	b.n	8008a2e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0208 	orr.w	r2, r2, #8
 8008a2c:	619a      	str	r2, [r3, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	3758      	adds	r7, #88	; 0x58
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <atoi>:
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	f000 b967 	b.w	8008d20 <strtol>
	...

08008a54 <__errno>:
 8008a54:	4b01      	ldr	r3, [pc, #4]	; (8008a5c <__errno+0x8>)
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	20000430 	.word	0x20000430

08008a60 <__libc_init_array>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4d0d      	ldr	r5, [pc, #52]	; (8008a98 <__libc_init_array+0x38>)
 8008a64:	4c0d      	ldr	r4, [pc, #52]	; (8008a9c <__libc_init_array+0x3c>)
 8008a66:	1b64      	subs	r4, r4, r5
 8008a68:	10a4      	asrs	r4, r4, #2
 8008a6a:	2600      	movs	r6, #0
 8008a6c:	42a6      	cmp	r6, r4
 8008a6e:	d109      	bne.n	8008a84 <__libc_init_array+0x24>
 8008a70:	4d0b      	ldr	r5, [pc, #44]	; (8008aa0 <__libc_init_array+0x40>)
 8008a72:	4c0c      	ldr	r4, [pc, #48]	; (8008aa4 <__libc_init_array+0x44>)
 8008a74:	f002 fbb6 	bl	800b1e4 <_init>
 8008a78:	1b64      	subs	r4, r4, r5
 8008a7a:	10a4      	asrs	r4, r4, #2
 8008a7c:	2600      	movs	r6, #0
 8008a7e:	42a6      	cmp	r6, r4
 8008a80:	d105      	bne.n	8008a8e <__libc_init_array+0x2e>
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a88:	4798      	blx	r3
 8008a8a:	3601      	adds	r6, #1
 8008a8c:	e7ee      	b.n	8008a6c <__libc_init_array+0xc>
 8008a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a92:	4798      	blx	r3
 8008a94:	3601      	adds	r6, #1
 8008a96:	e7f2      	b.n	8008a7e <__libc_init_array+0x1e>
 8008a98:	0800be70 	.word	0x0800be70
 8008a9c:	0800be70 	.word	0x0800be70
 8008aa0:	0800be70 	.word	0x0800be70
 8008aa4:	0800be74 	.word	0x0800be74

08008aa8 <memcpy>:
 8008aa8:	440a      	add	r2, r1
 8008aaa:	4291      	cmp	r1, r2
 8008aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ab0:	d100      	bne.n	8008ab4 <memcpy+0xc>
 8008ab2:	4770      	bx	lr
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008abe:	4291      	cmp	r1, r2
 8008ac0:	d1f9      	bne.n	8008ab6 <memcpy+0xe>
 8008ac2:	bd10      	pop	{r4, pc}

08008ac4 <memset>:
 8008ac4:	4402      	add	r2, r0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d100      	bne.n	8008ace <memset+0xa>
 8008acc:	4770      	bx	lr
 8008ace:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad2:	e7f9      	b.n	8008ac8 <memset+0x4>

08008ad4 <srand>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <srand+0x44>)
 8008ad8:	681d      	ldr	r5, [r3, #0]
 8008ada:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008adc:	4604      	mov	r4, r0
 8008ade:	b9b3      	cbnz	r3, 8008b0e <srand+0x3a>
 8008ae0:	2018      	movs	r0, #24
 8008ae2:	f000 f977 	bl	8008dd4 <malloc>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	63a8      	str	r0, [r5, #56]	; 0x38
 8008aea:	b920      	cbnz	r0, 8008af6 <srand+0x22>
 8008aec:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <srand+0x48>)
 8008aee:	480c      	ldr	r0, [pc, #48]	; (8008b20 <srand+0x4c>)
 8008af0:	2142      	movs	r1, #66	; 0x42
 8008af2:	f000 f93f 	bl	8008d74 <__assert_func>
 8008af6:	490b      	ldr	r1, [pc, #44]	; (8008b24 <srand+0x50>)
 8008af8:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <srand+0x54>)
 8008afa:	e9c0 1300 	strd	r1, r3, [r0]
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <srand+0x58>)
 8008b00:	6083      	str	r3, [r0, #8]
 8008b02:	230b      	movs	r3, #11
 8008b04:	8183      	strh	r3, [r0, #12]
 8008b06:	2100      	movs	r1, #0
 8008b08:	2001      	movs	r0, #1
 8008b0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008b0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008b10:	2200      	movs	r2, #0
 8008b12:	611c      	str	r4, [r3, #16]
 8008b14:	615a      	str	r2, [r3, #20]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	20000430 	.word	0x20000430
 8008b1c:	0800ba54 	.word	0x0800ba54
 8008b20:	0800ba6b 	.word	0x0800ba6b
 8008b24:	abcd330e 	.word	0xabcd330e
 8008b28:	e66d1234 	.word	0xe66d1234
 8008b2c:	0005deec 	.word	0x0005deec

08008b30 <rand>:
 8008b30:	4b16      	ldr	r3, [pc, #88]	; (8008b8c <rand+0x5c>)
 8008b32:	b510      	push	{r4, lr}
 8008b34:	681c      	ldr	r4, [r3, #0]
 8008b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b38:	b9b3      	cbnz	r3, 8008b68 <rand+0x38>
 8008b3a:	2018      	movs	r0, #24
 8008b3c:	f000 f94a 	bl	8008dd4 <malloc>
 8008b40:	63a0      	str	r0, [r4, #56]	; 0x38
 8008b42:	b928      	cbnz	r0, 8008b50 <rand+0x20>
 8008b44:	4602      	mov	r2, r0
 8008b46:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <rand+0x60>)
 8008b48:	4812      	ldr	r0, [pc, #72]	; (8008b94 <rand+0x64>)
 8008b4a:	214e      	movs	r1, #78	; 0x4e
 8008b4c:	f000 f912 	bl	8008d74 <__assert_func>
 8008b50:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <rand+0x68>)
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <rand+0x6c>)
 8008b54:	e9c0 2300 	strd	r2, r3, [r0]
 8008b58:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <rand+0x70>)
 8008b5a:	6083      	str	r3, [r0, #8]
 8008b5c:	230b      	movs	r3, #11
 8008b5e:	8183      	strh	r3, [r0, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	2300      	movs	r3, #0
 8008b64:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008b68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008b6a:	4a0e      	ldr	r2, [pc, #56]	; (8008ba4 <rand+0x74>)
 8008b6c:	6920      	ldr	r0, [r4, #16]
 8008b6e:	6963      	ldr	r3, [r4, #20]
 8008b70:	490d      	ldr	r1, [pc, #52]	; (8008ba8 <rand+0x78>)
 8008b72:	4342      	muls	r2, r0
 8008b74:	fb01 2203 	mla	r2, r1, r3, r2
 8008b78:	fba0 0101 	umull	r0, r1, r0, r1
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	eb42 0001 	adc.w	r0, r2, r1
 8008b82:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008b86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008b8a:	bd10      	pop	{r4, pc}
 8008b8c:	20000430 	.word	0x20000430
 8008b90:	0800ba54 	.word	0x0800ba54
 8008b94:	0800ba6b 	.word	0x0800ba6b
 8008b98:	abcd330e 	.word	0xabcd330e
 8008b9c:	e66d1234 	.word	0xe66d1234
 8008ba0:	0005deec 	.word	0x0005deec
 8008ba4:	5851f42d 	.word	0x5851f42d
 8008ba8:	4c957f2d 	.word	0x4c957f2d

08008bac <siprintf>:
 8008bac:	b40e      	push	{r1, r2, r3}
 8008bae:	b500      	push	{lr}
 8008bb0:	b09c      	sub	sp, #112	; 0x70
 8008bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	9006      	str	r0, [sp, #24]
 8008bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bbc:	4809      	ldr	r0, [pc, #36]	; (8008be4 <siprintf+0x38>)
 8008bbe:	9107      	str	r1, [sp, #28]
 8008bc0:	9104      	str	r1, [sp, #16]
 8008bc2:	4909      	ldr	r1, [pc, #36]	; (8008be8 <siprintf+0x3c>)
 8008bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc8:	9105      	str	r1, [sp, #20]
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	a902      	add	r1, sp, #8
 8008bd0:	f000 fa44 	bl	800905c <_svfiprintf_r>
 8008bd4:	9b02      	ldr	r3, [sp, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	b01c      	add	sp, #112	; 0x70
 8008bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be0:	b003      	add	sp, #12
 8008be2:	4770      	bx	lr
 8008be4:	20000430 	.word	0x20000430
 8008be8:	ffff0208 	.word	0xffff0208

08008bec <strcat>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	4602      	mov	r2, r0
 8008bf0:	7814      	ldrb	r4, [r2, #0]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	3201      	adds	r2, #1
 8008bf6:	2c00      	cmp	r4, #0
 8008bf8:	d1fa      	bne.n	8008bf0 <strcat+0x4>
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	d1f9      	bne.n	8008bfc <strcat+0x10>
 8008c08:	bd10      	pop	{r4, pc}

08008c0a <strcpy>:
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c10:	f803 2b01 	strb.w	r2, [r3], #1
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	d1f9      	bne.n	8008c0c <strcpy+0x2>
 8008c18:	4770      	bx	lr
	...

08008c1c <_strtol_l.constprop.0>:
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c22:	d001      	beq.n	8008c28 <_strtol_l.constprop.0+0xc>
 8008c24:	2b24      	cmp	r3, #36	; 0x24
 8008c26:	d906      	bls.n	8008c36 <_strtol_l.constprop.0+0x1a>
 8008c28:	f7ff ff14 	bl	8008a54 <__errno>
 8008c2c:	2316      	movs	r3, #22
 8008c2e:	6003      	str	r3, [r0, #0]
 8008c30:	2000      	movs	r0, #0
 8008c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008d1c <_strtol_l.constprop.0+0x100>
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	462e      	mov	r6, r5
 8008c3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c42:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008c46:	f017 0708 	ands.w	r7, r7, #8
 8008c4a:	d1f7      	bne.n	8008c3c <_strtol_l.constprop.0+0x20>
 8008c4c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c4e:	d132      	bne.n	8008cb6 <_strtol_l.constprop.0+0x9a>
 8008c50:	782c      	ldrb	r4, [r5, #0]
 8008c52:	2701      	movs	r7, #1
 8008c54:	1cb5      	adds	r5, r6, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d05b      	beq.n	8008d12 <_strtol_l.constprop.0+0xf6>
 8008c5a:	2b10      	cmp	r3, #16
 8008c5c:	d109      	bne.n	8008c72 <_strtol_l.constprop.0+0x56>
 8008c5e:	2c30      	cmp	r4, #48	; 0x30
 8008c60:	d107      	bne.n	8008c72 <_strtol_l.constprop.0+0x56>
 8008c62:	782c      	ldrb	r4, [r5, #0]
 8008c64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c68:	2c58      	cmp	r4, #88	; 0x58
 8008c6a:	d14d      	bne.n	8008d08 <_strtol_l.constprop.0+0xec>
 8008c6c:	786c      	ldrb	r4, [r5, #1]
 8008c6e:	2310      	movs	r3, #16
 8008c70:	3502      	adds	r5, #2
 8008c72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c76:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c7a:	f04f 0c00 	mov.w	ip, #0
 8008c7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c82:	4666      	mov	r6, ip
 8008c84:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c8c:	f1be 0f09 	cmp.w	lr, #9
 8008c90:	d816      	bhi.n	8008cc0 <_strtol_l.constprop.0+0xa4>
 8008c92:	4674      	mov	r4, lr
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	dd24      	ble.n	8008ce2 <_strtol_l.constprop.0+0xc6>
 8008c98:	f1bc 0f00 	cmp.w	ip, #0
 8008c9c:	db1e      	blt.n	8008cdc <_strtol_l.constprop.0+0xc0>
 8008c9e:	45b1      	cmp	r9, r6
 8008ca0:	d31c      	bcc.n	8008cdc <_strtol_l.constprop.0+0xc0>
 8008ca2:	d101      	bne.n	8008ca8 <_strtol_l.constprop.0+0x8c>
 8008ca4:	45a2      	cmp	sl, r4
 8008ca6:	db19      	blt.n	8008cdc <_strtol_l.constprop.0+0xc0>
 8008ca8:	fb06 4603 	mla	r6, r6, r3, r4
 8008cac:	f04f 0c01 	mov.w	ip, #1
 8008cb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cb4:	e7e8      	b.n	8008c88 <_strtol_l.constprop.0+0x6c>
 8008cb6:	2c2b      	cmp	r4, #43	; 0x2b
 8008cb8:	bf04      	itt	eq
 8008cba:	782c      	ldrbeq	r4, [r5, #0]
 8008cbc:	1cb5      	addeq	r5, r6, #2
 8008cbe:	e7ca      	b.n	8008c56 <_strtol_l.constprop.0+0x3a>
 8008cc0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008cc4:	f1be 0f19 	cmp.w	lr, #25
 8008cc8:	d801      	bhi.n	8008cce <_strtol_l.constprop.0+0xb2>
 8008cca:	3c37      	subs	r4, #55	; 0x37
 8008ccc:	e7e2      	b.n	8008c94 <_strtol_l.constprop.0+0x78>
 8008cce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008cd2:	f1be 0f19 	cmp.w	lr, #25
 8008cd6:	d804      	bhi.n	8008ce2 <_strtol_l.constprop.0+0xc6>
 8008cd8:	3c57      	subs	r4, #87	; 0x57
 8008cda:	e7db      	b.n	8008c94 <_strtol_l.constprop.0+0x78>
 8008cdc:	f04f 3cff 	mov.w	ip, #4294967295
 8008ce0:	e7e6      	b.n	8008cb0 <_strtol_l.constprop.0+0x94>
 8008ce2:	f1bc 0f00 	cmp.w	ip, #0
 8008ce6:	da05      	bge.n	8008cf4 <_strtol_l.constprop.0+0xd8>
 8008ce8:	2322      	movs	r3, #34	; 0x22
 8008cea:	6003      	str	r3, [r0, #0]
 8008cec:	4646      	mov	r6, r8
 8008cee:	b942      	cbnz	r2, 8008d02 <_strtol_l.constprop.0+0xe6>
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	e79e      	b.n	8008c32 <_strtol_l.constprop.0+0x16>
 8008cf4:	b107      	cbz	r7, 8008cf8 <_strtol_l.constprop.0+0xdc>
 8008cf6:	4276      	negs	r6, r6
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d0f9      	beq.n	8008cf0 <_strtol_l.constprop.0+0xd4>
 8008cfc:	f1bc 0f00 	cmp.w	ip, #0
 8008d00:	d000      	beq.n	8008d04 <_strtol_l.constprop.0+0xe8>
 8008d02:	1e69      	subs	r1, r5, #1
 8008d04:	6011      	str	r1, [r2, #0]
 8008d06:	e7f3      	b.n	8008cf0 <_strtol_l.constprop.0+0xd4>
 8008d08:	2430      	movs	r4, #48	; 0x30
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1b1      	bne.n	8008c72 <_strtol_l.constprop.0+0x56>
 8008d0e:	2308      	movs	r3, #8
 8008d10:	e7af      	b.n	8008c72 <_strtol_l.constprop.0+0x56>
 8008d12:	2c30      	cmp	r4, #48	; 0x30
 8008d14:	d0a5      	beq.n	8008c62 <_strtol_l.constprop.0+0x46>
 8008d16:	230a      	movs	r3, #10
 8008d18:	e7ab      	b.n	8008c72 <_strtol_l.constprop.0+0x56>
 8008d1a:	bf00      	nop
 8008d1c:	0800bb03 	.word	0x0800bb03

08008d20 <strtol>:
 8008d20:	4613      	mov	r3, r2
 8008d22:	460a      	mov	r2, r1
 8008d24:	4601      	mov	r1, r0
 8008d26:	4802      	ldr	r0, [pc, #8]	; (8008d30 <strtol+0x10>)
 8008d28:	6800      	ldr	r0, [r0, #0]
 8008d2a:	f7ff bf77 	b.w	8008c1c <_strtol_l.constprop.0>
 8008d2e:	bf00      	nop
 8008d30:	20000430 	.word	0x20000430

08008d34 <_vsiprintf_r>:
 8008d34:	b500      	push	{lr}
 8008d36:	b09b      	sub	sp, #108	; 0x6c
 8008d38:	9100      	str	r1, [sp, #0]
 8008d3a:	9104      	str	r1, [sp, #16]
 8008d3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d40:	9105      	str	r1, [sp, #20]
 8008d42:	9102      	str	r1, [sp, #8]
 8008d44:	4905      	ldr	r1, [pc, #20]	; (8008d5c <_vsiprintf_r+0x28>)
 8008d46:	9103      	str	r1, [sp, #12]
 8008d48:	4669      	mov	r1, sp
 8008d4a:	f000 f987 	bl	800905c <_svfiprintf_r>
 8008d4e:	9b00      	ldr	r3, [sp, #0]
 8008d50:	2200      	movs	r2, #0
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	b01b      	add	sp, #108	; 0x6c
 8008d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d5a:	bf00      	nop
 8008d5c:	ffff0208 	.word	0xffff0208

08008d60 <vsiprintf>:
 8008d60:	4613      	mov	r3, r2
 8008d62:	460a      	mov	r2, r1
 8008d64:	4601      	mov	r1, r0
 8008d66:	4802      	ldr	r0, [pc, #8]	; (8008d70 <vsiprintf+0x10>)
 8008d68:	6800      	ldr	r0, [r0, #0]
 8008d6a:	f7ff bfe3 	b.w	8008d34 <_vsiprintf_r>
 8008d6e:	bf00      	nop
 8008d70:	20000430 	.word	0x20000430

08008d74 <__assert_func>:
 8008d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d76:	4614      	mov	r4, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <__assert_func+0x2c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4605      	mov	r5, r0
 8008d80:	68d8      	ldr	r0, [r3, #12]
 8008d82:	b14c      	cbz	r4, 8008d98 <__assert_func+0x24>
 8008d84:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <__assert_func+0x30>)
 8008d86:	9100      	str	r1, [sp, #0]
 8008d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d8c:	4906      	ldr	r1, [pc, #24]	; (8008da8 <__assert_func+0x34>)
 8008d8e:	462b      	mov	r3, r5
 8008d90:	f000 f80e 	bl	8008db0 <fiprintf>
 8008d94:	f000 fe20 	bl	80099d8 <abort>
 8008d98:	4b04      	ldr	r3, [pc, #16]	; (8008dac <__assert_func+0x38>)
 8008d9a:	461c      	mov	r4, r3
 8008d9c:	e7f3      	b.n	8008d86 <__assert_func+0x12>
 8008d9e:	bf00      	nop
 8008da0:	20000430 	.word	0x20000430
 8008da4:	0800bac6 	.word	0x0800bac6
 8008da8:	0800bad3 	.word	0x0800bad3
 8008dac:	0800bb01 	.word	0x0800bb01

08008db0 <fiprintf>:
 8008db0:	b40e      	push	{r1, r2, r3}
 8008db2:	b503      	push	{r0, r1, lr}
 8008db4:	4601      	mov	r1, r0
 8008db6:	ab03      	add	r3, sp, #12
 8008db8:	4805      	ldr	r0, [pc, #20]	; (8008dd0 <fiprintf+0x20>)
 8008dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dbe:	6800      	ldr	r0, [r0, #0]
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	f000 fa75 	bl	80092b0 <_vfiprintf_r>
 8008dc6:	b002      	add	sp, #8
 8008dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dcc:	b003      	add	sp, #12
 8008dce:	4770      	bx	lr
 8008dd0:	20000430 	.word	0x20000430

08008dd4 <malloc>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <malloc+0xc>)
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f000 b86f 	b.w	8008ebc <_malloc_r>
 8008dde:	bf00      	nop
 8008de0:	20000430 	.word	0x20000430

08008de4 <_free_r>:
 8008de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de6:	2900      	cmp	r1, #0
 8008de8:	d044      	beq.n	8008e74 <_free_r+0x90>
 8008dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dee:	9001      	str	r0, [sp, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f1a1 0404 	sub.w	r4, r1, #4
 8008df6:	bfb8      	it	lt
 8008df8:	18e4      	addlt	r4, r4, r3
 8008dfa:	f001 f82f 	bl	8009e5c <__malloc_lock>
 8008dfe:	4a1e      	ldr	r2, [pc, #120]	; (8008e78 <_free_r+0x94>)
 8008e00:	9801      	ldr	r0, [sp, #4]
 8008e02:	6813      	ldr	r3, [r2, #0]
 8008e04:	b933      	cbnz	r3, 8008e14 <_free_r+0x30>
 8008e06:	6063      	str	r3, [r4, #4]
 8008e08:	6014      	str	r4, [r2, #0]
 8008e0a:	b003      	add	sp, #12
 8008e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e10:	f001 b82a 	b.w	8009e68 <__malloc_unlock>
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d908      	bls.n	8008e2a <_free_r+0x46>
 8008e18:	6825      	ldr	r5, [r4, #0]
 8008e1a:	1961      	adds	r1, r4, r5
 8008e1c:	428b      	cmp	r3, r1
 8008e1e:	bf01      	itttt	eq
 8008e20:	6819      	ldreq	r1, [r3, #0]
 8008e22:	685b      	ldreq	r3, [r3, #4]
 8008e24:	1949      	addeq	r1, r1, r5
 8008e26:	6021      	streq	r1, [r4, #0]
 8008e28:	e7ed      	b.n	8008e06 <_free_r+0x22>
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b10b      	cbz	r3, 8008e34 <_free_r+0x50>
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d9fa      	bls.n	8008e2a <_free_r+0x46>
 8008e34:	6811      	ldr	r1, [r2, #0]
 8008e36:	1855      	adds	r5, r2, r1
 8008e38:	42a5      	cmp	r5, r4
 8008e3a:	d10b      	bne.n	8008e54 <_free_r+0x70>
 8008e3c:	6824      	ldr	r4, [r4, #0]
 8008e3e:	4421      	add	r1, r4
 8008e40:	1854      	adds	r4, r2, r1
 8008e42:	42a3      	cmp	r3, r4
 8008e44:	6011      	str	r1, [r2, #0]
 8008e46:	d1e0      	bne.n	8008e0a <_free_r+0x26>
 8008e48:	681c      	ldr	r4, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	6053      	str	r3, [r2, #4]
 8008e4e:	4421      	add	r1, r4
 8008e50:	6011      	str	r1, [r2, #0]
 8008e52:	e7da      	b.n	8008e0a <_free_r+0x26>
 8008e54:	d902      	bls.n	8008e5c <_free_r+0x78>
 8008e56:	230c      	movs	r3, #12
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	e7d6      	b.n	8008e0a <_free_r+0x26>
 8008e5c:	6825      	ldr	r5, [r4, #0]
 8008e5e:	1961      	adds	r1, r4, r5
 8008e60:	428b      	cmp	r3, r1
 8008e62:	bf04      	itt	eq
 8008e64:	6819      	ldreq	r1, [r3, #0]
 8008e66:	685b      	ldreq	r3, [r3, #4]
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	bf04      	itt	eq
 8008e6c:	1949      	addeq	r1, r1, r5
 8008e6e:	6021      	streq	r1, [r4, #0]
 8008e70:	6054      	str	r4, [r2, #4]
 8008e72:	e7ca      	b.n	8008e0a <_free_r+0x26>
 8008e74:	b003      	add	sp, #12
 8008e76:	bd30      	pop	{r4, r5, pc}
 8008e78:	20008a08 	.word	0x20008a08

08008e7c <sbrk_aligned>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	4e0e      	ldr	r6, [pc, #56]	; (8008eb8 <sbrk_aligned+0x3c>)
 8008e80:	460c      	mov	r4, r1
 8008e82:	6831      	ldr	r1, [r6, #0]
 8008e84:	4605      	mov	r5, r0
 8008e86:	b911      	cbnz	r1, 8008e8e <sbrk_aligned+0x12>
 8008e88:	f000 fcd6 	bl	8009838 <_sbrk_r>
 8008e8c:	6030      	str	r0, [r6, #0]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 fcd1 	bl	8009838 <_sbrk_r>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d00a      	beq.n	8008eb0 <sbrk_aligned+0x34>
 8008e9a:	1cc4      	adds	r4, r0, #3
 8008e9c:	f024 0403 	bic.w	r4, r4, #3
 8008ea0:	42a0      	cmp	r0, r4
 8008ea2:	d007      	beq.n	8008eb4 <sbrk_aligned+0x38>
 8008ea4:	1a21      	subs	r1, r4, r0
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 fcc6 	bl	8009838 <_sbrk_r>
 8008eac:	3001      	adds	r0, #1
 8008eae:	d101      	bne.n	8008eb4 <sbrk_aligned+0x38>
 8008eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	20008a0c 	.word	0x20008a0c

08008ebc <_malloc_r>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	1ccd      	adds	r5, r1, #3
 8008ec2:	f025 0503 	bic.w	r5, r5, #3
 8008ec6:	3508      	adds	r5, #8
 8008ec8:	2d0c      	cmp	r5, #12
 8008eca:	bf38      	it	cc
 8008ecc:	250c      	movcc	r5, #12
 8008ece:	2d00      	cmp	r5, #0
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	db01      	blt.n	8008ed8 <_malloc_r+0x1c>
 8008ed4:	42a9      	cmp	r1, r5
 8008ed6:	d905      	bls.n	8008ee4 <_malloc_r+0x28>
 8008ed8:	230c      	movs	r3, #12
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	2600      	movs	r6, #0
 8008ede:	4630      	mov	r0, r6
 8008ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee4:	4e2e      	ldr	r6, [pc, #184]	; (8008fa0 <_malloc_r+0xe4>)
 8008ee6:	f000 ffb9 	bl	8009e5c <__malloc_lock>
 8008eea:	6833      	ldr	r3, [r6, #0]
 8008eec:	461c      	mov	r4, r3
 8008eee:	bb34      	cbnz	r4, 8008f3e <_malloc_r+0x82>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7ff ffc2 	bl	8008e7c <sbrk_aligned>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	4604      	mov	r4, r0
 8008efc:	d14d      	bne.n	8008f9a <_malloc_r+0xde>
 8008efe:	6834      	ldr	r4, [r6, #0]
 8008f00:	4626      	mov	r6, r4
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d140      	bne.n	8008f88 <_malloc_r+0xcc>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	eb04 0803 	add.w	r8, r4, r3
 8008f10:	f000 fc92 	bl	8009838 <_sbrk_r>
 8008f14:	4580      	cmp	r8, r0
 8008f16:	d13a      	bne.n	8008f8e <_malloc_r+0xd2>
 8008f18:	6821      	ldr	r1, [r4, #0]
 8008f1a:	3503      	adds	r5, #3
 8008f1c:	1a6d      	subs	r5, r5, r1
 8008f1e:	f025 0503 	bic.w	r5, r5, #3
 8008f22:	3508      	adds	r5, #8
 8008f24:	2d0c      	cmp	r5, #12
 8008f26:	bf38      	it	cc
 8008f28:	250c      	movcc	r5, #12
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	f7ff ffa5 	bl	8008e7c <sbrk_aligned>
 8008f32:	3001      	adds	r0, #1
 8008f34:	d02b      	beq.n	8008f8e <_malloc_r+0xd2>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	442b      	add	r3, r5
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	e00e      	b.n	8008f5c <_malloc_r+0xa0>
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	1b52      	subs	r2, r2, r5
 8008f42:	d41e      	bmi.n	8008f82 <_malloc_r+0xc6>
 8008f44:	2a0b      	cmp	r2, #11
 8008f46:	d916      	bls.n	8008f76 <_malloc_r+0xba>
 8008f48:	1961      	adds	r1, r4, r5
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	6025      	str	r5, [r4, #0]
 8008f4e:	bf18      	it	ne
 8008f50:	6059      	strne	r1, [r3, #4]
 8008f52:	6863      	ldr	r3, [r4, #4]
 8008f54:	bf08      	it	eq
 8008f56:	6031      	streq	r1, [r6, #0]
 8008f58:	5162      	str	r2, [r4, r5]
 8008f5a:	604b      	str	r3, [r1, #4]
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f104 060b 	add.w	r6, r4, #11
 8008f62:	f000 ff81 	bl	8009e68 <__malloc_unlock>
 8008f66:	f026 0607 	bic.w	r6, r6, #7
 8008f6a:	1d23      	adds	r3, r4, #4
 8008f6c:	1af2      	subs	r2, r6, r3
 8008f6e:	d0b6      	beq.n	8008ede <_malloc_r+0x22>
 8008f70:	1b9b      	subs	r3, r3, r6
 8008f72:	50a3      	str	r3, [r4, r2]
 8008f74:	e7b3      	b.n	8008ede <_malloc_r+0x22>
 8008f76:	6862      	ldr	r2, [r4, #4]
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	bf0c      	ite	eq
 8008f7c:	6032      	streq	r2, [r6, #0]
 8008f7e:	605a      	strne	r2, [r3, #4]
 8008f80:	e7ec      	b.n	8008f5c <_malloc_r+0xa0>
 8008f82:	4623      	mov	r3, r4
 8008f84:	6864      	ldr	r4, [r4, #4]
 8008f86:	e7b2      	b.n	8008eee <_malloc_r+0x32>
 8008f88:	4634      	mov	r4, r6
 8008f8a:	6876      	ldr	r6, [r6, #4]
 8008f8c:	e7b9      	b.n	8008f02 <_malloc_r+0x46>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	4638      	mov	r0, r7
 8008f94:	f000 ff68 	bl	8009e68 <__malloc_unlock>
 8008f98:	e7a1      	b.n	8008ede <_malloc_r+0x22>
 8008f9a:	6025      	str	r5, [r4, #0]
 8008f9c:	e7de      	b.n	8008f5c <_malloc_r+0xa0>
 8008f9e:	bf00      	nop
 8008fa0:	20008a08 	.word	0x20008a08

08008fa4 <__ssputs_r>:
 8008fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa8:	688e      	ldr	r6, [r1, #8]
 8008faa:	429e      	cmp	r6, r3
 8008fac:	4682      	mov	sl, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	4690      	mov	r8, r2
 8008fb2:	461f      	mov	r7, r3
 8008fb4:	d838      	bhi.n	8009028 <__ssputs_r+0x84>
 8008fb6:	898a      	ldrh	r2, [r1, #12]
 8008fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fbc:	d032      	beq.n	8009024 <__ssputs_r+0x80>
 8008fbe:	6825      	ldr	r5, [r4, #0]
 8008fc0:	6909      	ldr	r1, [r1, #16]
 8008fc2:	eba5 0901 	sub.w	r9, r5, r1
 8008fc6:	6965      	ldr	r5, [r4, #20]
 8008fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	444b      	add	r3, r9
 8008fd4:	106d      	asrs	r5, r5, #1
 8008fd6:	429d      	cmp	r5, r3
 8008fd8:	bf38      	it	cc
 8008fda:	461d      	movcc	r5, r3
 8008fdc:	0553      	lsls	r3, r2, #21
 8008fde:	d531      	bpl.n	8009044 <__ssputs_r+0xa0>
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	f7ff ff6b 	bl	8008ebc <_malloc_r>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	b950      	cbnz	r0, 8009000 <__ssputs_r+0x5c>
 8008fea:	230c      	movs	r3, #12
 8008fec:	f8ca 3000 	str.w	r3, [sl]
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009000:	6921      	ldr	r1, [r4, #16]
 8009002:	464a      	mov	r2, r9
 8009004:	f7ff fd50 	bl	8008aa8 <memcpy>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800900e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	6126      	str	r6, [r4, #16]
 8009016:	6165      	str	r5, [r4, #20]
 8009018:	444e      	add	r6, r9
 800901a:	eba5 0509 	sub.w	r5, r5, r9
 800901e:	6026      	str	r6, [r4, #0]
 8009020:	60a5      	str	r5, [r4, #8]
 8009022:	463e      	mov	r6, r7
 8009024:	42be      	cmp	r6, r7
 8009026:	d900      	bls.n	800902a <__ssputs_r+0x86>
 8009028:	463e      	mov	r6, r7
 800902a:	6820      	ldr	r0, [r4, #0]
 800902c:	4632      	mov	r2, r6
 800902e:	4641      	mov	r1, r8
 8009030:	f000 fefa 	bl	8009e28 <memmove>
 8009034:	68a3      	ldr	r3, [r4, #8]
 8009036:	1b9b      	subs	r3, r3, r6
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	4433      	add	r3, r6
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	2000      	movs	r0, #0
 8009042:	e7db      	b.n	8008ffc <__ssputs_r+0x58>
 8009044:	462a      	mov	r2, r5
 8009046:	f000 ff15 	bl	8009e74 <_realloc_r>
 800904a:	4606      	mov	r6, r0
 800904c:	2800      	cmp	r0, #0
 800904e:	d1e1      	bne.n	8009014 <__ssputs_r+0x70>
 8009050:	6921      	ldr	r1, [r4, #16]
 8009052:	4650      	mov	r0, sl
 8009054:	f7ff fec6 	bl	8008de4 <_free_r>
 8009058:	e7c7      	b.n	8008fea <__ssputs_r+0x46>
	...

0800905c <_svfiprintf_r>:
 800905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009060:	4698      	mov	r8, r3
 8009062:	898b      	ldrh	r3, [r1, #12]
 8009064:	061b      	lsls	r3, r3, #24
 8009066:	b09d      	sub	sp, #116	; 0x74
 8009068:	4607      	mov	r7, r0
 800906a:	460d      	mov	r5, r1
 800906c:	4614      	mov	r4, r2
 800906e:	d50e      	bpl.n	800908e <_svfiprintf_r+0x32>
 8009070:	690b      	ldr	r3, [r1, #16]
 8009072:	b963      	cbnz	r3, 800908e <_svfiprintf_r+0x32>
 8009074:	2140      	movs	r1, #64	; 0x40
 8009076:	f7ff ff21 	bl	8008ebc <_malloc_r>
 800907a:	6028      	str	r0, [r5, #0]
 800907c:	6128      	str	r0, [r5, #16]
 800907e:	b920      	cbnz	r0, 800908a <_svfiprintf_r+0x2e>
 8009080:	230c      	movs	r3, #12
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	f04f 30ff 	mov.w	r0, #4294967295
 8009088:	e0d1      	b.n	800922e <_svfiprintf_r+0x1d2>
 800908a:	2340      	movs	r3, #64	; 0x40
 800908c:	616b      	str	r3, [r5, #20]
 800908e:	2300      	movs	r3, #0
 8009090:	9309      	str	r3, [sp, #36]	; 0x24
 8009092:	2320      	movs	r3, #32
 8009094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009098:	f8cd 800c 	str.w	r8, [sp, #12]
 800909c:	2330      	movs	r3, #48	; 0x30
 800909e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009248 <_svfiprintf_r+0x1ec>
 80090a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090a6:	f04f 0901 	mov.w	r9, #1
 80090aa:	4623      	mov	r3, r4
 80090ac:	469a      	mov	sl, r3
 80090ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b2:	b10a      	cbz	r2, 80090b8 <_svfiprintf_r+0x5c>
 80090b4:	2a25      	cmp	r2, #37	; 0x25
 80090b6:	d1f9      	bne.n	80090ac <_svfiprintf_r+0x50>
 80090b8:	ebba 0b04 	subs.w	fp, sl, r4
 80090bc:	d00b      	beq.n	80090d6 <_svfiprintf_r+0x7a>
 80090be:	465b      	mov	r3, fp
 80090c0:	4622      	mov	r2, r4
 80090c2:	4629      	mov	r1, r5
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff ff6d 	bl	8008fa4 <__ssputs_r>
 80090ca:	3001      	adds	r0, #1
 80090cc:	f000 80aa 	beq.w	8009224 <_svfiprintf_r+0x1c8>
 80090d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090d2:	445a      	add	r2, fp
 80090d4:	9209      	str	r2, [sp, #36]	; 0x24
 80090d6:	f89a 3000 	ldrb.w	r3, [sl]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80a2 	beq.w	8009224 <_svfiprintf_r+0x1c8>
 80090e0:	2300      	movs	r3, #0
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
 80090e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ea:	f10a 0a01 	add.w	sl, sl, #1
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	9307      	str	r3, [sp, #28]
 80090f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090f6:	931a      	str	r3, [sp, #104]	; 0x68
 80090f8:	4654      	mov	r4, sl
 80090fa:	2205      	movs	r2, #5
 80090fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009100:	4851      	ldr	r0, [pc, #324]	; (8009248 <_svfiprintf_r+0x1ec>)
 8009102:	f7f7 f885 	bl	8000210 <memchr>
 8009106:	9a04      	ldr	r2, [sp, #16]
 8009108:	b9d8      	cbnz	r0, 8009142 <_svfiprintf_r+0xe6>
 800910a:	06d0      	lsls	r0, r2, #27
 800910c:	bf44      	itt	mi
 800910e:	2320      	movmi	r3, #32
 8009110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009114:	0711      	lsls	r1, r2, #28
 8009116:	bf44      	itt	mi
 8009118:	232b      	movmi	r3, #43	; 0x2b
 800911a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800911e:	f89a 3000 	ldrb.w	r3, [sl]
 8009122:	2b2a      	cmp	r3, #42	; 0x2a
 8009124:	d015      	beq.n	8009152 <_svfiprintf_r+0xf6>
 8009126:	9a07      	ldr	r2, [sp, #28]
 8009128:	4654      	mov	r4, sl
 800912a:	2000      	movs	r0, #0
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	4621      	mov	r1, r4
 8009132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009136:	3b30      	subs	r3, #48	; 0x30
 8009138:	2b09      	cmp	r3, #9
 800913a:	d94e      	bls.n	80091da <_svfiprintf_r+0x17e>
 800913c:	b1b0      	cbz	r0, 800916c <_svfiprintf_r+0x110>
 800913e:	9207      	str	r2, [sp, #28]
 8009140:	e014      	b.n	800916c <_svfiprintf_r+0x110>
 8009142:	eba0 0308 	sub.w	r3, r0, r8
 8009146:	fa09 f303 	lsl.w	r3, r9, r3
 800914a:	4313      	orrs	r3, r2
 800914c:	9304      	str	r3, [sp, #16]
 800914e:	46a2      	mov	sl, r4
 8009150:	e7d2      	b.n	80090f8 <_svfiprintf_r+0x9c>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	1d19      	adds	r1, r3, #4
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	9103      	str	r1, [sp, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	bfbb      	ittet	lt
 800915e:	425b      	neglt	r3, r3
 8009160:	f042 0202 	orrlt.w	r2, r2, #2
 8009164:	9307      	strge	r3, [sp, #28]
 8009166:	9307      	strlt	r3, [sp, #28]
 8009168:	bfb8      	it	lt
 800916a:	9204      	strlt	r2, [sp, #16]
 800916c:	7823      	ldrb	r3, [r4, #0]
 800916e:	2b2e      	cmp	r3, #46	; 0x2e
 8009170:	d10c      	bne.n	800918c <_svfiprintf_r+0x130>
 8009172:	7863      	ldrb	r3, [r4, #1]
 8009174:	2b2a      	cmp	r3, #42	; 0x2a
 8009176:	d135      	bne.n	80091e4 <_svfiprintf_r+0x188>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	1d1a      	adds	r2, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	9203      	str	r2, [sp, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	bfb8      	it	lt
 8009184:	f04f 33ff 	movlt.w	r3, #4294967295
 8009188:	3402      	adds	r4, #2
 800918a:	9305      	str	r3, [sp, #20]
 800918c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009258 <_svfiprintf_r+0x1fc>
 8009190:	7821      	ldrb	r1, [r4, #0]
 8009192:	2203      	movs	r2, #3
 8009194:	4650      	mov	r0, sl
 8009196:	f7f7 f83b 	bl	8000210 <memchr>
 800919a:	b140      	cbz	r0, 80091ae <_svfiprintf_r+0x152>
 800919c:	2340      	movs	r3, #64	; 0x40
 800919e:	eba0 000a 	sub.w	r0, r0, sl
 80091a2:	fa03 f000 	lsl.w	r0, r3, r0
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	4303      	orrs	r3, r0
 80091aa:	3401      	adds	r4, #1
 80091ac:	9304      	str	r3, [sp, #16]
 80091ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b2:	4826      	ldr	r0, [pc, #152]	; (800924c <_svfiprintf_r+0x1f0>)
 80091b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091b8:	2206      	movs	r2, #6
 80091ba:	f7f7 f829 	bl	8000210 <memchr>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d038      	beq.n	8009234 <_svfiprintf_r+0x1d8>
 80091c2:	4b23      	ldr	r3, [pc, #140]	; (8009250 <_svfiprintf_r+0x1f4>)
 80091c4:	bb1b      	cbnz	r3, 800920e <_svfiprintf_r+0x1b2>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	3307      	adds	r3, #7
 80091ca:	f023 0307 	bic.w	r3, r3, #7
 80091ce:	3308      	adds	r3, #8
 80091d0:	9303      	str	r3, [sp, #12]
 80091d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d4:	4433      	add	r3, r6
 80091d6:	9309      	str	r3, [sp, #36]	; 0x24
 80091d8:	e767      	b.n	80090aa <_svfiprintf_r+0x4e>
 80091da:	fb0c 3202 	mla	r2, ip, r2, r3
 80091de:	460c      	mov	r4, r1
 80091e0:	2001      	movs	r0, #1
 80091e2:	e7a5      	b.n	8009130 <_svfiprintf_r+0xd4>
 80091e4:	2300      	movs	r3, #0
 80091e6:	3401      	adds	r4, #1
 80091e8:	9305      	str	r3, [sp, #20]
 80091ea:	4619      	mov	r1, r3
 80091ec:	f04f 0c0a 	mov.w	ip, #10
 80091f0:	4620      	mov	r0, r4
 80091f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f6:	3a30      	subs	r2, #48	; 0x30
 80091f8:	2a09      	cmp	r2, #9
 80091fa:	d903      	bls.n	8009204 <_svfiprintf_r+0x1a8>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d0c5      	beq.n	800918c <_svfiprintf_r+0x130>
 8009200:	9105      	str	r1, [sp, #20]
 8009202:	e7c3      	b.n	800918c <_svfiprintf_r+0x130>
 8009204:	fb0c 2101 	mla	r1, ip, r1, r2
 8009208:	4604      	mov	r4, r0
 800920a:	2301      	movs	r3, #1
 800920c:	e7f0      	b.n	80091f0 <_svfiprintf_r+0x194>
 800920e:	ab03      	add	r3, sp, #12
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	462a      	mov	r2, r5
 8009214:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <_svfiprintf_r+0x1f8>)
 8009216:	a904      	add	r1, sp, #16
 8009218:	4638      	mov	r0, r7
 800921a:	f3af 8000 	nop.w
 800921e:	1c42      	adds	r2, r0, #1
 8009220:	4606      	mov	r6, r0
 8009222:	d1d6      	bne.n	80091d2 <_svfiprintf_r+0x176>
 8009224:	89ab      	ldrh	r3, [r5, #12]
 8009226:	065b      	lsls	r3, r3, #25
 8009228:	f53f af2c 	bmi.w	8009084 <_svfiprintf_r+0x28>
 800922c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800922e:	b01d      	add	sp, #116	; 0x74
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	462a      	mov	r2, r5
 800923a:	4b06      	ldr	r3, [pc, #24]	; (8009254 <_svfiprintf_r+0x1f8>)
 800923c:	a904      	add	r1, sp, #16
 800923e:	4638      	mov	r0, r7
 8009240:	f000 f9d4 	bl	80095ec <_printf_i>
 8009244:	e7eb      	b.n	800921e <_svfiprintf_r+0x1c2>
 8009246:	bf00      	nop
 8009248:	0800bc03 	.word	0x0800bc03
 800924c:	0800bc0d 	.word	0x0800bc0d
 8009250:	00000000 	.word	0x00000000
 8009254:	08008fa5 	.word	0x08008fa5
 8009258:	0800bc09 	.word	0x0800bc09

0800925c <__sfputc_r>:
 800925c:	6893      	ldr	r3, [r2, #8]
 800925e:	3b01      	subs	r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	b410      	push	{r4}
 8009264:	6093      	str	r3, [r2, #8]
 8009266:	da08      	bge.n	800927a <__sfputc_r+0x1e>
 8009268:	6994      	ldr	r4, [r2, #24]
 800926a:	42a3      	cmp	r3, r4
 800926c:	db01      	blt.n	8009272 <__sfputc_r+0x16>
 800926e:	290a      	cmp	r1, #10
 8009270:	d103      	bne.n	800927a <__sfputc_r+0x1e>
 8009272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009276:	f000 baef 	b.w	8009858 <__swbuf_r>
 800927a:	6813      	ldr	r3, [r2, #0]
 800927c:	1c58      	adds	r0, r3, #1
 800927e:	6010      	str	r0, [r2, #0]
 8009280:	7019      	strb	r1, [r3, #0]
 8009282:	4608      	mov	r0, r1
 8009284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009288:	4770      	bx	lr

0800928a <__sfputs_r>:
 800928a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	4614      	mov	r4, r2
 8009292:	18d5      	adds	r5, r2, r3
 8009294:	42ac      	cmp	r4, r5
 8009296:	d101      	bne.n	800929c <__sfputs_r+0x12>
 8009298:	2000      	movs	r0, #0
 800929a:	e007      	b.n	80092ac <__sfputs_r+0x22>
 800929c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a0:	463a      	mov	r2, r7
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff ffda 	bl	800925c <__sfputc_r>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d1f3      	bne.n	8009294 <__sfputs_r+0xa>
 80092ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092b0 <_vfiprintf_r>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	460d      	mov	r5, r1
 80092b6:	b09d      	sub	sp, #116	; 0x74
 80092b8:	4614      	mov	r4, r2
 80092ba:	4698      	mov	r8, r3
 80092bc:	4606      	mov	r6, r0
 80092be:	b118      	cbz	r0, 80092c8 <_vfiprintf_r+0x18>
 80092c0:	6983      	ldr	r3, [r0, #24]
 80092c2:	b90b      	cbnz	r3, 80092c8 <_vfiprintf_r+0x18>
 80092c4:	f000 fcaa 	bl	8009c1c <__sinit>
 80092c8:	4b89      	ldr	r3, [pc, #548]	; (80094f0 <_vfiprintf_r+0x240>)
 80092ca:	429d      	cmp	r5, r3
 80092cc:	d11b      	bne.n	8009306 <_vfiprintf_r+0x56>
 80092ce:	6875      	ldr	r5, [r6, #4]
 80092d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d2:	07d9      	lsls	r1, r3, #31
 80092d4:	d405      	bmi.n	80092e2 <_vfiprintf_r+0x32>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	059a      	lsls	r2, r3, #22
 80092da:	d402      	bmi.n	80092e2 <_vfiprintf_r+0x32>
 80092dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092de:	f000 fd3b 	bl	8009d58 <__retarget_lock_acquire_recursive>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	071b      	lsls	r3, r3, #28
 80092e6:	d501      	bpl.n	80092ec <_vfiprintf_r+0x3c>
 80092e8:	692b      	ldr	r3, [r5, #16]
 80092ea:	b9eb      	cbnz	r3, 8009328 <_vfiprintf_r+0x78>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 fb04 	bl	80098fc <__swsetup_r>
 80092f4:	b1c0      	cbz	r0, 8009328 <_vfiprintf_r+0x78>
 80092f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f8:	07dc      	lsls	r4, r3, #31
 80092fa:	d50e      	bpl.n	800931a <_vfiprintf_r+0x6a>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	b01d      	add	sp, #116	; 0x74
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	4b7b      	ldr	r3, [pc, #492]	; (80094f4 <_vfiprintf_r+0x244>)
 8009308:	429d      	cmp	r5, r3
 800930a:	d101      	bne.n	8009310 <_vfiprintf_r+0x60>
 800930c:	68b5      	ldr	r5, [r6, #8]
 800930e:	e7df      	b.n	80092d0 <_vfiprintf_r+0x20>
 8009310:	4b79      	ldr	r3, [pc, #484]	; (80094f8 <_vfiprintf_r+0x248>)
 8009312:	429d      	cmp	r5, r3
 8009314:	bf08      	it	eq
 8009316:	68f5      	ldreq	r5, [r6, #12]
 8009318:	e7da      	b.n	80092d0 <_vfiprintf_r+0x20>
 800931a:	89ab      	ldrh	r3, [r5, #12]
 800931c:	0598      	lsls	r0, r3, #22
 800931e:	d4ed      	bmi.n	80092fc <_vfiprintf_r+0x4c>
 8009320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009322:	f000 fd1a 	bl	8009d5a <__retarget_lock_release_recursive>
 8009326:	e7e9      	b.n	80092fc <_vfiprintf_r+0x4c>
 8009328:	2300      	movs	r3, #0
 800932a:	9309      	str	r3, [sp, #36]	; 0x24
 800932c:	2320      	movs	r3, #32
 800932e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009332:	f8cd 800c 	str.w	r8, [sp, #12]
 8009336:	2330      	movs	r3, #48	; 0x30
 8009338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094fc <_vfiprintf_r+0x24c>
 800933c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009340:	f04f 0901 	mov.w	r9, #1
 8009344:	4623      	mov	r3, r4
 8009346:	469a      	mov	sl, r3
 8009348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800934c:	b10a      	cbz	r2, 8009352 <_vfiprintf_r+0xa2>
 800934e:	2a25      	cmp	r2, #37	; 0x25
 8009350:	d1f9      	bne.n	8009346 <_vfiprintf_r+0x96>
 8009352:	ebba 0b04 	subs.w	fp, sl, r4
 8009356:	d00b      	beq.n	8009370 <_vfiprintf_r+0xc0>
 8009358:	465b      	mov	r3, fp
 800935a:	4622      	mov	r2, r4
 800935c:	4629      	mov	r1, r5
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ff93 	bl	800928a <__sfputs_r>
 8009364:	3001      	adds	r0, #1
 8009366:	f000 80aa 	beq.w	80094be <_vfiprintf_r+0x20e>
 800936a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800936c:	445a      	add	r2, fp
 800936e:	9209      	str	r2, [sp, #36]	; 0x24
 8009370:	f89a 3000 	ldrb.w	r3, [sl]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80a2 	beq.w	80094be <_vfiprintf_r+0x20e>
 800937a:	2300      	movs	r3, #0
 800937c:	f04f 32ff 	mov.w	r2, #4294967295
 8009380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009384:	f10a 0a01 	add.w	sl, sl, #1
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	9307      	str	r3, [sp, #28]
 800938c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009390:	931a      	str	r3, [sp, #104]	; 0x68
 8009392:	4654      	mov	r4, sl
 8009394:	2205      	movs	r2, #5
 8009396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939a:	4858      	ldr	r0, [pc, #352]	; (80094fc <_vfiprintf_r+0x24c>)
 800939c:	f7f6 ff38 	bl	8000210 <memchr>
 80093a0:	9a04      	ldr	r2, [sp, #16]
 80093a2:	b9d8      	cbnz	r0, 80093dc <_vfiprintf_r+0x12c>
 80093a4:	06d1      	lsls	r1, r2, #27
 80093a6:	bf44      	itt	mi
 80093a8:	2320      	movmi	r3, #32
 80093aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ae:	0713      	lsls	r3, r2, #28
 80093b0:	bf44      	itt	mi
 80093b2:	232b      	movmi	r3, #43	; 0x2b
 80093b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b8:	f89a 3000 	ldrb.w	r3, [sl]
 80093bc:	2b2a      	cmp	r3, #42	; 0x2a
 80093be:	d015      	beq.n	80093ec <_vfiprintf_r+0x13c>
 80093c0:	9a07      	ldr	r2, [sp, #28]
 80093c2:	4654      	mov	r4, sl
 80093c4:	2000      	movs	r0, #0
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4621      	mov	r1, r4
 80093cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d0:	3b30      	subs	r3, #48	; 0x30
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d94e      	bls.n	8009474 <_vfiprintf_r+0x1c4>
 80093d6:	b1b0      	cbz	r0, 8009406 <_vfiprintf_r+0x156>
 80093d8:	9207      	str	r2, [sp, #28]
 80093da:	e014      	b.n	8009406 <_vfiprintf_r+0x156>
 80093dc:	eba0 0308 	sub.w	r3, r0, r8
 80093e0:	fa09 f303 	lsl.w	r3, r9, r3
 80093e4:	4313      	orrs	r3, r2
 80093e6:	9304      	str	r3, [sp, #16]
 80093e8:	46a2      	mov	sl, r4
 80093ea:	e7d2      	b.n	8009392 <_vfiprintf_r+0xe2>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	1d19      	adds	r1, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	9103      	str	r1, [sp, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bfbb      	ittet	lt
 80093f8:	425b      	neglt	r3, r3
 80093fa:	f042 0202 	orrlt.w	r2, r2, #2
 80093fe:	9307      	strge	r3, [sp, #28]
 8009400:	9307      	strlt	r3, [sp, #28]
 8009402:	bfb8      	it	lt
 8009404:	9204      	strlt	r2, [sp, #16]
 8009406:	7823      	ldrb	r3, [r4, #0]
 8009408:	2b2e      	cmp	r3, #46	; 0x2e
 800940a:	d10c      	bne.n	8009426 <_vfiprintf_r+0x176>
 800940c:	7863      	ldrb	r3, [r4, #1]
 800940e:	2b2a      	cmp	r3, #42	; 0x2a
 8009410:	d135      	bne.n	800947e <_vfiprintf_r+0x1ce>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	1d1a      	adds	r2, r3, #4
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	9203      	str	r2, [sp, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfb8      	it	lt
 800941e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009422:	3402      	adds	r4, #2
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800950c <_vfiprintf_r+0x25c>
 800942a:	7821      	ldrb	r1, [r4, #0]
 800942c:	2203      	movs	r2, #3
 800942e:	4650      	mov	r0, sl
 8009430:	f7f6 feee 	bl	8000210 <memchr>
 8009434:	b140      	cbz	r0, 8009448 <_vfiprintf_r+0x198>
 8009436:	2340      	movs	r3, #64	; 0x40
 8009438:	eba0 000a 	sub.w	r0, r0, sl
 800943c:	fa03 f000 	lsl.w	r0, r3, r0
 8009440:	9b04      	ldr	r3, [sp, #16]
 8009442:	4303      	orrs	r3, r0
 8009444:	3401      	adds	r4, #1
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944c:	482c      	ldr	r0, [pc, #176]	; (8009500 <_vfiprintf_r+0x250>)
 800944e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009452:	2206      	movs	r2, #6
 8009454:	f7f6 fedc 	bl	8000210 <memchr>
 8009458:	2800      	cmp	r0, #0
 800945a:	d03f      	beq.n	80094dc <_vfiprintf_r+0x22c>
 800945c:	4b29      	ldr	r3, [pc, #164]	; (8009504 <_vfiprintf_r+0x254>)
 800945e:	bb1b      	cbnz	r3, 80094a8 <_vfiprintf_r+0x1f8>
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	3307      	adds	r3, #7
 8009464:	f023 0307 	bic.w	r3, r3, #7
 8009468:	3308      	adds	r3, #8
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946e:	443b      	add	r3, r7
 8009470:	9309      	str	r3, [sp, #36]	; 0x24
 8009472:	e767      	b.n	8009344 <_vfiprintf_r+0x94>
 8009474:	fb0c 3202 	mla	r2, ip, r2, r3
 8009478:	460c      	mov	r4, r1
 800947a:	2001      	movs	r0, #1
 800947c:	e7a5      	b.n	80093ca <_vfiprintf_r+0x11a>
 800947e:	2300      	movs	r3, #0
 8009480:	3401      	adds	r4, #1
 8009482:	9305      	str	r3, [sp, #20]
 8009484:	4619      	mov	r1, r3
 8009486:	f04f 0c0a 	mov.w	ip, #10
 800948a:	4620      	mov	r0, r4
 800948c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009490:	3a30      	subs	r2, #48	; 0x30
 8009492:	2a09      	cmp	r2, #9
 8009494:	d903      	bls.n	800949e <_vfiprintf_r+0x1ee>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c5      	beq.n	8009426 <_vfiprintf_r+0x176>
 800949a:	9105      	str	r1, [sp, #20]
 800949c:	e7c3      	b.n	8009426 <_vfiprintf_r+0x176>
 800949e:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a2:	4604      	mov	r4, r0
 80094a4:	2301      	movs	r3, #1
 80094a6:	e7f0      	b.n	800948a <_vfiprintf_r+0x1da>
 80094a8:	ab03      	add	r3, sp, #12
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	462a      	mov	r2, r5
 80094ae:	4b16      	ldr	r3, [pc, #88]	; (8009508 <_vfiprintf_r+0x258>)
 80094b0:	a904      	add	r1, sp, #16
 80094b2:	4630      	mov	r0, r6
 80094b4:	f3af 8000 	nop.w
 80094b8:	4607      	mov	r7, r0
 80094ba:	1c78      	adds	r0, r7, #1
 80094bc:	d1d6      	bne.n	800946c <_vfiprintf_r+0x1bc>
 80094be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094c0:	07d9      	lsls	r1, r3, #31
 80094c2:	d405      	bmi.n	80094d0 <_vfiprintf_r+0x220>
 80094c4:	89ab      	ldrh	r3, [r5, #12]
 80094c6:	059a      	lsls	r2, r3, #22
 80094c8:	d402      	bmi.n	80094d0 <_vfiprintf_r+0x220>
 80094ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094cc:	f000 fc45 	bl	8009d5a <__retarget_lock_release_recursive>
 80094d0:	89ab      	ldrh	r3, [r5, #12]
 80094d2:	065b      	lsls	r3, r3, #25
 80094d4:	f53f af12 	bmi.w	80092fc <_vfiprintf_r+0x4c>
 80094d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094da:	e711      	b.n	8009300 <_vfiprintf_r+0x50>
 80094dc:	ab03      	add	r3, sp, #12
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	462a      	mov	r2, r5
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <_vfiprintf_r+0x258>)
 80094e4:	a904      	add	r1, sp, #16
 80094e6:	4630      	mov	r0, r6
 80094e8:	f000 f880 	bl	80095ec <_printf_i>
 80094ec:	e7e4      	b.n	80094b8 <_vfiprintf_r+0x208>
 80094ee:	bf00      	nop
 80094f0:	0800bc58 	.word	0x0800bc58
 80094f4:	0800bc78 	.word	0x0800bc78
 80094f8:	0800bc38 	.word	0x0800bc38
 80094fc:	0800bc03 	.word	0x0800bc03
 8009500:	0800bc0d 	.word	0x0800bc0d
 8009504:	00000000 	.word	0x00000000
 8009508:	0800928b 	.word	0x0800928b
 800950c:	0800bc09 	.word	0x0800bc09

08009510 <_printf_common>:
 8009510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	4616      	mov	r6, r2
 8009516:	4699      	mov	r9, r3
 8009518:	688a      	ldr	r2, [r1, #8]
 800951a:	690b      	ldr	r3, [r1, #16]
 800951c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009520:	4293      	cmp	r3, r2
 8009522:	bfb8      	it	lt
 8009524:	4613      	movlt	r3, r2
 8009526:	6033      	str	r3, [r6, #0]
 8009528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800952c:	4607      	mov	r7, r0
 800952e:	460c      	mov	r4, r1
 8009530:	b10a      	cbz	r2, 8009536 <_printf_common+0x26>
 8009532:	3301      	adds	r3, #1
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	0699      	lsls	r1, r3, #26
 800953a:	bf42      	ittt	mi
 800953c:	6833      	ldrmi	r3, [r6, #0]
 800953e:	3302      	addmi	r3, #2
 8009540:	6033      	strmi	r3, [r6, #0]
 8009542:	6825      	ldr	r5, [r4, #0]
 8009544:	f015 0506 	ands.w	r5, r5, #6
 8009548:	d106      	bne.n	8009558 <_printf_common+0x48>
 800954a:	f104 0a19 	add.w	sl, r4, #25
 800954e:	68e3      	ldr	r3, [r4, #12]
 8009550:	6832      	ldr	r2, [r6, #0]
 8009552:	1a9b      	subs	r3, r3, r2
 8009554:	42ab      	cmp	r3, r5
 8009556:	dc26      	bgt.n	80095a6 <_printf_common+0x96>
 8009558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800955c:	1e13      	subs	r3, r2, #0
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	bf18      	it	ne
 8009562:	2301      	movne	r3, #1
 8009564:	0692      	lsls	r2, r2, #26
 8009566:	d42b      	bmi.n	80095c0 <_printf_common+0xb0>
 8009568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800956c:	4649      	mov	r1, r9
 800956e:	4638      	mov	r0, r7
 8009570:	47c0      	blx	r8
 8009572:	3001      	adds	r0, #1
 8009574:	d01e      	beq.n	80095b4 <_printf_common+0xa4>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	68e5      	ldr	r5, [r4, #12]
 800957a:	6832      	ldr	r2, [r6, #0]
 800957c:	f003 0306 	and.w	r3, r3, #6
 8009580:	2b04      	cmp	r3, #4
 8009582:	bf08      	it	eq
 8009584:	1aad      	subeq	r5, r5, r2
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	6922      	ldr	r2, [r4, #16]
 800958a:	bf0c      	ite	eq
 800958c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009590:	2500      	movne	r5, #0
 8009592:	4293      	cmp	r3, r2
 8009594:	bfc4      	itt	gt
 8009596:	1a9b      	subgt	r3, r3, r2
 8009598:	18ed      	addgt	r5, r5, r3
 800959a:	2600      	movs	r6, #0
 800959c:	341a      	adds	r4, #26
 800959e:	42b5      	cmp	r5, r6
 80095a0:	d11a      	bne.n	80095d8 <_printf_common+0xc8>
 80095a2:	2000      	movs	r0, #0
 80095a4:	e008      	b.n	80095b8 <_printf_common+0xa8>
 80095a6:	2301      	movs	r3, #1
 80095a8:	4652      	mov	r2, sl
 80095aa:	4649      	mov	r1, r9
 80095ac:	4638      	mov	r0, r7
 80095ae:	47c0      	blx	r8
 80095b0:	3001      	adds	r0, #1
 80095b2:	d103      	bne.n	80095bc <_printf_common+0xac>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095bc:	3501      	adds	r5, #1
 80095be:	e7c6      	b.n	800954e <_printf_common+0x3e>
 80095c0:	18e1      	adds	r1, r4, r3
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	2030      	movs	r0, #48	; 0x30
 80095c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ca:	4422      	add	r2, r4
 80095cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095d4:	3302      	adds	r3, #2
 80095d6:	e7c7      	b.n	8009568 <_printf_common+0x58>
 80095d8:	2301      	movs	r3, #1
 80095da:	4622      	mov	r2, r4
 80095dc:	4649      	mov	r1, r9
 80095de:	4638      	mov	r0, r7
 80095e0:	47c0      	blx	r8
 80095e2:	3001      	adds	r0, #1
 80095e4:	d0e6      	beq.n	80095b4 <_printf_common+0xa4>
 80095e6:	3601      	adds	r6, #1
 80095e8:	e7d9      	b.n	800959e <_printf_common+0x8e>
	...

080095ec <_printf_i>:
 80095ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095f0:	7e0f      	ldrb	r7, [r1, #24]
 80095f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095f4:	2f78      	cmp	r7, #120	; 0x78
 80095f6:	4691      	mov	r9, r2
 80095f8:	4680      	mov	r8, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	469a      	mov	sl, r3
 80095fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009602:	d807      	bhi.n	8009614 <_printf_i+0x28>
 8009604:	2f62      	cmp	r7, #98	; 0x62
 8009606:	d80a      	bhi.n	800961e <_printf_i+0x32>
 8009608:	2f00      	cmp	r7, #0
 800960a:	f000 80d8 	beq.w	80097be <_printf_i+0x1d2>
 800960e:	2f58      	cmp	r7, #88	; 0x58
 8009610:	f000 80a3 	beq.w	800975a <_printf_i+0x16e>
 8009614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800961c:	e03a      	b.n	8009694 <_printf_i+0xa8>
 800961e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009622:	2b15      	cmp	r3, #21
 8009624:	d8f6      	bhi.n	8009614 <_printf_i+0x28>
 8009626:	a101      	add	r1, pc, #4	; (adr r1, 800962c <_printf_i+0x40>)
 8009628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800962c:	08009685 	.word	0x08009685
 8009630:	08009699 	.word	0x08009699
 8009634:	08009615 	.word	0x08009615
 8009638:	08009615 	.word	0x08009615
 800963c:	08009615 	.word	0x08009615
 8009640:	08009615 	.word	0x08009615
 8009644:	08009699 	.word	0x08009699
 8009648:	08009615 	.word	0x08009615
 800964c:	08009615 	.word	0x08009615
 8009650:	08009615 	.word	0x08009615
 8009654:	08009615 	.word	0x08009615
 8009658:	080097a5 	.word	0x080097a5
 800965c:	080096c9 	.word	0x080096c9
 8009660:	08009787 	.word	0x08009787
 8009664:	08009615 	.word	0x08009615
 8009668:	08009615 	.word	0x08009615
 800966c:	080097c7 	.word	0x080097c7
 8009670:	08009615 	.word	0x08009615
 8009674:	080096c9 	.word	0x080096c9
 8009678:	08009615 	.word	0x08009615
 800967c:	08009615 	.word	0x08009615
 8009680:	0800978f 	.word	0x0800978f
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	1d1a      	adds	r2, r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	602a      	str	r2, [r5, #0]
 800968c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009694:	2301      	movs	r3, #1
 8009696:	e0a3      	b.n	80097e0 <_printf_i+0x1f4>
 8009698:	6820      	ldr	r0, [r4, #0]
 800969a:	6829      	ldr	r1, [r5, #0]
 800969c:	0606      	lsls	r6, r0, #24
 800969e:	f101 0304 	add.w	r3, r1, #4
 80096a2:	d50a      	bpl.n	80096ba <_printf_i+0xce>
 80096a4:	680e      	ldr	r6, [r1, #0]
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	da03      	bge.n	80096b4 <_printf_i+0xc8>
 80096ac:	232d      	movs	r3, #45	; 0x2d
 80096ae:	4276      	negs	r6, r6
 80096b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b4:	485e      	ldr	r0, [pc, #376]	; (8009830 <_printf_i+0x244>)
 80096b6:	230a      	movs	r3, #10
 80096b8:	e019      	b.n	80096ee <_printf_i+0x102>
 80096ba:	680e      	ldr	r6, [r1, #0]
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096c2:	bf18      	it	ne
 80096c4:	b236      	sxthne	r6, r6
 80096c6:	e7ef      	b.n	80096a8 <_printf_i+0xbc>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	6820      	ldr	r0, [r4, #0]
 80096cc:	1d19      	adds	r1, r3, #4
 80096ce:	6029      	str	r1, [r5, #0]
 80096d0:	0601      	lsls	r1, r0, #24
 80096d2:	d501      	bpl.n	80096d8 <_printf_i+0xec>
 80096d4:	681e      	ldr	r6, [r3, #0]
 80096d6:	e002      	b.n	80096de <_printf_i+0xf2>
 80096d8:	0646      	lsls	r6, r0, #25
 80096da:	d5fb      	bpl.n	80096d4 <_printf_i+0xe8>
 80096dc:	881e      	ldrh	r6, [r3, #0]
 80096de:	4854      	ldr	r0, [pc, #336]	; (8009830 <_printf_i+0x244>)
 80096e0:	2f6f      	cmp	r7, #111	; 0x6f
 80096e2:	bf0c      	ite	eq
 80096e4:	2308      	moveq	r3, #8
 80096e6:	230a      	movne	r3, #10
 80096e8:	2100      	movs	r1, #0
 80096ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096ee:	6865      	ldr	r5, [r4, #4]
 80096f0:	60a5      	str	r5, [r4, #8]
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	bfa2      	ittt	ge
 80096f6:	6821      	ldrge	r1, [r4, #0]
 80096f8:	f021 0104 	bicge.w	r1, r1, #4
 80096fc:	6021      	strge	r1, [r4, #0]
 80096fe:	b90e      	cbnz	r6, 8009704 <_printf_i+0x118>
 8009700:	2d00      	cmp	r5, #0
 8009702:	d04d      	beq.n	80097a0 <_printf_i+0x1b4>
 8009704:	4615      	mov	r5, r2
 8009706:	fbb6 f1f3 	udiv	r1, r6, r3
 800970a:	fb03 6711 	mls	r7, r3, r1, r6
 800970e:	5dc7      	ldrb	r7, [r0, r7]
 8009710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009714:	4637      	mov	r7, r6
 8009716:	42bb      	cmp	r3, r7
 8009718:	460e      	mov	r6, r1
 800971a:	d9f4      	bls.n	8009706 <_printf_i+0x11a>
 800971c:	2b08      	cmp	r3, #8
 800971e:	d10b      	bne.n	8009738 <_printf_i+0x14c>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	07de      	lsls	r6, r3, #31
 8009724:	d508      	bpl.n	8009738 <_printf_i+0x14c>
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	6861      	ldr	r1, [r4, #4]
 800972a:	4299      	cmp	r1, r3
 800972c:	bfde      	ittt	le
 800972e:	2330      	movle	r3, #48	; 0x30
 8009730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009734:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009738:	1b52      	subs	r2, r2, r5
 800973a:	6122      	str	r2, [r4, #16]
 800973c:	f8cd a000 	str.w	sl, [sp]
 8009740:	464b      	mov	r3, r9
 8009742:	aa03      	add	r2, sp, #12
 8009744:	4621      	mov	r1, r4
 8009746:	4640      	mov	r0, r8
 8009748:	f7ff fee2 	bl	8009510 <_printf_common>
 800974c:	3001      	adds	r0, #1
 800974e:	d14c      	bne.n	80097ea <_printf_i+0x1fe>
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	b004      	add	sp, #16
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	4835      	ldr	r0, [pc, #212]	; (8009830 <_printf_i+0x244>)
 800975c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009760:	6829      	ldr	r1, [r5, #0]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	f851 6b04 	ldr.w	r6, [r1], #4
 8009768:	6029      	str	r1, [r5, #0]
 800976a:	061d      	lsls	r5, r3, #24
 800976c:	d514      	bpl.n	8009798 <_printf_i+0x1ac>
 800976e:	07df      	lsls	r7, r3, #31
 8009770:	bf44      	itt	mi
 8009772:	f043 0320 	orrmi.w	r3, r3, #32
 8009776:	6023      	strmi	r3, [r4, #0]
 8009778:	b91e      	cbnz	r6, 8009782 <_printf_i+0x196>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	f023 0320 	bic.w	r3, r3, #32
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	2310      	movs	r3, #16
 8009784:	e7b0      	b.n	80096e8 <_printf_i+0xfc>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	f043 0320 	orr.w	r3, r3, #32
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	2378      	movs	r3, #120	; 0x78
 8009790:	4828      	ldr	r0, [pc, #160]	; (8009834 <_printf_i+0x248>)
 8009792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009796:	e7e3      	b.n	8009760 <_printf_i+0x174>
 8009798:	0659      	lsls	r1, r3, #25
 800979a:	bf48      	it	mi
 800979c:	b2b6      	uxthmi	r6, r6
 800979e:	e7e6      	b.n	800976e <_printf_i+0x182>
 80097a0:	4615      	mov	r5, r2
 80097a2:	e7bb      	b.n	800971c <_printf_i+0x130>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	6826      	ldr	r6, [r4, #0]
 80097a8:	6961      	ldr	r1, [r4, #20]
 80097aa:	1d18      	adds	r0, r3, #4
 80097ac:	6028      	str	r0, [r5, #0]
 80097ae:	0635      	lsls	r5, r6, #24
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	d501      	bpl.n	80097b8 <_printf_i+0x1cc>
 80097b4:	6019      	str	r1, [r3, #0]
 80097b6:	e002      	b.n	80097be <_printf_i+0x1d2>
 80097b8:	0670      	lsls	r0, r6, #25
 80097ba:	d5fb      	bpl.n	80097b4 <_printf_i+0x1c8>
 80097bc:	8019      	strh	r1, [r3, #0]
 80097be:	2300      	movs	r3, #0
 80097c0:	6123      	str	r3, [r4, #16]
 80097c2:	4615      	mov	r5, r2
 80097c4:	e7ba      	b.n	800973c <_printf_i+0x150>
 80097c6:	682b      	ldr	r3, [r5, #0]
 80097c8:	1d1a      	adds	r2, r3, #4
 80097ca:	602a      	str	r2, [r5, #0]
 80097cc:	681d      	ldr	r5, [r3, #0]
 80097ce:	6862      	ldr	r2, [r4, #4]
 80097d0:	2100      	movs	r1, #0
 80097d2:	4628      	mov	r0, r5
 80097d4:	f7f6 fd1c 	bl	8000210 <memchr>
 80097d8:	b108      	cbz	r0, 80097de <_printf_i+0x1f2>
 80097da:	1b40      	subs	r0, r0, r5
 80097dc:	6060      	str	r0, [r4, #4]
 80097de:	6863      	ldr	r3, [r4, #4]
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	2300      	movs	r3, #0
 80097e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e8:	e7a8      	b.n	800973c <_printf_i+0x150>
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	462a      	mov	r2, r5
 80097ee:	4649      	mov	r1, r9
 80097f0:	4640      	mov	r0, r8
 80097f2:	47d0      	blx	sl
 80097f4:	3001      	adds	r0, #1
 80097f6:	d0ab      	beq.n	8009750 <_printf_i+0x164>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	079b      	lsls	r3, r3, #30
 80097fc:	d413      	bmi.n	8009826 <_printf_i+0x23a>
 80097fe:	68e0      	ldr	r0, [r4, #12]
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	4298      	cmp	r0, r3
 8009804:	bfb8      	it	lt
 8009806:	4618      	movlt	r0, r3
 8009808:	e7a4      	b.n	8009754 <_printf_i+0x168>
 800980a:	2301      	movs	r3, #1
 800980c:	4632      	mov	r2, r6
 800980e:	4649      	mov	r1, r9
 8009810:	4640      	mov	r0, r8
 8009812:	47d0      	blx	sl
 8009814:	3001      	adds	r0, #1
 8009816:	d09b      	beq.n	8009750 <_printf_i+0x164>
 8009818:	3501      	adds	r5, #1
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	9903      	ldr	r1, [sp, #12]
 800981e:	1a5b      	subs	r3, r3, r1
 8009820:	42ab      	cmp	r3, r5
 8009822:	dcf2      	bgt.n	800980a <_printf_i+0x21e>
 8009824:	e7eb      	b.n	80097fe <_printf_i+0x212>
 8009826:	2500      	movs	r5, #0
 8009828:	f104 0619 	add.w	r6, r4, #25
 800982c:	e7f5      	b.n	800981a <_printf_i+0x22e>
 800982e:	bf00      	nop
 8009830:	0800bc14 	.word	0x0800bc14
 8009834:	0800bc25 	.word	0x0800bc25

08009838 <_sbrk_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d06      	ldr	r5, [pc, #24]	; (8009854 <_sbrk_r+0x1c>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f9 ffb0 	bl	80037a8 <_sbrk>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_sbrk_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_sbrk_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20008a14 	.word	0x20008a14

08009858 <__swbuf_r>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	460e      	mov	r6, r1
 800985c:	4614      	mov	r4, r2
 800985e:	4605      	mov	r5, r0
 8009860:	b118      	cbz	r0, 800986a <__swbuf_r+0x12>
 8009862:	6983      	ldr	r3, [r0, #24]
 8009864:	b90b      	cbnz	r3, 800986a <__swbuf_r+0x12>
 8009866:	f000 f9d9 	bl	8009c1c <__sinit>
 800986a:	4b21      	ldr	r3, [pc, #132]	; (80098f0 <__swbuf_r+0x98>)
 800986c:	429c      	cmp	r4, r3
 800986e:	d12b      	bne.n	80098c8 <__swbuf_r+0x70>
 8009870:	686c      	ldr	r4, [r5, #4]
 8009872:	69a3      	ldr	r3, [r4, #24]
 8009874:	60a3      	str	r3, [r4, #8]
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	071a      	lsls	r2, r3, #28
 800987a:	d52f      	bpl.n	80098dc <__swbuf_r+0x84>
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	b36b      	cbz	r3, 80098dc <__swbuf_r+0x84>
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	6820      	ldr	r0, [r4, #0]
 8009884:	1ac0      	subs	r0, r0, r3
 8009886:	6963      	ldr	r3, [r4, #20]
 8009888:	b2f6      	uxtb	r6, r6
 800988a:	4283      	cmp	r3, r0
 800988c:	4637      	mov	r7, r6
 800988e:	dc04      	bgt.n	800989a <__swbuf_r+0x42>
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f000 f92e 	bl	8009af4 <_fflush_r>
 8009898:	bb30      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	60a3      	str	r3, [r4, #8]
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	701e      	strb	r6, [r3, #0]
 80098a8:	6963      	ldr	r3, [r4, #20]
 80098aa:	3001      	adds	r0, #1
 80098ac:	4283      	cmp	r3, r0
 80098ae:	d004      	beq.n	80098ba <__swbuf_r+0x62>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d506      	bpl.n	80098c4 <__swbuf_r+0x6c>
 80098b6:	2e0a      	cmp	r6, #10
 80098b8:	d104      	bne.n	80098c4 <__swbuf_r+0x6c>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 f919 	bl	8009af4 <_fflush_r>
 80098c2:	b988      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 80098c4:	4638      	mov	r0, r7
 80098c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <__swbuf_r+0x9c>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <__swbuf_r+0x7a>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7cf      	b.n	8009872 <__swbuf_r+0x1a>
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <__swbuf_r+0xa0>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7ca      	b.n	8009872 <__swbuf_r+0x1a>
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f80c 	bl	80098fc <__swsetup_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d0cb      	beq.n	8009880 <__swbuf_r+0x28>
 80098e8:	f04f 37ff 	mov.w	r7, #4294967295
 80098ec:	e7ea      	b.n	80098c4 <__swbuf_r+0x6c>
 80098ee:	bf00      	nop
 80098f0:	0800bc58 	.word	0x0800bc58
 80098f4:	0800bc78 	.word	0x0800bc78
 80098f8:	0800bc38 	.word	0x0800bc38

080098fc <__swsetup_r>:
 80098fc:	4b32      	ldr	r3, [pc, #200]	; (80099c8 <__swsetup_r+0xcc>)
 80098fe:	b570      	push	{r4, r5, r6, lr}
 8009900:	681d      	ldr	r5, [r3, #0]
 8009902:	4606      	mov	r6, r0
 8009904:	460c      	mov	r4, r1
 8009906:	b125      	cbz	r5, 8009912 <__swsetup_r+0x16>
 8009908:	69ab      	ldr	r3, [r5, #24]
 800990a:	b913      	cbnz	r3, 8009912 <__swsetup_r+0x16>
 800990c:	4628      	mov	r0, r5
 800990e:	f000 f985 	bl	8009c1c <__sinit>
 8009912:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <__swsetup_r+0xd0>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d10f      	bne.n	8009938 <__swsetup_r+0x3c>
 8009918:	686c      	ldr	r4, [r5, #4]
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009920:	0719      	lsls	r1, r3, #28
 8009922:	d42c      	bmi.n	800997e <__swsetup_r+0x82>
 8009924:	06dd      	lsls	r5, r3, #27
 8009926:	d411      	bmi.n	800994c <__swsetup_r+0x50>
 8009928:	2309      	movs	r3, #9
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	e03e      	b.n	80099b6 <__swsetup_r+0xba>
 8009938:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <__swsetup_r+0xd4>)
 800993a:	429c      	cmp	r4, r3
 800993c:	d101      	bne.n	8009942 <__swsetup_r+0x46>
 800993e:	68ac      	ldr	r4, [r5, #8]
 8009940:	e7eb      	b.n	800991a <__swsetup_r+0x1e>
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <__swsetup_r+0xd8>)
 8009944:	429c      	cmp	r4, r3
 8009946:	bf08      	it	eq
 8009948:	68ec      	ldreq	r4, [r5, #12]
 800994a:	e7e6      	b.n	800991a <__swsetup_r+0x1e>
 800994c:	0758      	lsls	r0, r3, #29
 800994e:	d512      	bpl.n	8009976 <__swsetup_r+0x7a>
 8009950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009952:	b141      	cbz	r1, 8009966 <__swsetup_r+0x6a>
 8009954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009958:	4299      	cmp	r1, r3
 800995a:	d002      	beq.n	8009962 <__swsetup_r+0x66>
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff fa41 	bl	8008de4 <_free_r>
 8009962:	2300      	movs	r3, #0
 8009964:	6363      	str	r3, [r4, #52]	; 0x34
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	2300      	movs	r3, #0
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f043 0308 	orr.w	r3, r3, #8
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	b94b      	cbnz	r3, 8009996 <__swsetup_r+0x9a>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800998c:	d003      	beq.n	8009996 <__swsetup_r+0x9a>
 800998e:	4621      	mov	r1, r4
 8009990:	4630      	mov	r0, r6
 8009992:	f000 fa09 	bl	8009da8 <__smakebuf_r>
 8009996:	89a0      	ldrh	r0, [r4, #12]
 8009998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800999c:	f010 0301 	ands.w	r3, r0, #1
 80099a0:	d00a      	beq.n	80099b8 <__swsetup_r+0xbc>
 80099a2:	2300      	movs	r3, #0
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	6963      	ldr	r3, [r4, #20]
 80099a8:	425b      	negs	r3, r3
 80099aa:	61a3      	str	r3, [r4, #24]
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	b943      	cbnz	r3, 80099c2 <__swsetup_r+0xc6>
 80099b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099b4:	d1ba      	bne.n	800992c <__swsetup_r+0x30>
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	0781      	lsls	r1, r0, #30
 80099ba:	bf58      	it	pl
 80099bc:	6963      	ldrpl	r3, [r4, #20]
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	e7f4      	b.n	80099ac <__swsetup_r+0xb0>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e7f7      	b.n	80099b6 <__swsetup_r+0xba>
 80099c6:	bf00      	nop
 80099c8:	20000430 	.word	0x20000430
 80099cc:	0800bc58 	.word	0x0800bc58
 80099d0:	0800bc78 	.word	0x0800bc78
 80099d4:	0800bc38 	.word	0x0800bc38

080099d8 <abort>:
 80099d8:	b508      	push	{r3, lr}
 80099da:	2006      	movs	r0, #6
 80099dc:	f000 faa2 	bl	8009f24 <raise>
 80099e0:	2001      	movs	r0, #1
 80099e2:	f7f9 fe69 	bl	80036b8 <_exit>
	...

080099e8 <__sflush_r>:
 80099e8:	898a      	ldrh	r2, [r1, #12]
 80099ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ee:	4605      	mov	r5, r0
 80099f0:	0710      	lsls	r0, r2, #28
 80099f2:	460c      	mov	r4, r1
 80099f4:	d458      	bmi.n	8009aa8 <__sflush_r+0xc0>
 80099f6:	684b      	ldr	r3, [r1, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dc05      	bgt.n	8009a08 <__sflush_r+0x20>
 80099fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dc02      	bgt.n	8009a08 <__sflush_r+0x20>
 8009a02:	2000      	movs	r0, #0
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a0a:	2e00      	cmp	r6, #0
 8009a0c:	d0f9      	beq.n	8009a02 <__sflush_r+0x1a>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a14:	682f      	ldr	r7, [r5, #0]
 8009a16:	602b      	str	r3, [r5, #0]
 8009a18:	d032      	beq.n	8009a80 <__sflush_r+0x98>
 8009a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	075a      	lsls	r2, r3, #29
 8009a20:	d505      	bpl.n	8009a2e <__sflush_r+0x46>
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	1ac0      	subs	r0, r0, r3
 8009a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a28:	b10b      	cbz	r3, 8009a2e <__sflush_r+0x46>
 8009a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a2c:	1ac0      	subs	r0, r0, r3
 8009a2e:	2300      	movs	r3, #0
 8009a30:	4602      	mov	r2, r0
 8009a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a34:	6a21      	ldr	r1, [r4, #32]
 8009a36:	4628      	mov	r0, r5
 8009a38:	47b0      	blx	r6
 8009a3a:	1c43      	adds	r3, r0, #1
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	d106      	bne.n	8009a4e <__sflush_r+0x66>
 8009a40:	6829      	ldr	r1, [r5, #0]
 8009a42:	291d      	cmp	r1, #29
 8009a44:	d82c      	bhi.n	8009aa0 <__sflush_r+0xb8>
 8009a46:	4a2a      	ldr	r2, [pc, #168]	; (8009af0 <__sflush_r+0x108>)
 8009a48:	40ca      	lsrs	r2, r1
 8009a4a:	07d6      	lsls	r6, r2, #31
 8009a4c:	d528      	bpl.n	8009aa0 <__sflush_r+0xb8>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	6062      	str	r2, [r4, #4]
 8009a52:	04d9      	lsls	r1, r3, #19
 8009a54:	6922      	ldr	r2, [r4, #16]
 8009a56:	6022      	str	r2, [r4, #0]
 8009a58:	d504      	bpl.n	8009a64 <__sflush_r+0x7c>
 8009a5a:	1c42      	adds	r2, r0, #1
 8009a5c:	d101      	bne.n	8009a62 <__sflush_r+0x7a>
 8009a5e:	682b      	ldr	r3, [r5, #0]
 8009a60:	b903      	cbnz	r3, 8009a64 <__sflush_r+0x7c>
 8009a62:	6560      	str	r0, [r4, #84]	; 0x54
 8009a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a66:	602f      	str	r7, [r5, #0]
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	d0ca      	beq.n	8009a02 <__sflush_r+0x1a>
 8009a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a70:	4299      	cmp	r1, r3
 8009a72:	d002      	beq.n	8009a7a <__sflush_r+0x92>
 8009a74:	4628      	mov	r0, r5
 8009a76:	f7ff f9b5 	bl	8008de4 <_free_r>
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a7e:	e7c1      	b.n	8009a04 <__sflush_r+0x1c>
 8009a80:	6a21      	ldr	r1, [r4, #32]
 8009a82:	2301      	movs	r3, #1
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b0      	blx	r6
 8009a88:	1c41      	adds	r1, r0, #1
 8009a8a:	d1c7      	bne.n	8009a1c <__sflush_r+0x34>
 8009a8c:	682b      	ldr	r3, [r5, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0c4      	beq.n	8009a1c <__sflush_r+0x34>
 8009a92:	2b1d      	cmp	r3, #29
 8009a94:	d001      	beq.n	8009a9a <__sflush_r+0xb2>
 8009a96:	2b16      	cmp	r3, #22
 8009a98:	d101      	bne.n	8009a9e <__sflush_r+0xb6>
 8009a9a:	602f      	str	r7, [r5, #0]
 8009a9c:	e7b1      	b.n	8009a02 <__sflush_r+0x1a>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	e7ad      	b.n	8009a04 <__sflush_r+0x1c>
 8009aa8:	690f      	ldr	r7, [r1, #16]
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	d0a9      	beq.n	8009a02 <__sflush_r+0x1a>
 8009aae:	0793      	lsls	r3, r2, #30
 8009ab0:	680e      	ldr	r6, [r1, #0]
 8009ab2:	bf08      	it	eq
 8009ab4:	694b      	ldreq	r3, [r1, #20]
 8009ab6:	600f      	str	r7, [r1, #0]
 8009ab8:	bf18      	it	ne
 8009aba:	2300      	movne	r3, #0
 8009abc:	eba6 0807 	sub.w	r8, r6, r7
 8009ac0:	608b      	str	r3, [r1, #8]
 8009ac2:	f1b8 0f00 	cmp.w	r8, #0
 8009ac6:	dd9c      	ble.n	8009a02 <__sflush_r+0x1a>
 8009ac8:	6a21      	ldr	r1, [r4, #32]
 8009aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009acc:	4643      	mov	r3, r8
 8009ace:	463a      	mov	r2, r7
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b0      	blx	r6
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	dc06      	bgt.n	8009ae6 <__sflush_r+0xfe>
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ade:	81a3      	strh	r3, [r4, #12]
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	e78e      	b.n	8009a04 <__sflush_r+0x1c>
 8009ae6:	4407      	add	r7, r0
 8009ae8:	eba8 0800 	sub.w	r8, r8, r0
 8009aec:	e7e9      	b.n	8009ac2 <__sflush_r+0xda>
 8009aee:	bf00      	nop
 8009af0:	20400001 	.word	0x20400001

08009af4 <_fflush_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	690b      	ldr	r3, [r1, #16]
 8009af8:	4605      	mov	r5, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b913      	cbnz	r3, 8009b04 <_fflush_r+0x10>
 8009afe:	2500      	movs	r5, #0
 8009b00:	4628      	mov	r0, r5
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	b118      	cbz	r0, 8009b0e <_fflush_r+0x1a>
 8009b06:	6983      	ldr	r3, [r0, #24]
 8009b08:	b90b      	cbnz	r3, 8009b0e <_fflush_r+0x1a>
 8009b0a:	f000 f887 	bl	8009c1c <__sinit>
 8009b0e:	4b14      	ldr	r3, [pc, #80]	; (8009b60 <_fflush_r+0x6c>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	d11b      	bne.n	8009b4c <_fflush_r+0x58>
 8009b14:	686c      	ldr	r4, [r5, #4]
 8009b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0ef      	beq.n	8009afe <_fflush_r+0xa>
 8009b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b20:	07d0      	lsls	r0, r2, #31
 8009b22:	d404      	bmi.n	8009b2e <_fflush_r+0x3a>
 8009b24:	0599      	lsls	r1, r3, #22
 8009b26:	d402      	bmi.n	8009b2e <_fflush_r+0x3a>
 8009b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2a:	f000 f915 	bl	8009d58 <__retarget_lock_acquire_recursive>
 8009b2e:	4628      	mov	r0, r5
 8009b30:	4621      	mov	r1, r4
 8009b32:	f7ff ff59 	bl	80099e8 <__sflush_r>
 8009b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b38:	07da      	lsls	r2, r3, #31
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	d4e0      	bmi.n	8009b00 <_fflush_r+0xc>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	059b      	lsls	r3, r3, #22
 8009b42:	d4dd      	bmi.n	8009b00 <_fflush_r+0xc>
 8009b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b46:	f000 f908 	bl	8009d5a <__retarget_lock_release_recursive>
 8009b4a:	e7d9      	b.n	8009b00 <_fflush_r+0xc>
 8009b4c:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <_fflush_r+0x70>)
 8009b4e:	429c      	cmp	r4, r3
 8009b50:	d101      	bne.n	8009b56 <_fflush_r+0x62>
 8009b52:	68ac      	ldr	r4, [r5, #8]
 8009b54:	e7df      	b.n	8009b16 <_fflush_r+0x22>
 8009b56:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <_fflush_r+0x74>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	bf08      	it	eq
 8009b5c:	68ec      	ldreq	r4, [r5, #12]
 8009b5e:	e7da      	b.n	8009b16 <_fflush_r+0x22>
 8009b60:	0800bc58 	.word	0x0800bc58
 8009b64:	0800bc78 	.word	0x0800bc78
 8009b68:	0800bc38 	.word	0x0800bc38

08009b6c <std>:
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	4604      	mov	r4, r0
 8009b72:	e9c0 3300 	strd	r3, r3, [r0]
 8009b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b7a:	6083      	str	r3, [r0, #8]
 8009b7c:	8181      	strh	r1, [r0, #12]
 8009b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b80:	81c2      	strh	r2, [r0, #14]
 8009b82:	6183      	str	r3, [r0, #24]
 8009b84:	4619      	mov	r1, r3
 8009b86:	2208      	movs	r2, #8
 8009b88:	305c      	adds	r0, #92	; 0x5c
 8009b8a:	f7fe ff9b 	bl	8008ac4 <memset>
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <std+0x38>)
 8009b90:	6263      	str	r3, [r4, #36]	; 0x24
 8009b92:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <std+0x3c>)
 8009b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <std+0x40>)
 8009b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <std+0x44>)
 8009b9c:	6224      	str	r4, [r4, #32]
 8009b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	08009f5d 	.word	0x08009f5d
 8009ba8:	08009f7f 	.word	0x08009f7f
 8009bac:	08009fb7 	.word	0x08009fb7
 8009bb0:	08009fdb 	.word	0x08009fdb

08009bb4 <_cleanup_r>:
 8009bb4:	4901      	ldr	r1, [pc, #4]	; (8009bbc <_cleanup_r+0x8>)
 8009bb6:	f000 b8af 	b.w	8009d18 <_fwalk_reent>
 8009bba:	bf00      	nop
 8009bbc:	08009af5 	.word	0x08009af5

08009bc0 <__sfmoreglue>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	2268      	movs	r2, #104	; 0x68
 8009bc4:	1e4d      	subs	r5, r1, #1
 8009bc6:	4355      	muls	r5, r2
 8009bc8:	460e      	mov	r6, r1
 8009bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bce:	f7ff f975 	bl	8008ebc <_malloc_r>
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	b140      	cbz	r0, 8009be8 <__sfmoreglue+0x28>
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8009bdc:	300c      	adds	r0, #12
 8009bde:	60a0      	str	r0, [r4, #8]
 8009be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009be4:	f7fe ff6e 	bl	8008ac4 <memset>
 8009be8:	4620      	mov	r0, r4
 8009bea:	bd70      	pop	{r4, r5, r6, pc}

08009bec <__sfp_lock_acquire>:
 8009bec:	4801      	ldr	r0, [pc, #4]	; (8009bf4 <__sfp_lock_acquire+0x8>)
 8009bee:	f000 b8b3 	b.w	8009d58 <__retarget_lock_acquire_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	20008a11 	.word	0x20008a11

08009bf8 <__sfp_lock_release>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	; (8009c00 <__sfp_lock_release+0x8>)
 8009bfa:	f000 b8ae 	b.w	8009d5a <__retarget_lock_release_recursive>
 8009bfe:	bf00      	nop
 8009c00:	20008a11 	.word	0x20008a11

08009c04 <__sinit_lock_acquire>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__sinit_lock_acquire+0x8>)
 8009c06:	f000 b8a7 	b.w	8009d58 <__retarget_lock_acquire_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	20008a12 	.word	0x20008a12

08009c10 <__sinit_lock_release>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__sinit_lock_release+0x8>)
 8009c12:	f000 b8a2 	b.w	8009d5a <__retarget_lock_release_recursive>
 8009c16:	bf00      	nop
 8009c18:	20008a12 	.word	0x20008a12

08009c1c <__sinit>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	f7ff fff0 	bl	8009c04 <__sinit_lock_acquire>
 8009c24:	69a3      	ldr	r3, [r4, #24]
 8009c26:	b11b      	cbz	r3, 8009c30 <__sinit+0x14>
 8009c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c2c:	f7ff bff0 	b.w	8009c10 <__sinit_lock_release>
 8009c30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c34:	6523      	str	r3, [r4, #80]	; 0x50
 8009c36:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <__sinit+0x68>)
 8009c38:	4a13      	ldr	r2, [pc, #76]	; (8009c88 <__sinit+0x6c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	bf04      	itt	eq
 8009c42:	2301      	moveq	r3, #1
 8009c44:	61a3      	streq	r3, [r4, #24]
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 f820 	bl	8009c8c <__sfp>
 8009c4c:	6060      	str	r0, [r4, #4]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 f81c 	bl	8009c8c <__sfp>
 8009c54:	60a0      	str	r0, [r4, #8]
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f818 	bl	8009c8c <__sfp>
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	60e0      	str	r0, [r4, #12]
 8009c60:	2104      	movs	r1, #4
 8009c62:	6860      	ldr	r0, [r4, #4]
 8009c64:	f7ff ff82 	bl	8009b6c <std>
 8009c68:	68a0      	ldr	r0, [r4, #8]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	2109      	movs	r1, #9
 8009c6e:	f7ff ff7d 	bl	8009b6c <std>
 8009c72:	68e0      	ldr	r0, [r4, #12]
 8009c74:	2202      	movs	r2, #2
 8009c76:	2112      	movs	r1, #18
 8009c78:	f7ff ff78 	bl	8009b6c <std>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	61a3      	str	r3, [r4, #24]
 8009c80:	e7d2      	b.n	8009c28 <__sinit+0xc>
 8009c82:	bf00      	nop
 8009c84:	0800ba50 	.word	0x0800ba50
 8009c88:	08009bb5 	.word	0x08009bb5

08009c8c <__sfp>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	4607      	mov	r7, r0
 8009c90:	f7ff ffac 	bl	8009bec <__sfp_lock_acquire>
 8009c94:	4b1e      	ldr	r3, [pc, #120]	; (8009d10 <__sfp+0x84>)
 8009c96:	681e      	ldr	r6, [r3, #0]
 8009c98:	69b3      	ldr	r3, [r6, #24]
 8009c9a:	b913      	cbnz	r3, 8009ca2 <__sfp+0x16>
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f7ff ffbd 	bl	8009c1c <__sinit>
 8009ca2:	3648      	adds	r6, #72	; 0x48
 8009ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	d503      	bpl.n	8009cb4 <__sfp+0x28>
 8009cac:	6833      	ldr	r3, [r6, #0]
 8009cae:	b30b      	cbz	r3, 8009cf4 <__sfp+0x68>
 8009cb0:	6836      	ldr	r6, [r6, #0]
 8009cb2:	e7f7      	b.n	8009ca4 <__sfp+0x18>
 8009cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cb8:	b9d5      	cbnz	r5, 8009cf0 <__sfp+0x64>
 8009cba:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <__sfp+0x88>)
 8009cbc:	60e3      	str	r3, [r4, #12]
 8009cbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cc2:	6665      	str	r5, [r4, #100]	; 0x64
 8009cc4:	f000 f847 	bl	8009d56 <__retarget_lock_init_recursive>
 8009cc8:	f7ff ff96 	bl	8009bf8 <__sfp_lock_release>
 8009ccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cd4:	6025      	str	r5, [r4, #0]
 8009cd6:	61a5      	str	r5, [r4, #24]
 8009cd8:	2208      	movs	r2, #8
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ce0:	f7fe fef0 	bl	8008ac4 <memset>
 8009ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cec:	4620      	mov	r0, r4
 8009cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf0:	3468      	adds	r4, #104	; 0x68
 8009cf2:	e7d9      	b.n	8009ca8 <__sfp+0x1c>
 8009cf4:	2104      	movs	r1, #4
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f7ff ff62 	bl	8009bc0 <__sfmoreglue>
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	6030      	str	r0, [r6, #0]
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d1d5      	bne.n	8009cb0 <__sfp+0x24>
 8009d04:	f7ff ff78 	bl	8009bf8 <__sfp_lock_release>
 8009d08:	230c      	movs	r3, #12
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	e7ee      	b.n	8009cec <__sfp+0x60>
 8009d0e:	bf00      	nop
 8009d10:	0800ba50 	.word	0x0800ba50
 8009d14:	ffff0001 	.word	0xffff0001

08009d18 <_fwalk_reent>:
 8009d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	4688      	mov	r8, r1
 8009d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d24:	2700      	movs	r7, #0
 8009d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8009d2e:	d505      	bpl.n	8009d3c <_fwalk_reent+0x24>
 8009d30:	6824      	ldr	r4, [r4, #0]
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	d1f7      	bne.n	8009d26 <_fwalk_reent+0xe>
 8009d36:	4638      	mov	r0, r7
 8009d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d3c:	89ab      	ldrh	r3, [r5, #12]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d907      	bls.n	8009d52 <_fwalk_reent+0x3a>
 8009d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d46:	3301      	adds	r3, #1
 8009d48:	d003      	beq.n	8009d52 <_fwalk_reent+0x3a>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	47c0      	blx	r8
 8009d50:	4307      	orrs	r7, r0
 8009d52:	3568      	adds	r5, #104	; 0x68
 8009d54:	e7e9      	b.n	8009d2a <_fwalk_reent+0x12>

08009d56 <__retarget_lock_init_recursive>:
 8009d56:	4770      	bx	lr

08009d58 <__retarget_lock_acquire_recursive>:
 8009d58:	4770      	bx	lr

08009d5a <__retarget_lock_release_recursive>:
 8009d5a:	4770      	bx	lr

08009d5c <__swhatbuf_r>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	460e      	mov	r6, r1
 8009d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d64:	2900      	cmp	r1, #0
 8009d66:	b096      	sub	sp, #88	; 0x58
 8009d68:	4614      	mov	r4, r2
 8009d6a:	461d      	mov	r5, r3
 8009d6c:	da08      	bge.n	8009d80 <__swhatbuf_r+0x24>
 8009d6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	602a      	str	r2, [r5, #0]
 8009d76:	061a      	lsls	r2, r3, #24
 8009d78:	d410      	bmi.n	8009d9c <__swhatbuf_r+0x40>
 8009d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7e:	e00e      	b.n	8009d9e <__swhatbuf_r+0x42>
 8009d80:	466a      	mov	r2, sp
 8009d82:	f000 f951 	bl	800a028 <_fstat_r>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	dbf1      	blt.n	8009d6e <__swhatbuf_r+0x12>
 8009d8a:	9a01      	ldr	r2, [sp, #4]
 8009d8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d94:	425a      	negs	r2, r3
 8009d96:	415a      	adcs	r2, r3
 8009d98:	602a      	str	r2, [r5, #0]
 8009d9a:	e7ee      	b.n	8009d7a <__swhatbuf_r+0x1e>
 8009d9c:	2340      	movs	r3, #64	; 0x40
 8009d9e:	2000      	movs	r0, #0
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	b016      	add	sp, #88	; 0x58
 8009da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009da8 <__smakebuf_r>:
 8009da8:	898b      	ldrh	r3, [r1, #12]
 8009daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dac:	079d      	lsls	r5, r3, #30
 8009dae:	4606      	mov	r6, r0
 8009db0:	460c      	mov	r4, r1
 8009db2:	d507      	bpl.n	8009dc4 <__smakebuf_r+0x1c>
 8009db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	6123      	str	r3, [r4, #16]
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	6163      	str	r3, [r4, #20]
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	ab01      	add	r3, sp, #4
 8009dc6:	466a      	mov	r2, sp
 8009dc8:	f7ff ffc8 	bl	8009d5c <__swhatbuf_r>
 8009dcc:	9900      	ldr	r1, [sp, #0]
 8009dce:	4605      	mov	r5, r0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7ff f873 	bl	8008ebc <_malloc_r>
 8009dd6:	b948      	cbnz	r0, 8009dec <__smakebuf_r+0x44>
 8009dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ddc:	059a      	lsls	r2, r3, #22
 8009dde:	d4ef      	bmi.n	8009dc0 <__smakebuf_r+0x18>
 8009de0:	f023 0303 	bic.w	r3, r3, #3
 8009de4:	f043 0302 	orr.w	r3, r3, #2
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	e7e3      	b.n	8009db4 <__smakebuf_r+0xc>
 8009dec:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <__smakebuf_r+0x7c>)
 8009dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	6020      	str	r0, [r4, #0]
 8009df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	9b00      	ldr	r3, [sp, #0]
 8009dfc:	6163      	str	r3, [r4, #20]
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	6120      	str	r0, [r4, #16]
 8009e02:	b15b      	cbz	r3, 8009e1c <__smakebuf_r+0x74>
 8009e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f000 f91f 	bl	800a04c <_isatty_r>
 8009e0e:	b128      	cbz	r0, 8009e1c <__smakebuf_r+0x74>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	f043 0301 	orr.w	r3, r3, #1
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	89a0      	ldrh	r0, [r4, #12]
 8009e1e:	4305      	orrs	r5, r0
 8009e20:	81a5      	strh	r5, [r4, #12]
 8009e22:	e7cd      	b.n	8009dc0 <__smakebuf_r+0x18>
 8009e24:	08009bb5 	.word	0x08009bb5

08009e28 <memmove>:
 8009e28:	4288      	cmp	r0, r1
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	eb01 0402 	add.w	r4, r1, r2
 8009e30:	d902      	bls.n	8009e38 <memmove+0x10>
 8009e32:	4284      	cmp	r4, r0
 8009e34:	4623      	mov	r3, r4
 8009e36:	d807      	bhi.n	8009e48 <memmove+0x20>
 8009e38:	1e43      	subs	r3, r0, #1
 8009e3a:	42a1      	cmp	r1, r4
 8009e3c:	d008      	beq.n	8009e50 <memmove+0x28>
 8009e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e46:	e7f8      	b.n	8009e3a <memmove+0x12>
 8009e48:	4402      	add	r2, r0
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	428a      	cmp	r2, r1
 8009e4e:	d100      	bne.n	8009e52 <memmove+0x2a>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e5a:	e7f7      	b.n	8009e4c <memmove+0x24>

08009e5c <__malloc_lock>:
 8009e5c:	4801      	ldr	r0, [pc, #4]	; (8009e64 <__malloc_lock+0x8>)
 8009e5e:	f7ff bf7b 	b.w	8009d58 <__retarget_lock_acquire_recursive>
 8009e62:	bf00      	nop
 8009e64:	20008a10 	.word	0x20008a10

08009e68 <__malloc_unlock>:
 8009e68:	4801      	ldr	r0, [pc, #4]	; (8009e70 <__malloc_unlock+0x8>)
 8009e6a:	f7ff bf76 	b.w	8009d5a <__retarget_lock_release_recursive>
 8009e6e:	bf00      	nop
 8009e70:	20008a10 	.word	0x20008a10

08009e74 <_realloc_r>:
 8009e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e78:	4680      	mov	r8, r0
 8009e7a:	4614      	mov	r4, r2
 8009e7c:	460e      	mov	r6, r1
 8009e7e:	b921      	cbnz	r1, 8009e8a <_realloc_r+0x16>
 8009e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e84:	4611      	mov	r1, r2
 8009e86:	f7ff b819 	b.w	8008ebc <_malloc_r>
 8009e8a:	b92a      	cbnz	r2, 8009e98 <_realloc_r+0x24>
 8009e8c:	f7fe ffaa 	bl	8008de4 <_free_r>
 8009e90:	4625      	mov	r5, r4
 8009e92:	4628      	mov	r0, r5
 8009e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e98:	f000 f8fa 	bl	800a090 <_malloc_usable_size_r>
 8009e9c:	4284      	cmp	r4, r0
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	d802      	bhi.n	8009ea8 <_realloc_r+0x34>
 8009ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ea6:	d812      	bhi.n	8009ece <_realloc_r+0x5a>
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	4640      	mov	r0, r8
 8009eac:	f7ff f806 	bl	8008ebc <_malloc_r>
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0ed      	beq.n	8009e92 <_realloc_r+0x1e>
 8009eb6:	42bc      	cmp	r4, r7
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4631      	mov	r1, r6
 8009ebc:	bf28      	it	cs
 8009ebe:	463a      	movcs	r2, r7
 8009ec0:	f7fe fdf2 	bl	8008aa8 <memcpy>
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	f7fe ff8c 	bl	8008de4 <_free_r>
 8009ecc:	e7e1      	b.n	8009e92 <_realloc_r+0x1e>
 8009ece:	4635      	mov	r5, r6
 8009ed0:	e7df      	b.n	8009e92 <_realloc_r+0x1e>

08009ed2 <_raise_r>:
 8009ed2:	291f      	cmp	r1, #31
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	460d      	mov	r5, r1
 8009eda:	d904      	bls.n	8009ee6 <_raise_r+0x14>
 8009edc:	2316      	movs	r3, #22
 8009ede:	6003      	str	r3, [r0, #0]
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ee8:	b112      	cbz	r2, 8009ef0 <_raise_r+0x1e>
 8009eea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009eee:	b94b      	cbnz	r3, 8009f04 <_raise_r+0x32>
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 f831 	bl	8009f58 <_getpid_r>
 8009ef6:	462a      	mov	r2, r5
 8009ef8:	4601      	mov	r1, r0
 8009efa:	4620      	mov	r0, r4
 8009efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f00:	f000 b818 	b.w	8009f34 <_kill_r>
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d00a      	beq.n	8009f1e <_raise_r+0x4c>
 8009f08:	1c59      	adds	r1, r3, #1
 8009f0a:	d103      	bne.n	8009f14 <_raise_r+0x42>
 8009f0c:	2316      	movs	r3, #22
 8009f0e:	6003      	str	r3, [r0, #0]
 8009f10:	2001      	movs	r0, #1
 8009f12:	e7e7      	b.n	8009ee4 <_raise_r+0x12>
 8009f14:	2400      	movs	r4, #0
 8009f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	4798      	blx	r3
 8009f1e:	2000      	movs	r0, #0
 8009f20:	e7e0      	b.n	8009ee4 <_raise_r+0x12>
	...

08009f24 <raise>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <raise+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f7ff bfd2 	b.w	8009ed2 <_raise_r>
 8009f2e:	bf00      	nop
 8009f30:	20000430 	.word	0x20000430

08009f34 <_kill_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	; (8009f54 <_kill_r+0x20>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	f7f9 fba9 	bl	8003698 <_kill>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d102      	bne.n	8009f50 <_kill_r+0x1c>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	b103      	cbz	r3, 8009f50 <_kill_r+0x1c>
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	20008a14 	.word	0x20008a14

08009f58 <_getpid_r>:
 8009f58:	f7f9 bb96 	b.w	8003688 <_getpid>

08009f5c <__sread>:
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	460c      	mov	r4, r1
 8009f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f64:	f000 f89c 	bl	800a0a0 <_read_r>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	bfab      	itete	ge
 8009f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009f70:	181b      	addge	r3, r3, r0
 8009f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f76:	bfac      	ite	ge
 8009f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f7a:	81a3      	strhlt	r3, [r4, #12]
 8009f7c:	bd10      	pop	{r4, pc}

08009f7e <__swrite>:
 8009f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f82:	461f      	mov	r7, r3
 8009f84:	898b      	ldrh	r3, [r1, #12]
 8009f86:	05db      	lsls	r3, r3, #23
 8009f88:	4605      	mov	r5, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	4616      	mov	r6, r2
 8009f8e:	d505      	bpl.n	8009f9c <__swrite+0x1e>
 8009f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f94:	2302      	movs	r3, #2
 8009f96:	2200      	movs	r2, #0
 8009f98:	f000 f868 	bl	800a06c <_lseek_r>
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	4632      	mov	r2, r6
 8009faa:	463b      	mov	r3, r7
 8009fac:	4628      	mov	r0, r5
 8009fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb2:	f000 b817 	b.w	8009fe4 <_write_r>

08009fb6 <__sseek>:
 8009fb6:	b510      	push	{r4, lr}
 8009fb8:	460c      	mov	r4, r1
 8009fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbe:	f000 f855 	bl	800a06c <_lseek_r>
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	bf15      	itete	ne
 8009fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fd2:	81a3      	strheq	r3, [r4, #12]
 8009fd4:	bf18      	it	ne
 8009fd6:	81a3      	strhne	r3, [r4, #12]
 8009fd8:	bd10      	pop	{r4, pc}

08009fda <__sclose>:
 8009fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fde:	f000 b813 	b.w	800a008 <_close_r>
	...

08009fe4 <_write_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d07      	ldr	r5, [pc, #28]	; (800a004 <_write_r+0x20>)
 8009fe8:	4604      	mov	r4, r0
 8009fea:	4608      	mov	r0, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	602a      	str	r2, [r5, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f7f9 fb87 	bl	8003706 <_write>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_write_r+0x1e>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_write_r+0x1e>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	20008a14 	.word	0x20008a14

0800a008 <_close_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4d06      	ldr	r5, [pc, #24]	; (800a024 <_close_r+0x1c>)
 800a00c:	2300      	movs	r3, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	f7f9 fb93 	bl	800373e <_close>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_close_r+0x1a>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_close_r+0x1a>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	20008a14 	.word	0x20008a14

0800a028 <_fstat_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d07      	ldr	r5, [pc, #28]	; (800a048 <_fstat_r+0x20>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	4611      	mov	r1, r2
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	f7f9 fb8e 	bl	8003756 <_fstat>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	d102      	bne.n	800a044 <_fstat_r+0x1c>
 800a03e:	682b      	ldr	r3, [r5, #0]
 800a040:	b103      	cbz	r3, 800a044 <_fstat_r+0x1c>
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	bf00      	nop
 800a048:	20008a14 	.word	0x20008a14

0800a04c <_isatty_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4d06      	ldr	r5, [pc, #24]	; (800a068 <_isatty_r+0x1c>)
 800a050:	2300      	movs	r3, #0
 800a052:	4604      	mov	r4, r0
 800a054:	4608      	mov	r0, r1
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	f7f9 fb8d 	bl	8003776 <_isatty>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d102      	bne.n	800a066 <_isatty_r+0x1a>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	b103      	cbz	r3, 800a066 <_isatty_r+0x1a>
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	20008a14 	.word	0x20008a14

0800a06c <_lseek_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4d07      	ldr	r5, [pc, #28]	; (800a08c <_lseek_r+0x20>)
 800a070:	4604      	mov	r4, r0
 800a072:	4608      	mov	r0, r1
 800a074:	4611      	mov	r1, r2
 800a076:	2200      	movs	r2, #0
 800a078:	602a      	str	r2, [r5, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	f7f9 fb86 	bl	800378c <_lseek>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_lseek_r+0x1e>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_lseek_r+0x1e>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	20008a14 	.word	0x20008a14

0800a090 <_malloc_usable_size_r>:
 800a090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a094:	1f18      	subs	r0, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	bfbc      	itt	lt
 800a09a:	580b      	ldrlt	r3, [r1, r0]
 800a09c:	18c0      	addlt	r0, r0, r3
 800a09e:	4770      	bx	lr

0800a0a0 <_read_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d07      	ldr	r5, [pc, #28]	; (800a0c0 <_read_r+0x20>)
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	4608      	mov	r0, r1
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	602a      	str	r2, [r5, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f7f9 fb0c 	bl	80036cc <_read>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_read_r+0x1e>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_read_r+0x1e>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20008a14 	.word	0x20008a14

0800a0c4 <round>:
 800a0c4:	ec51 0b10 	vmov	r0, r1, d0
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a0ce:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a0d2:	2c13      	cmp	r4, #19
 800a0d4:	ee10 2a10 	vmov	r2, s0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	dc19      	bgt.n	800a110 <round+0x4c>
 800a0dc:	2c00      	cmp	r4, #0
 800a0de:	da09      	bge.n	800a0f4 <round+0x30>
 800a0e0:	3401      	adds	r4, #1
 800a0e2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a0e6:	d103      	bne.n	800a0f0 <round+0x2c>
 800a0e8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a0ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	e028      	b.n	800a146 <round+0x82>
 800a0f4:	4d15      	ldr	r5, [pc, #84]	; (800a14c <round+0x88>)
 800a0f6:	4125      	asrs	r5, r4
 800a0f8:	ea01 0605 	and.w	r6, r1, r5
 800a0fc:	4332      	orrs	r2, r6
 800a0fe:	d00e      	beq.n	800a11e <round+0x5a>
 800a100:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a104:	fa42 f404 	asr.w	r4, r2, r4
 800a108:	4423      	add	r3, r4
 800a10a:	ea23 0305 	bic.w	r3, r3, r5
 800a10e:	e7ef      	b.n	800a0f0 <round+0x2c>
 800a110:	2c33      	cmp	r4, #51	; 0x33
 800a112:	dd07      	ble.n	800a124 <round+0x60>
 800a114:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a118:	d101      	bne.n	800a11e <round+0x5a>
 800a11a:	f7f6 f8cf 	bl	80002bc <__adddf3>
 800a11e:	ec41 0b10 	vmov	d0, r0, r1
 800a122:	bd70      	pop	{r4, r5, r6, pc}
 800a124:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a128:	f04f 35ff 	mov.w	r5, #4294967295
 800a12c:	40f5      	lsrs	r5, r6
 800a12e:	4228      	tst	r0, r5
 800a130:	d0f5      	beq.n	800a11e <round+0x5a>
 800a132:	2101      	movs	r1, #1
 800a134:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a138:	fa01 f404 	lsl.w	r4, r1, r4
 800a13c:	1912      	adds	r2, r2, r4
 800a13e:	bf28      	it	cs
 800a140:	185b      	addcs	r3, r3, r1
 800a142:	ea22 0205 	bic.w	r2, r2, r5
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	e7e8      	b.n	800a11e <round+0x5a>
 800a14c:	000fffff 	.word	0x000fffff

0800a150 <sin>:
 800a150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a152:	ec53 2b10 	vmov	r2, r3, d0
 800a156:	4828      	ldr	r0, [pc, #160]	; (800a1f8 <sin+0xa8>)
 800a158:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a15c:	4281      	cmp	r1, r0
 800a15e:	dc07      	bgt.n	800a170 <sin+0x20>
 800a160:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a1f0 <sin+0xa0>
 800a164:	2000      	movs	r0, #0
 800a166:	b005      	add	sp, #20
 800a168:	f85d eb04 	ldr.w	lr, [sp], #4
 800a16c:	f000 be6c 	b.w	800ae48 <__kernel_sin>
 800a170:	4822      	ldr	r0, [pc, #136]	; (800a1fc <sin+0xac>)
 800a172:	4281      	cmp	r1, r0
 800a174:	dd09      	ble.n	800a18a <sin+0x3a>
 800a176:	ee10 0a10 	vmov	r0, s0
 800a17a:	4619      	mov	r1, r3
 800a17c:	f7f6 f89c 	bl	80002b8 <__aeabi_dsub>
 800a180:	ec41 0b10 	vmov	d0, r0, r1
 800a184:	b005      	add	sp, #20
 800a186:	f85d fb04 	ldr.w	pc, [sp], #4
 800a18a:	4668      	mov	r0, sp
 800a18c:	f000 f838 	bl	800a200 <__ieee754_rem_pio2>
 800a190:	f000 0003 	and.w	r0, r0, #3
 800a194:	2801      	cmp	r0, #1
 800a196:	d00c      	beq.n	800a1b2 <sin+0x62>
 800a198:	2802      	cmp	r0, #2
 800a19a:	d011      	beq.n	800a1c0 <sin+0x70>
 800a19c:	b9f0      	cbnz	r0, 800a1dc <sin+0x8c>
 800a19e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1a2:	ed9d 0b00 	vldr	d0, [sp]
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	f000 fe4e 	bl	800ae48 <__kernel_sin>
 800a1ac:	ec51 0b10 	vmov	r0, r1, d0
 800a1b0:	e7e6      	b.n	800a180 <sin+0x30>
 800a1b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1b6:	ed9d 0b00 	vldr	d0, [sp]
 800a1ba:	f000 fa2d 	bl	800a618 <__kernel_cos>
 800a1be:	e7f5      	b.n	800a1ac <sin+0x5c>
 800a1c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1c4:	ed9d 0b00 	vldr	d0, [sp]
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	f000 fe3d 	bl	800ae48 <__kernel_sin>
 800a1ce:	ec53 2b10 	vmov	r2, r3, d0
 800a1d2:	ee10 0a10 	vmov	r0, s0
 800a1d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a1da:	e7d1      	b.n	800a180 <sin+0x30>
 800a1dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1e0:	ed9d 0b00 	vldr	d0, [sp]
 800a1e4:	f000 fa18 	bl	800a618 <__kernel_cos>
 800a1e8:	e7f1      	b.n	800a1ce <sin+0x7e>
 800a1ea:	bf00      	nop
 800a1ec:	f3af 8000 	nop.w
	...
 800a1f8:	3fe921fb 	.word	0x3fe921fb
 800a1fc:	7fefffff 	.word	0x7fefffff

0800a200 <__ieee754_rem_pio2>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	ed2d 8b02 	vpush	{d8}
 800a208:	ec55 4b10 	vmov	r4, r5, d0
 800a20c:	4bca      	ldr	r3, [pc, #808]	; (800a538 <__ieee754_rem_pio2+0x338>)
 800a20e:	b08b      	sub	sp, #44	; 0x2c
 800a210:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a214:	4598      	cmp	r8, r3
 800a216:	4682      	mov	sl, r0
 800a218:	9502      	str	r5, [sp, #8]
 800a21a:	dc08      	bgt.n	800a22e <__ieee754_rem_pio2+0x2e>
 800a21c:	2200      	movs	r2, #0
 800a21e:	2300      	movs	r3, #0
 800a220:	ed80 0b00 	vstr	d0, [r0]
 800a224:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a228:	f04f 0b00 	mov.w	fp, #0
 800a22c:	e028      	b.n	800a280 <__ieee754_rem_pio2+0x80>
 800a22e:	4bc3      	ldr	r3, [pc, #780]	; (800a53c <__ieee754_rem_pio2+0x33c>)
 800a230:	4598      	cmp	r8, r3
 800a232:	dc78      	bgt.n	800a326 <__ieee754_rem_pio2+0x126>
 800a234:	9b02      	ldr	r3, [sp, #8]
 800a236:	4ec2      	ldr	r6, [pc, #776]	; (800a540 <__ieee754_rem_pio2+0x340>)
 800a238:	2b00      	cmp	r3, #0
 800a23a:	ee10 0a10 	vmov	r0, s0
 800a23e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a500 <__ieee754_rem_pio2+0x300>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	4629      	mov	r1, r5
 800a246:	dd39      	ble.n	800a2bc <__ieee754_rem_pio2+0xbc>
 800a248:	f7f6 f836 	bl	80002b8 <__aeabi_dsub>
 800a24c:	45b0      	cmp	r8, r6
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	d01b      	beq.n	800a28c <__ieee754_rem_pio2+0x8c>
 800a254:	a3ac      	add	r3, pc, #688	; (adr r3, 800a508 <__ieee754_rem_pio2+0x308>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f7f6 f82d 	bl	80002b8 <__aeabi_dsub>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	e9ca 2300 	strd	r2, r3, [sl]
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 f825 	bl	80002b8 <__aeabi_dsub>
 800a26e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a508 <__ieee754_rem_pio2+0x308>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f6 f820 	bl	80002b8 <__aeabi_dsub>
 800a278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a27c:	f04f 0b01 	mov.w	fp, #1
 800a280:	4658      	mov	r0, fp
 800a282:	b00b      	add	sp, #44	; 0x2c
 800a284:	ecbd 8b02 	vpop	{d8}
 800a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a510 <__ieee754_rem_pio2+0x310>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	f7f6 f811 	bl	80002b8 <__aeabi_dsub>
 800a296:	a3a0      	add	r3, pc, #640	; (adr r3, 800a518 <__ieee754_rem_pio2+0x318>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	f7f6 f80a 	bl	80002b8 <__aeabi_dsub>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	e9ca 2300 	strd	r2, r3, [sl]
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f7f6 f802 	bl	80002b8 <__aeabi_dsub>
 800a2b4:	a398      	add	r3, pc, #608	; (adr r3, 800a518 <__ieee754_rem_pio2+0x318>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	e7db      	b.n	800a274 <__ieee754_rem_pio2+0x74>
 800a2bc:	f7f5 fffe 	bl	80002bc <__adddf3>
 800a2c0:	45b0      	cmp	r8, r6
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	460d      	mov	r5, r1
 800a2c6:	d016      	beq.n	800a2f6 <__ieee754_rem_pio2+0xf6>
 800a2c8:	a38f      	add	r3, pc, #572	; (adr r3, 800a508 <__ieee754_rem_pio2+0x308>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f5 fff5 	bl	80002bc <__adddf3>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	e9ca 2300 	strd	r2, r3, [sl]
 800a2da:	4620      	mov	r0, r4
 800a2dc:	4629      	mov	r1, r5
 800a2de:	f7f5 ffeb 	bl	80002b8 <__aeabi_dsub>
 800a2e2:	a389      	add	r3, pc, #548	; (adr r3, 800a508 <__ieee754_rem_pio2+0x308>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f7f5 ffe8 	bl	80002bc <__adddf3>
 800a2ec:	f04f 3bff 	mov.w	fp, #4294967295
 800a2f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2f4:	e7c4      	b.n	800a280 <__ieee754_rem_pio2+0x80>
 800a2f6:	a386      	add	r3, pc, #536	; (adr r3, 800a510 <__ieee754_rem_pio2+0x310>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f5 ffde 	bl	80002bc <__adddf3>
 800a300:	a385      	add	r3, pc, #532	; (adr r3, 800a518 <__ieee754_rem_pio2+0x318>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	4604      	mov	r4, r0
 800a308:	460d      	mov	r5, r1
 800a30a:	f7f5 ffd7 	bl	80002bc <__adddf3>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	e9ca 2300 	strd	r2, r3, [sl]
 800a316:	4620      	mov	r0, r4
 800a318:	4629      	mov	r1, r5
 800a31a:	f7f5 ffcd 	bl	80002b8 <__aeabi_dsub>
 800a31e:	a37e      	add	r3, pc, #504	; (adr r3, 800a518 <__ieee754_rem_pio2+0x318>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	e7e0      	b.n	800a2e8 <__ieee754_rem_pio2+0xe8>
 800a326:	4b87      	ldr	r3, [pc, #540]	; (800a544 <__ieee754_rem_pio2+0x344>)
 800a328:	4598      	cmp	r8, r3
 800a32a:	f300 80d9 	bgt.w	800a4e0 <__ieee754_rem_pio2+0x2e0>
 800a32e:	f000 fe49 	bl	800afc4 <fabs>
 800a332:	ec55 4b10 	vmov	r4, r5, d0
 800a336:	ee10 0a10 	vmov	r0, s0
 800a33a:	a379      	add	r3, pc, #484	; (adr r3, 800a520 <__ieee754_rem_pio2+0x320>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	4629      	mov	r1, r5
 800a342:	f7f6 f971 	bl	8000628 <__aeabi_dmul>
 800a346:	4b80      	ldr	r3, [pc, #512]	; (800a548 <__ieee754_rem_pio2+0x348>)
 800a348:	2200      	movs	r2, #0
 800a34a:	f7f5 ffb7 	bl	80002bc <__adddf3>
 800a34e:	f7f6 fc05 	bl	8000b5c <__aeabi_d2iz>
 800a352:	4683      	mov	fp, r0
 800a354:	f7f6 f8fe 	bl	8000554 <__aeabi_i2d>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	ec43 2b18 	vmov	d8, r2, r3
 800a360:	a367      	add	r3, pc, #412	; (adr r3, 800a500 <__ieee754_rem_pio2+0x300>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 f95f 	bl	8000628 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4620      	mov	r0, r4
 800a370:	4629      	mov	r1, r5
 800a372:	f7f5 ffa1 	bl	80002b8 <__aeabi_dsub>
 800a376:	a364      	add	r3, pc, #400	; (adr r3, 800a508 <__ieee754_rem_pio2+0x308>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	4606      	mov	r6, r0
 800a37e:	460f      	mov	r7, r1
 800a380:	ec51 0b18 	vmov	r0, r1, d8
 800a384:	f7f6 f950 	bl	8000628 <__aeabi_dmul>
 800a388:	f1bb 0f1f 	cmp.w	fp, #31
 800a38c:	4604      	mov	r4, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	dc0d      	bgt.n	800a3ae <__ieee754_rem_pio2+0x1ae>
 800a392:	4b6e      	ldr	r3, [pc, #440]	; (800a54c <__ieee754_rem_pio2+0x34c>)
 800a394:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39c:	4543      	cmp	r3, r8
 800a39e:	d006      	beq.n	800a3ae <__ieee754_rem_pio2+0x1ae>
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	462b      	mov	r3, r5
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	f7f5 ff86 	bl	80002b8 <__aeabi_dsub>
 800a3ac:	e00f      	b.n	800a3ce <__ieee754_rem_pio2+0x1ce>
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f5 ff7f 	bl	80002b8 <__aeabi_dsub>
 800a3ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a3be:	9303      	str	r3, [sp, #12]
 800a3c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a3c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a3c8:	f1b8 0f10 	cmp.w	r8, #16
 800a3cc:	dc02      	bgt.n	800a3d4 <__ieee754_rem_pio2+0x1d4>
 800a3ce:	e9ca 0100 	strd	r0, r1, [sl]
 800a3d2:	e039      	b.n	800a448 <__ieee754_rem_pio2+0x248>
 800a3d4:	a34e      	add	r3, pc, #312	; (adr r3, 800a510 <__ieee754_rem_pio2+0x310>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	ec51 0b18 	vmov	r0, r1, d8
 800a3de:	f7f6 f923 	bl	8000628 <__aeabi_dmul>
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f5 ff63 	bl	80002b8 <__aeabi_dsub>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4689      	mov	r9, r1
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	f7f5 ff5b 	bl	80002b8 <__aeabi_dsub>
 800a402:	4622      	mov	r2, r4
 800a404:	462b      	mov	r3, r5
 800a406:	f7f5 ff57 	bl	80002b8 <__aeabi_dsub>
 800a40a:	a343      	add	r3, pc, #268	; (adr r3, 800a518 <__ieee754_rem_pio2+0x318>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	ec51 0b18 	vmov	r0, r1, d8
 800a418:	f7f6 f906 	bl	8000628 <__aeabi_dmul>
 800a41c:	4622      	mov	r2, r4
 800a41e:	462b      	mov	r3, r5
 800a420:	f7f5 ff4a 	bl	80002b8 <__aeabi_dsub>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	f7f5 ff42 	bl	80002b8 <__aeabi_dsub>
 800a434:	9a03      	ldr	r2, [sp, #12]
 800a436:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b31      	cmp	r3, #49	; 0x31
 800a43e:	dc24      	bgt.n	800a48a <__ieee754_rem_pio2+0x28a>
 800a440:	e9ca 0100 	strd	r0, r1, [sl]
 800a444:	4646      	mov	r6, r8
 800a446:	464f      	mov	r7, r9
 800a448:	e9da 8900 	ldrd	r8, r9, [sl]
 800a44c:	4630      	mov	r0, r6
 800a44e:	4642      	mov	r2, r8
 800a450:	464b      	mov	r3, r9
 800a452:	4639      	mov	r1, r7
 800a454:	f7f5 ff30 	bl	80002b8 <__aeabi_dsub>
 800a458:	462b      	mov	r3, r5
 800a45a:	4622      	mov	r2, r4
 800a45c:	f7f5 ff2c 	bl	80002b8 <__aeabi_dsub>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a468:	f6bf af0a 	bge.w	800a280 <__ieee754_rem_pio2+0x80>
 800a46c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a470:	f8ca 3004 	str.w	r3, [sl, #4]
 800a474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a478:	f8ca 8000 	str.w	r8, [sl]
 800a47c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a480:	f8ca 300c 	str.w	r3, [sl, #12]
 800a484:	f1cb 0b00 	rsb	fp, fp, #0
 800a488:	e6fa      	b.n	800a280 <__ieee754_rem_pio2+0x80>
 800a48a:	a327      	add	r3, pc, #156	; (adr r3, 800a528 <__ieee754_rem_pio2+0x328>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	ec51 0b18 	vmov	r0, r1, d8
 800a494:	f7f6 f8c8 	bl	8000628 <__aeabi_dmul>
 800a498:	4604      	mov	r4, r0
 800a49a:	460d      	mov	r5, r1
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	f7f5 ff08 	bl	80002b8 <__aeabi_dsub>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	460f      	mov	r7, r1
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	f7f5 ff00 	bl	80002b8 <__aeabi_dsub>
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	f7f5 fefc 	bl	80002b8 <__aeabi_dsub>
 800a4c0:	a31b      	add	r3, pc, #108	; (adr r3, 800a530 <__ieee754_rem_pio2+0x330>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	ec51 0b18 	vmov	r0, r1, d8
 800a4ce:	f7f6 f8ab 	bl	8000628 <__aeabi_dmul>
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	f7f5 feef 	bl	80002b8 <__aeabi_dsub>
 800a4da:	4604      	mov	r4, r0
 800a4dc:	460d      	mov	r5, r1
 800a4de:	e75f      	b.n	800a3a0 <__ieee754_rem_pio2+0x1a0>
 800a4e0:	4b1b      	ldr	r3, [pc, #108]	; (800a550 <__ieee754_rem_pio2+0x350>)
 800a4e2:	4598      	cmp	r8, r3
 800a4e4:	dd36      	ble.n	800a554 <__ieee754_rem_pio2+0x354>
 800a4e6:	ee10 2a10 	vmov	r2, s0
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f7f5 fee2 	bl	80002b8 <__aeabi_dsub>
 800a4f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a4f8:	e9ca 0100 	strd	r0, r1, [sl]
 800a4fc:	e694      	b.n	800a228 <__ieee754_rem_pio2+0x28>
 800a4fe:	bf00      	nop
 800a500:	54400000 	.word	0x54400000
 800a504:	3ff921fb 	.word	0x3ff921fb
 800a508:	1a626331 	.word	0x1a626331
 800a50c:	3dd0b461 	.word	0x3dd0b461
 800a510:	1a600000 	.word	0x1a600000
 800a514:	3dd0b461 	.word	0x3dd0b461
 800a518:	2e037073 	.word	0x2e037073
 800a51c:	3ba3198a 	.word	0x3ba3198a
 800a520:	6dc9c883 	.word	0x6dc9c883
 800a524:	3fe45f30 	.word	0x3fe45f30
 800a528:	2e000000 	.word	0x2e000000
 800a52c:	3ba3198a 	.word	0x3ba3198a
 800a530:	252049c1 	.word	0x252049c1
 800a534:	397b839a 	.word	0x397b839a
 800a538:	3fe921fb 	.word	0x3fe921fb
 800a53c:	4002d97b 	.word	0x4002d97b
 800a540:	3ff921fb 	.word	0x3ff921fb
 800a544:	413921fb 	.word	0x413921fb
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	0800bc98 	.word	0x0800bc98
 800a550:	7fefffff 	.word	0x7fefffff
 800a554:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a558:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a55c:	ee10 0a10 	vmov	r0, s0
 800a560:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a564:	ee10 6a10 	vmov	r6, s0
 800a568:	460f      	mov	r7, r1
 800a56a:	f7f6 faf7 	bl	8000b5c <__aeabi_d2iz>
 800a56e:	f7f5 fff1 	bl	8000554 <__aeabi_i2d>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a57e:	f7f5 fe9b 	bl	80002b8 <__aeabi_dsub>
 800a582:	4b23      	ldr	r3, [pc, #140]	; (800a610 <__ieee754_rem_pio2+0x410>)
 800a584:	2200      	movs	r2, #0
 800a586:	f7f6 f84f 	bl	8000628 <__aeabi_dmul>
 800a58a:	460f      	mov	r7, r1
 800a58c:	4606      	mov	r6, r0
 800a58e:	f7f6 fae5 	bl	8000b5c <__aeabi_d2iz>
 800a592:	f7f5 ffdf 	bl	8000554 <__aeabi_i2d>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4630      	mov	r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5a2:	f7f5 fe89 	bl	80002b8 <__aeabi_dsub>
 800a5a6:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <__ieee754_rem_pio2+0x410>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f7f6 f83d 	bl	8000628 <__aeabi_dmul>
 800a5ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a5b2:	ad04      	add	r5, sp, #16
 800a5b4:	f04f 0803 	mov.w	r8, #3
 800a5b8:	46a9      	mov	r9, r5
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	2700      	movs	r7, #0
 800a5be:	4632      	mov	r2, r6
 800a5c0:	463b      	mov	r3, r7
 800a5c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a5c6:	46c3      	mov	fp, r8
 800a5c8:	3d08      	subs	r5, #8
 800a5ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5ce:	f7f6 fa93 	bl	8000af8 <__aeabi_dcmpeq>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d1f3      	bne.n	800a5be <__ieee754_rem_pio2+0x3be>
 800a5d6:	4b0f      	ldr	r3, [pc, #60]	; (800a614 <__ieee754_rem_pio2+0x414>)
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	2302      	movs	r3, #2
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	4622      	mov	r2, r4
 800a5e0:	465b      	mov	r3, fp
 800a5e2:	4651      	mov	r1, sl
 800a5e4:	4648      	mov	r0, r9
 800a5e6:	f000 f8df 	bl	800a7a8 <__kernel_rem_pio2>
 800a5ea:	9b02      	ldr	r3, [sp, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	4683      	mov	fp, r0
 800a5f0:	f6bf ae46 	bge.w	800a280 <__ieee754_rem_pio2+0x80>
 800a5f4:	e9da 2100 	ldrd	r2, r1, [sl]
 800a5f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5fc:	e9ca 2300 	strd	r2, r3, [sl]
 800a600:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a604:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a608:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a60c:	e73a      	b.n	800a484 <__ieee754_rem_pio2+0x284>
 800a60e:	bf00      	nop
 800a610:	41700000 	.word	0x41700000
 800a614:	0800bd18 	.word	0x0800bd18

0800a618 <__kernel_cos>:
 800a618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61c:	ec57 6b10 	vmov	r6, r7, d0
 800a620:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a624:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a628:	ed8d 1b00 	vstr	d1, [sp]
 800a62c:	da07      	bge.n	800a63e <__kernel_cos+0x26>
 800a62e:	ee10 0a10 	vmov	r0, s0
 800a632:	4639      	mov	r1, r7
 800a634:	f7f6 fa92 	bl	8000b5c <__aeabi_d2iz>
 800a638:	2800      	cmp	r0, #0
 800a63a:	f000 8088 	beq.w	800a74e <__kernel_cos+0x136>
 800a63e:	4632      	mov	r2, r6
 800a640:	463b      	mov	r3, r7
 800a642:	4630      	mov	r0, r6
 800a644:	4639      	mov	r1, r7
 800a646:	f7f5 ffef 	bl	8000628 <__aeabi_dmul>
 800a64a:	4b51      	ldr	r3, [pc, #324]	; (800a790 <__kernel_cos+0x178>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4604      	mov	r4, r0
 800a650:	460d      	mov	r5, r1
 800a652:	f7f5 ffe9 	bl	8000628 <__aeabi_dmul>
 800a656:	a340      	add	r3, pc, #256	; (adr r3, 800a758 <__kernel_cos+0x140>)
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	4682      	mov	sl, r0
 800a65e:	468b      	mov	fp, r1
 800a660:	4620      	mov	r0, r4
 800a662:	4629      	mov	r1, r5
 800a664:	f7f5 ffe0 	bl	8000628 <__aeabi_dmul>
 800a668:	a33d      	add	r3, pc, #244	; (adr r3, 800a760 <__kernel_cos+0x148>)
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	f7f5 fe25 	bl	80002bc <__adddf3>
 800a672:	4622      	mov	r2, r4
 800a674:	462b      	mov	r3, r5
 800a676:	f7f5 ffd7 	bl	8000628 <__aeabi_dmul>
 800a67a:	a33b      	add	r3, pc, #236	; (adr r3, 800a768 <__kernel_cos+0x150>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f7f5 fe1a 	bl	80002b8 <__aeabi_dsub>
 800a684:	4622      	mov	r2, r4
 800a686:	462b      	mov	r3, r5
 800a688:	f7f5 ffce 	bl	8000628 <__aeabi_dmul>
 800a68c:	a338      	add	r3, pc, #224	; (adr r3, 800a770 <__kernel_cos+0x158>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 fe13 	bl	80002bc <__adddf3>
 800a696:	4622      	mov	r2, r4
 800a698:	462b      	mov	r3, r5
 800a69a:	f7f5 ffc5 	bl	8000628 <__aeabi_dmul>
 800a69e:	a336      	add	r3, pc, #216	; (adr r3, 800a778 <__kernel_cos+0x160>)
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	f7f5 fe08 	bl	80002b8 <__aeabi_dsub>
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	462b      	mov	r3, r5
 800a6ac:	f7f5 ffbc 	bl	8000628 <__aeabi_dmul>
 800a6b0:	a333      	add	r3, pc, #204	; (adr r3, 800a780 <__kernel_cos+0x168>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	f7f5 fe01 	bl	80002bc <__adddf3>
 800a6ba:	4622      	mov	r2, r4
 800a6bc:	462b      	mov	r3, r5
 800a6be:	f7f5 ffb3 	bl	8000628 <__aeabi_dmul>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	f7f5 ffaf 	bl	8000628 <__aeabi_dmul>
 800a6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	460d      	mov	r5, r1
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	f7f5 ffa7 	bl	8000628 <__aeabi_dmul>
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4602      	mov	r2, r0
 800a6de:	4629      	mov	r1, r5
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f7f5 fde9 	bl	80002b8 <__aeabi_dsub>
 800a6e6:	4b2b      	ldr	r3, [pc, #172]	; (800a794 <__kernel_cos+0x17c>)
 800a6e8:	4598      	cmp	r8, r3
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	460f      	mov	r7, r1
 800a6ee:	dc10      	bgt.n	800a712 <__kernel_cos+0xfa>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	4659      	mov	r1, fp
 800a6f8:	f7f5 fdde 	bl	80002b8 <__aeabi_dsub>
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4926      	ldr	r1, [pc, #152]	; (800a798 <__kernel_cos+0x180>)
 800a700:	4602      	mov	r2, r0
 800a702:	2000      	movs	r0, #0
 800a704:	f7f5 fdd8 	bl	80002b8 <__aeabi_dsub>
 800a708:	ec41 0b10 	vmov	d0, r0, r1
 800a70c:	b003      	add	sp, #12
 800a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a712:	4b22      	ldr	r3, [pc, #136]	; (800a79c <__kernel_cos+0x184>)
 800a714:	4920      	ldr	r1, [pc, #128]	; (800a798 <__kernel_cos+0x180>)
 800a716:	4598      	cmp	r8, r3
 800a718:	bfcc      	ite	gt
 800a71a:	4d21      	ldrgt	r5, [pc, #132]	; (800a7a0 <__kernel_cos+0x188>)
 800a71c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a720:	2400      	movs	r4, #0
 800a722:	4622      	mov	r2, r4
 800a724:	462b      	mov	r3, r5
 800a726:	2000      	movs	r0, #0
 800a728:	f7f5 fdc6 	bl	80002b8 <__aeabi_dsub>
 800a72c:	4622      	mov	r2, r4
 800a72e:	4680      	mov	r8, r0
 800a730:	4689      	mov	r9, r1
 800a732:	462b      	mov	r3, r5
 800a734:	4650      	mov	r0, sl
 800a736:	4659      	mov	r1, fp
 800a738:	f7f5 fdbe 	bl	80002b8 <__aeabi_dsub>
 800a73c:	4632      	mov	r2, r6
 800a73e:	463b      	mov	r3, r7
 800a740:	f7f5 fdba 	bl	80002b8 <__aeabi_dsub>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4640      	mov	r0, r8
 800a74a:	4649      	mov	r1, r9
 800a74c:	e7da      	b.n	800a704 <__kernel_cos+0xec>
 800a74e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a788 <__kernel_cos+0x170>
 800a752:	e7db      	b.n	800a70c <__kernel_cos+0xf4>
 800a754:	f3af 8000 	nop.w
 800a758:	be8838d4 	.word	0xbe8838d4
 800a75c:	bda8fae9 	.word	0xbda8fae9
 800a760:	bdb4b1c4 	.word	0xbdb4b1c4
 800a764:	3e21ee9e 	.word	0x3e21ee9e
 800a768:	809c52ad 	.word	0x809c52ad
 800a76c:	3e927e4f 	.word	0x3e927e4f
 800a770:	19cb1590 	.word	0x19cb1590
 800a774:	3efa01a0 	.word	0x3efa01a0
 800a778:	16c15177 	.word	0x16c15177
 800a77c:	3f56c16c 	.word	0x3f56c16c
 800a780:	5555554c 	.word	0x5555554c
 800a784:	3fa55555 	.word	0x3fa55555
 800a788:	00000000 	.word	0x00000000
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	3fe00000 	.word	0x3fe00000
 800a794:	3fd33332 	.word	0x3fd33332
 800a798:	3ff00000 	.word	0x3ff00000
 800a79c:	3fe90000 	.word	0x3fe90000
 800a7a0:	3fd20000 	.word	0x3fd20000
 800a7a4:	00000000 	.word	0x00000000

0800a7a8 <__kernel_rem_pio2>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	ed2d 8b02 	vpush	{d8}
 800a7b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a7b4:	f112 0f14 	cmn.w	r2, #20
 800a7b8:	9308      	str	r3, [sp, #32]
 800a7ba:	9101      	str	r1, [sp, #4]
 800a7bc:	4bc4      	ldr	r3, [pc, #784]	; (800aad0 <__kernel_rem_pio2+0x328>)
 800a7be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a7c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7c6:	9302      	str	r3, [sp, #8]
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7ce:	bfa8      	it	ge
 800a7d0:	1ed4      	subge	r4, r2, #3
 800a7d2:	9306      	str	r3, [sp, #24]
 800a7d4:	bfb2      	itee	lt
 800a7d6:	2400      	movlt	r4, #0
 800a7d8:	2318      	movge	r3, #24
 800a7da:	fb94 f4f3 	sdivge	r4, r4, r3
 800a7de:	f06f 0317 	mvn.w	r3, #23
 800a7e2:	fb04 3303 	mla	r3, r4, r3, r3
 800a7e6:	eb03 0a02 	add.w	sl, r3, r2
 800a7ea:	9b02      	ldr	r3, [sp, #8]
 800a7ec:	9a06      	ldr	r2, [sp, #24]
 800a7ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800aac0 <__kernel_rem_pio2+0x318>
 800a7f2:	eb03 0802 	add.w	r8, r3, r2
 800a7f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a7f8:	1aa7      	subs	r7, r4, r2
 800a7fa:	ae22      	add	r6, sp, #136	; 0x88
 800a7fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a800:	2500      	movs	r5, #0
 800a802:	4545      	cmp	r5, r8
 800a804:	dd13      	ble.n	800a82e <__kernel_rem_pio2+0x86>
 800a806:	9b08      	ldr	r3, [sp, #32]
 800a808:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800aac0 <__kernel_rem_pio2+0x318>
 800a80c:	aa22      	add	r2, sp, #136	; 0x88
 800a80e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a812:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a816:	f04f 0800 	mov.w	r8, #0
 800a81a:	9b02      	ldr	r3, [sp, #8]
 800a81c:	4598      	cmp	r8, r3
 800a81e:	dc2f      	bgt.n	800a880 <__kernel_rem_pio2+0xd8>
 800a820:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a824:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a828:	462f      	mov	r7, r5
 800a82a:	2600      	movs	r6, #0
 800a82c:	e01b      	b.n	800a866 <__kernel_rem_pio2+0xbe>
 800a82e:	42ef      	cmn	r7, r5
 800a830:	d407      	bmi.n	800a842 <__kernel_rem_pio2+0x9a>
 800a832:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a836:	f7f5 fe8d 	bl	8000554 <__aeabi_i2d>
 800a83a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a83e:	3501      	adds	r5, #1
 800a840:	e7df      	b.n	800a802 <__kernel_rem_pio2+0x5a>
 800a842:	ec51 0b18 	vmov	r0, r1, d8
 800a846:	e7f8      	b.n	800a83a <__kernel_rem_pio2+0x92>
 800a848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a84c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a850:	f7f5 feea 	bl	8000628 <__aeabi_dmul>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a85c:	f7f5 fd2e 	bl	80002bc <__adddf3>
 800a860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a864:	3601      	adds	r6, #1
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	429e      	cmp	r6, r3
 800a86a:	f1a7 0708 	sub.w	r7, r7, #8
 800a86e:	ddeb      	ble.n	800a848 <__kernel_rem_pio2+0xa0>
 800a870:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a874:	f108 0801 	add.w	r8, r8, #1
 800a878:	ecab 7b02 	vstmia	fp!, {d7}
 800a87c:	3508      	adds	r5, #8
 800a87e:	e7cc      	b.n	800a81a <__kernel_rem_pio2+0x72>
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	aa0e      	add	r2, sp, #56	; 0x38
 800a884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a888:	930d      	str	r3, [sp, #52]	; 0x34
 800a88a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a88c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a890:	9c02      	ldr	r4, [sp, #8]
 800a892:	930c      	str	r3, [sp, #48]	; 0x30
 800a894:	00e3      	lsls	r3, r4, #3
 800a896:	930a      	str	r3, [sp, #40]	; 0x28
 800a898:	ab9a      	add	r3, sp, #616	; 0x268
 800a89a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a89e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a8a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a8a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a8a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a8ac:	46c3      	mov	fp, r8
 800a8ae:	46a1      	mov	r9, r4
 800a8b0:	f1b9 0f00 	cmp.w	r9, #0
 800a8b4:	f1a5 0508 	sub.w	r5, r5, #8
 800a8b8:	dc77      	bgt.n	800a9aa <__kernel_rem_pio2+0x202>
 800a8ba:	ec47 6b10 	vmov	d0, r6, r7
 800a8be:	4650      	mov	r0, sl
 800a8c0:	f000 fc0a 	bl	800b0d8 <scalbn>
 800a8c4:	ec57 6b10 	vmov	r6, r7, d0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a8ce:	ee10 0a10 	vmov	r0, s0
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f5 fea8 	bl	8000628 <__aeabi_dmul>
 800a8d8:	ec41 0b10 	vmov	d0, r0, r1
 800a8dc:	f000 fb7c 	bl	800afd8 <floor>
 800a8e0:	4b7c      	ldr	r3, [pc, #496]	; (800aad4 <__kernel_rem_pio2+0x32c>)
 800a8e2:	ec51 0b10 	vmov	r0, r1, d0
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f7f5 fe9e 	bl	8000628 <__aeabi_dmul>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f5 fce0 	bl	80002b8 <__aeabi_dsub>
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	f7f6 f92e 	bl	8000b5c <__aeabi_d2iz>
 800a900:	9004      	str	r0, [sp, #16]
 800a902:	f7f5 fe27 	bl	8000554 <__aeabi_i2d>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4630      	mov	r0, r6
 800a90c:	4639      	mov	r1, r7
 800a90e:	f7f5 fcd3 	bl	80002b8 <__aeabi_dsub>
 800a912:	f1ba 0f00 	cmp.w	sl, #0
 800a916:	4606      	mov	r6, r0
 800a918:	460f      	mov	r7, r1
 800a91a:	dd6d      	ble.n	800a9f8 <__kernel_rem_pio2+0x250>
 800a91c:	1e62      	subs	r2, r4, #1
 800a91e:	ab0e      	add	r3, sp, #56	; 0x38
 800a920:	9d04      	ldr	r5, [sp, #16]
 800a922:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a926:	f1ca 0118 	rsb	r1, sl, #24
 800a92a:	fa40 f301 	asr.w	r3, r0, r1
 800a92e:	441d      	add	r5, r3
 800a930:	408b      	lsls	r3, r1
 800a932:	1ac0      	subs	r0, r0, r3
 800a934:	ab0e      	add	r3, sp, #56	; 0x38
 800a936:	9504      	str	r5, [sp, #16]
 800a938:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a93c:	f1ca 0317 	rsb	r3, sl, #23
 800a940:	fa40 fb03 	asr.w	fp, r0, r3
 800a944:	f1bb 0f00 	cmp.w	fp, #0
 800a948:	dd65      	ble.n	800aa16 <__kernel_rem_pio2+0x26e>
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	2200      	movs	r2, #0
 800a94e:	3301      	adds	r3, #1
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	4615      	mov	r5, r2
 800a954:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a958:	4294      	cmp	r4, r2
 800a95a:	f300 809c 	bgt.w	800aa96 <__kernel_rem_pio2+0x2ee>
 800a95e:	f1ba 0f00 	cmp.w	sl, #0
 800a962:	dd07      	ble.n	800a974 <__kernel_rem_pio2+0x1cc>
 800a964:	f1ba 0f01 	cmp.w	sl, #1
 800a968:	f000 80c0 	beq.w	800aaec <__kernel_rem_pio2+0x344>
 800a96c:	f1ba 0f02 	cmp.w	sl, #2
 800a970:	f000 80c6 	beq.w	800ab00 <__kernel_rem_pio2+0x358>
 800a974:	f1bb 0f02 	cmp.w	fp, #2
 800a978:	d14d      	bne.n	800aa16 <__kernel_rem_pio2+0x26e>
 800a97a:	4632      	mov	r2, r6
 800a97c:	463b      	mov	r3, r7
 800a97e:	4956      	ldr	r1, [pc, #344]	; (800aad8 <__kernel_rem_pio2+0x330>)
 800a980:	2000      	movs	r0, #0
 800a982:	f7f5 fc99 	bl	80002b8 <__aeabi_dsub>
 800a986:	4606      	mov	r6, r0
 800a988:	460f      	mov	r7, r1
 800a98a:	2d00      	cmp	r5, #0
 800a98c:	d043      	beq.n	800aa16 <__kernel_rem_pio2+0x26e>
 800a98e:	4650      	mov	r0, sl
 800a990:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800aac8 <__kernel_rem_pio2+0x320>
 800a994:	f000 fba0 	bl	800b0d8 <scalbn>
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	ec53 2b10 	vmov	r2, r3, d0
 800a9a0:	f7f5 fc8a 	bl	80002b8 <__aeabi_dsub>
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	460f      	mov	r7, r1
 800a9a8:	e035      	b.n	800aa16 <__kernel_rem_pio2+0x26e>
 800a9aa:	4b4c      	ldr	r3, [pc, #304]	; (800aadc <__kernel_rem_pio2+0x334>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f5 fe39 	bl	8000628 <__aeabi_dmul>
 800a9b6:	f7f6 f8d1 	bl	8000b5c <__aeabi_d2iz>
 800a9ba:	f7f5 fdcb 	bl	8000554 <__aeabi_i2d>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	ec43 2b18 	vmov	d8, r2, r3
 800a9c6:	4b46      	ldr	r3, [pc, #280]	; (800aae0 <__kernel_rem_pio2+0x338>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f7f5 fe2d 	bl	8000628 <__aeabi_dmul>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	f7f5 fc6f 	bl	80002b8 <__aeabi_dsub>
 800a9da:	f7f6 f8bf 	bl	8000b5c <__aeabi_d2iz>
 800a9de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9e2:	f84b 0b04 	str.w	r0, [fp], #4
 800a9e6:	ec51 0b18 	vmov	r0, r1, d8
 800a9ea:	f7f5 fc67 	bl	80002bc <__adddf3>
 800a9ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	e75b      	b.n	800a8b0 <__kernel_rem_pio2+0x108>
 800a9f8:	d106      	bne.n	800aa08 <__kernel_rem_pio2+0x260>
 800a9fa:	1e63      	subs	r3, r4, #1
 800a9fc:	aa0e      	add	r2, sp, #56	; 0x38
 800a9fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aa02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800aa06:	e79d      	b.n	800a944 <__kernel_rem_pio2+0x19c>
 800aa08:	4b36      	ldr	r3, [pc, #216]	; (800aae4 <__kernel_rem_pio2+0x33c>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f7f6 f892 	bl	8000b34 <__aeabi_dcmpge>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d13d      	bne.n	800aa90 <__kernel_rem_pio2+0x2e8>
 800aa14:	4683      	mov	fp, r0
 800aa16:	2200      	movs	r2, #0
 800aa18:	2300      	movs	r3, #0
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f6 f86b 	bl	8000af8 <__aeabi_dcmpeq>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f000 80c0 	beq.w	800aba8 <__kernel_rem_pio2+0x400>
 800aa28:	1e65      	subs	r5, r4, #1
 800aa2a:	462b      	mov	r3, r5
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	9902      	ldr	r1, [sp, #8]
 800aa30:	428b      	cmp	r3, r1
 800aa32:	da6c      	bge.n	800ab0e <__kernel_rem_pio2+0x366>
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	f000 8089 	beq.w	800ab4c <__kernel_rem_pio2+0x3a4>
 800aa3a:	ab0e      	add	r3, sp, #56	; 0x38
 800aa3c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 80ad 	beq.w	800aba4 <__kernel_rem_pio2+0x3fc>
 800aa4a:	4650      	mov	r0, sl
 800aa4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800aac8 <__kernel_rem_pio2+0x320>
 800aa50:	f000 fb42 	bl	800b0d8 <scalbn>
 800aa54:	ab9a      	add	r3, sp, #616	; 0x268
 800aa56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa5a:	ec57 6b10 	vmov	r6, r7, d0
 800aa5e:	00ec      	lsls	r4, r5, #3
 800aa60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800aa64:	46aa      	mov	sl, r5
 800aa66:	f1ba 0f00 	cmp.w	sl, #0
 800aa6a:	f280 80d6 	bge.w	800ac1a <__kernel_rem_pio2+0x472>
 800aa6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800aac0 <__kernel_rem_pio2+0x318>
 800aa72:	462e      	mov	r6, r5
 800aa74:	2e00      	cmp	r6, #0
 800aa76:	f2c0 8104 	blt.w	800ac82 <__kernel_rem_pio2+0x4da>
 800aa7a:	ab72      	add	r3, sp, #456	; 0x1c8
 800aa7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800aa80:	f8df a064 	ldr.w	sl, [pc, #100]	; 800aae8 <__kernel_rem_pio2+0x340>
 800aa84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aa88:	f04f 0800 	mov.w	r8, #0
 800aa8c:	1baf      	subs	r7, r5, r6
 800aa8e:	e0ea      	b.n	800ac66 <__kernel_rem_pio2+0x4be>
 800aa90:	f04f 0b02 	mov.w	fp, #2
 800aa94:	e759      	b.n	800a94a <__kernel_rem_pio2+0x1a2>
 800aa96:	f8d8 3000 	ldr.w	r3, [r8]
 800aa9a:	b955      	cbnz	r5, 800aab2 <__kernel_rem_pio2+0x30a>
 800aa9c:	b123      	cbz	r3, 800aaa8 <__kernel_rem_pio2+0x300>
 800aa9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aaa2:	f8c8 3000 	str.w	r3, [r8]
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	3201      	adds	r2, #1
 800aaaa:	f108 0804 	add.w	r8, r8, #4
 800aaae:	461d      	mov	r5, r3
 800aab0:	e752      	b.n	800a958 <__kernel_rem_pio2+0x1b0>
 800aab2:	1acb      	subs	r3, r1, r3
 800aab4:	f8c8 3000 	str.w	r3, [r8]
 800aab8:	462b      	mov	r3, r5
 800aaba:	e7f5      	b.n	800aaa8 <__kernel_rem_pio2+0x300>
 800aabc:	f3af 8000 	nop.w
	...
 800aacc:	3ff00000 	.word	0x3ff00000
 800aad0:	0800be60 	.word	0x0800be60
 800aad4:	40200000 	.word	0x40200000
 800aad8:	3ff00000 	.word	0x3ff00000
 800aadc:	3e700000 	.word	0x3e700000
 800aae0:	41700000 	.word	0x41700000
 800aae4:	3fe00000 	.word	0x3fe00000
 800aae8:	0800be20 	.word	0x0800be20
 800aaec:	1e62      	subs	r2, r4, #1
 800aaee:	ab0e      	add	r3, sp, #56	; 0x38
 800aaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aaf8:	a90e      	add	r1, sp, #56	; 0x38
 800aafa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aafe:	e739      	b.n	800a974 <__kernel_rem_pio2+0x1cc>
 800ab00:	1e62      	subs	r2, r4, #1
 800ab02:	ab0e      	add	r3, sp, #56	; 0x38
 800ab04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ab0c:	e7f4      	b.n	800aaf8 <__kernel_rem_pio2+0x350>
 800ab0e:	a90e      	add	r1, sp, #56	; 0x38
 800ab10:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ab14:	3b01      	subs	r3, #1
 800ab16:	430a      	orrs	r2, r1
 800ab18:	e789      	b.n	800aa2e <__kernel_rem_pio2+0x286>
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab20:	2900      	cmp	r1, #0
 800ab22:	d0fa      	beq.n	800ab1a <__kernel_rem_pio2+0x372>
 800ab24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab26:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ab2a:	446a      	add	r2, sp
 800ab2c:	3a98      	subs	r2, #152	; 0x98
 800ab2e:	920a      	str	r2, [sp, #40]	; 0x28
 800ab30:	9a08      	ldr	r2, [sp, #32]
 800ab32:	18e3      	adds	r3, r4, r3
 800ab34:	18a5      	adds	r5, r4, r2
 800ab36:	aa22      	add	r2, sp, #136	; 0x88
 800ab38:	f104 0801 	add.w	r8, r4, #1
 800ab3c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	9b04      	ldr	r3, [sp, #16]
 800ab44:	4543      	cmp	r3, r8
 800ab46:	da04      	bge.n	800ab52 <__kernel_rem_pio2+0x3aa>
 800ab48:	461c      	mov	r4, r3
 800ab4a:	e6a3      	b.n	800a894 <__kernel_rem_pio2+0xec>
 800ab4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7e4      	b.n	800ab1c <__kernel_rem_pio2+0x374>
 800ab52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab54:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ab58:	f7f5 fcfc 	bl	8000554 <__aeabi_i2d>
 800ab5c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ab60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab62:	46ab      	mov	fp, r5
 800ab64:	461c      	mov	r4, r3
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	2700      	movs	r7, #0
 800ab6e:	9b06      	ldr	r3, [sp, #24]
 800ab70:	4599      	cmp	r9, r3
 800ab72:	dd06      	ble.n	800ab82 <__kernel_rem_pio2+0x3da>
 800ab74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab76:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ab7a:	f108 0801 	add.w	r8, r8, #1
 800ab7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab80:	e7df      	b.n	800ab42 <__kernel_rem_pio2+0x39a>
 800ab82:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ab86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ab8a:	f7f5 fd4d 	bl	8000628 <__aeabi_dmul>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4630      	mov	r0, r6
 800ab94:	4639      	mov	r1, r7
 800ab96:	f7f5 fb91 	bl	80002bc <__adddf3>
 800ab9a:	f109 0901 	add.w	r9, r9, #1
 800ab9e:	4606      	mov	r6, r0
 800aba0:	460f      	mov	r7, r1
 800aba2:	e7e4      	b.n	800ab6e <__kernel_rem_pio2+0x3c6>
 800aba4:	3d01      	subs	r5, #1
 800aba6:	e748      	b.n	800aa3a <__kernel_rem_pio2+0x292>
 800aba8:	ec47 6b10 	vmov	d0, r6, r7
 800abac:	f1ca 0000 	rsb	r0, sl, #0
 800abb0:	f000 fa92 	bl	800b0d8 <scalbn>
 800abb4:	ec57 6b10 	vmov	r6, r7, d0
 800abb8:	4ba0      	ldr	r3, [pc, #640]	; (800ae3c <__kernel_rem_pio2+0x694>)
 800abba:	ee10 0a10 	vmov	r0, s0
 800abbe:	2200      	movs	r2, #0
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 ffb7 	bl	8000b34 <__aeabi_dcmpge>
 800abc6:	b1f8      	cbz	r0, 800ac08 <__kernel_rem_pio2+0x460>
 800abc8:	4b9d      	ldr	r3, [pc, #628]	; (800ae40 <__kernel_rem_pio2+0x698>)
 800abca:	2200      	movs	r2, #0
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	f7f5 fd2a 	bl	8000628 <__aeabi_dmul>
 800abd4:	f7f5 ffc2 	bl	8000b5c <__aeabi_d2iz>
 800abd8:	4680      	mov	r8, r0
 800abda:	f7f5 fcbb 	bl	8000554 <__aeabi_i2d>
 800abde:	4b97      	ldr	r3, [pc, #604]	; (800ae3c <__kernel_rem_pio2+0x694>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	f7f5 fd21 	bl	8000628 <__aeabi_dmul>
 800abe6:	460b      	mov	r3, r1
 800abe8:	4602      	mov	r2, r0
 800abea:	4639      	mov	r1, r7
 800abec:	4630      	mov	r0, r6
 800abee:	f7f5 fb63 	bl	80002b8 <__aeabi_dsub>
 800abf2:	f7f5 ffb3 	bl	8000b5c <__aeabi_d2iz>
 800abf6:	1c65      	adds	r5, r4, #1
 800abf8:	ab0e      	add	r3, sp, #56	; 0x38
 800abfa:	f10a 0a18 	add.w	sl, sl, #24
 800abfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac02:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ac06:	e720      	b.n	800aa4a <__kernel_rem_pio2+0x2a2>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	f7f5 ffa6 	bl	8000b5c <__aeabi_d2iz>
 800ac10:	ab0e      	add	r3, sp, #56	; 0x38
 800ac12:	4625      	mov	r5, r4
 800ac14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac18:	e717      	b.n	800aa4a <__kernel_rem_pio2+0x2a2>
 800ac1a:	ab0e      	add	r3, sp, #56	; 0x38
 800ac1c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac20:	f7f5 fc98 	bl	8000554 <__aeabi_i2d>
 800ac24:	4632      	mov	r2, r6
 800ac26:	463b      	mov	r3, r7
 800ac28:	f7f5 fcfe 	bl	8000628 <__aeabi_dmul>
 800ac2c:	4b84      	ldr	r3, [pc, #528]	; (800ae40 <__kernel_rem_pio2+0x698>)
 800ac2e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ac32:	2200      	movs	r2, #0
 800ac34:	4630      	mov	r0, r6
 800ac36:	4639      	mov	r1, r7
 800ac38:	f7f5 fcf6 	bl	8000628 <__aeabi_dmul>
 800ac3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac40:	4606      	mov	r6, r0
 800ac42:	460f      	mov	r7, r1
 800ac44:	e70f      	b.n	800aa66 <__kernel_rem_pio2+0x2be>
 800ac46:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ac4a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ac4e:	f7f5 fceb 	bl	8000628 <__aeabi_dmul>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac5a:	f7f5 fb2f 	bl	80002bc <__adddf3>
 800ac5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac62:	f108 0801 	add.w	r8, r8, #1
 800ac66:	9b02      	ldr	r3, [sp, #8]
 800ac68:	4598      	cmp	r8, r3
 800ac6a:	dc01      	bgt.n	800ac70 <__kernel_rem_pio2+0x4c8>
 800ac6c:	45b8      	cmp	r8, r7
 800ac6e:	ddea      	ble.n	800ac46 <__kernel_rem_pio2+0x49e>
 800ac70:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ac74:	ab4a      	add	r3, sp, #296	; 0x128
 800ac76:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ac7a:	ed87 7b00 	vstr	d7, [r7]
 800ac7e:	3e01      	subs	r6, #1
 800ac80:	e6f8      	b.n	800aa74 <__kernel_rem_pio2+0x2cc>
 800ac82:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	dc0b      	bgt.n	800aca0 <__kernel_rem_pio2+0x4f8>
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	dc35      	bgt.n	800acf8 <__kernel_rem_pio2+0x550>
 800ac8c:	d059      	beq.n	800ad42 <__kernel_rem_pio2+0x59a>
 800ac8e:	9b04      	ldr	r3, [sp, #16]
 800ac90:	f003 0007 	and.w	r0, r3, #7
 800ac94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ac98:	ecbd 8b02 	vpop	{d8}
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d1f3      	bne.n	800ac8e <__kernel_rem_pio2+0x4e6>
 800aca6:	ab4a      	add	r3, sp, #296	; 0x128
 800aca8:	4423      	add	r3, r4
 800acaa:	9306      	str	r3, [sp, #24]
 800acac:	461c      	mov	r4, r3
 800acae:	469a      	mov	sl, r3
 800acb0:	9502      	str	r5, [sp, #8]
 800acb2:	9b02      	ldr	r3, [sp, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f1aa 0a08 	sub.w	sl, sl, #8
 800acba:	dc6b      	bgt.n	800ad94 <__kernel_rem_pio2+0x5ec>
 800acbc:	46aa      	mov	sl, r5
 800acbe:	f1ba 0f01 	cmp.w	sl, #1
 800acc2:	f1a4 0408 	sub.w	r4, r4, #8
 800acc6:	f300 8085 	bgt.w	800add4 <__kernel_rem_pio2+0x62c>
 800acca:	9c06      	ldr	r4, [sp, #24]
 800accc:	2000      	movs	r0, #0
 800acce:	3408      	adds	r4, #8
 800acd0:	2100      	movs	r1, #0
 800acd2:	2d01      	cmp	r5, #1
 800acd4:	f300 809d 	bgt.w	800ae12 <__kernel_rem_pio2+0x66a>
 800acd8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800acdc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ace0:	f1bb 0f00 	cmp.w	fp, #0
 800ace4:	f040 809b 	bne.w	800ae1e <__kernel_rem_pio2+0x676>
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	e9c3 5600 	strd	r5, r6, [r3]
 800acee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800acf2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800acf6:	e7ca      	b.n	800ac8e <__kernel_rem_pio2+0x4e6>
 800acf8:	3408      	adds	r4, #8
 800acfa:	ab4a      	add	r3, sp, #296	; 0x128
 800acfc:	441c      	add	r4, r3
 800acfe:	462e      	mov	r6, r5
 800ad00:	2000      	movs	r0, #0
 800ad02:	2100      	movs	r1, #0
 800ad04:	2e00      	cmp	r6, #0
 800ad06:	da36      	bge.n	800ad76 <__kernel_rem_pio2+0x5ce>
 800ad08:	f1bb 0f00 	cmp.w	fp, #0
 800ad0c:	d039      	beq.n	800ad82 <__kernel_rem_pio2+0x5da>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad14:	9c01      	ldr	r4, [sp, #4]
 800ad16:	e9c4 2300 	strd	r2, r3, [r4]
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ad22:	f7f5 fac9 	bl	80002b8 <__aeabi_dsub>
 800ad26:	ae4c      	add	r6, sp, #304	; 0x130
 800ad28:	2401      	movs	r4, #1
 800ad2a:	42a5      	cmp	r5, r4
 800ad2c:	da2c      	bge.n	800ad88 <__kernel_rem_pio2+0x5e0>
 800ad2e:	f1bb 0f00 	cmp.w	fp, #0
 800ad32:	d002      	beq.n	800ad3a <__kernel_rem_pio2+0x592>
 800ad34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad38:	4619      	mov	r1, r3
 800ad3a:	9b01      	ldr	r3, [sp, #4]
 800ad3c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ad40:	e7a5      	b.n	800ac8e <__kernel_rem_pio2+0x4e6>
 800ad42:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ad46:	eb0d 0403 	add.w	r4, sp, r3
 800ad4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ad4e:	2000      	movs	r0, #0
 800ad50:	2100      	movs	r1, #0
 800ad52:	2d00      	cmp	r5, #0
 800ad54:	da09      	bge.n	800ad6a <__kernel_rem_pio2+0x5c2>
 800ad56:	f1bb 0f00 	cmp.w	fp, #0
 800ad5a:	d002      	beq.n	800ad62 <__kernel_rem_pio2+0x5ba>
 800ad5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad60:	4619      	mov	r1, r3
 800ad62:	9b01      	ldr	r3, [sp, #4]
 800ad64:	e9c3 0100 	strd	r0, r1, [r3]
 800ad68:	e791      	b.n	800ac8e <__kernel_rem_pio2+0x4e6>
 800ad6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad6e:	f7f5 faa5 	bl	80002bc <__adddf3>
 800ad72:	3d01      	subs	r5, #1
 800ad74:	e7ed      	b.n	800ad52 <__kernel_rem_pio2+0x5aa>
 800ad76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad7a:	f7f5 fa9f 	bl	80002bc <__adddf3>
 800ad7e:	3e01      	subs	r6, #1
 800ad80:	e7c0      	b.n	800ad04 <__kernel_rem_pio2+0x55c>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	e7c5      	b.n	800ad14 <__kernel_rem_pio2+0x56c>
 800ad88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ad8c:	f7f5 fa96 	bl	80002bc <__adddf3>
 800ad90:	3401      	adds	r4, #1
 800ad92:	e7ca      	b.n	800ad2a <__kernel_rem_pio2+0x582>
 800ad94:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	9302      	str	r3, [sp, #8]
 800ada2:	4632      	mov	r2, r6
 800ada4:	463b      	mov	r3, r7
 800ada6:	4640      	mov	r0, r8
 800ada8:	4649      	mov	r1, r9
 800adaa:	f7f5 fa87 	bl	80002bc <__adddf3>
 800adae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800adb2:	4602      	mov	r2, r0
 800adb4:	460b      	mov	r3, r1
 800adb6:	4640      	mov	r0, r8
 800adb8:	4649      	mov	r1, r9
 800adba:	f7f5 fa7d 	bl	80002b8 <__aeabi_dsub>
 800adbe:	4632      	mov	r2, r6
 800adc0:	463b      	mov	r3, r7
 800adc2:	f7f5 fa7b 	bl	80002bc <__adddf3>
 800adc6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800adca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800adce:	ed8a 7b00 	vstr	d7, [sl]
 800add2:	e76e      	b.n	800acb2 <__kernel_rem_pio2+0x50a>
 800add4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800add8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800addc:	4640      	mov	r0, r8
 800adde:	4632      	mov	r2, r6
 800ade0:	463b      	mov	r3, r7
 800ade2:	4649      	mov	r1, r9
 800ade4:	f7f5 fa6a 	bl	80002bc <__adddf3>
 800ade8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4640      	mov	r0, r8
 800adf2:	4649      	mov	r1, r9
 800adf4:	f7f5 fa60 	bl	80002b8 <__aeabi_dsub>
 800adf8:	4632      	mov	r2, r6
 800adfa:	463b      	mov	r3, r7
 800adfc:	f7f5 fa5e 	bl	80002bc <__adddf3>
 800ae00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae08:	ed84 7b00 	vstr	d7, [r4]
 800ae0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae10:	e755      	b.n	800acbe <__kernel_rem_pio2+0x516>
 800ae12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae16:	f7f5 fa51 	bl	80002bc <__adddf3>
 800ae1a:	3d01      	subs	r5, #1
 800ae1c:	e759      	b.n	800acd2 <__kernel_rem_pio2+0x52a>
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	9a01      	ldr	r2, [sp, #4]
 800ae22:	601d      	str	r5, [r3, #0]
 800ae24:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ae28:	605c      	str	r4, [r3, #4]
 800ae2a:	609f      	str	r7, [r3, #8]
 800ae2c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ae30:	60d3      	str	r3, [r2, #12]
 800ae32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae36:	6110      	str	r0, [r2, #16]
 800ae38:	6153      	str	r3, [r2, #20]
 800ae3a:	e728      	b.n	800ac8e <__kernel_rem_pio2+0x4e6>
 800ae3c:	41700000 	.word	0x41700000
 800ae40:	3e700000 	.word	0x3e700000
 800ae44:	00000000 	.word	0x00000000

0800ae48 <__kernel_sin>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	ed2d 8b04 	vpush	{d8-d9}
 800ae50:	eeb0 8a41 	vmov.f32	s16, s2
 800ae54:	eef0 8a61 	vmov.f32	s17, s3
 800ae58:	ec55 4b10 	vmov	r4, r5, d0
 800ae5c:	b083      	sub	sp, #12
 800ae5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ae66:	9001      	str	r0, [sp, #4]
 800ae68:	da06      	bge.n	800ae78 <__kernel_sin+0x30>
 800ae6a:	ee10 0a10 	vmov	r0, s0
 800ae6e:	4629      	mov	r1, r5
 800ae70:	f7f5 fe74 	bl	8000b5c <__aeabi_d2iz>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d051      	beq.n	800af1c <__kernel_sin+0xd4>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f7f5 fbd2 	bl	8000628 <__aeabi_dmul>
 800ae84:	4682      	mov	sl, r0
 800ae86:	468b      	mov	fp, r1
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	4629      	mov	r1, r5
 800ae90:	f7f5 fbca 	bl	8000628 <__aeabi_dmul>
 800ae94:	a341      	add	r3, pc, #260	; (adr r3, 800af9c <__kernel_sin+0x154>)
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	4689      	mov	r9, r1
 800ae9e:	4650      	mov	r0, sl
 800aea0:	4659      	mov	r1, fp
 800aea2:	f7f5 fbc1 	bl	8000628 <__aeabi_dmul>
 800aea6:	a33f      	add	r3, pc, #252	; (adr r3, 800afa4 <__kernel_sin+0x15c>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f7f5 fa04 	bl	80002b8 <__aeabi_dsub>
 800aeb0:	4652      	mov	r2, sl
 800aeb2:	465b      	mov	r3, fp
 800aeb4:	f7f5 fbb8 	bl	8000628 <__aeabi_dmul>
 800aeb8:	a33c      	add	r3, pc, #240	; (adr r3, 800afac <__kernel_sin+0x164>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f7f5 f9fd 	bl	80002bc <__adddf3>
 800aec2:	4652      	mov	r2, sl
 800aec4:	465b      	mov	r3, fp
 800aec6:	f7f5 fbaf 	bl	8000628 <__aeabi_dmul>
 800aeca:	a33a      	add	r3, pc, #232	; (adr r3, 800afb4 <__kernel_sin+0x16c>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 f9f2 	bl	80002b8 <__aeabi_dsub>
 800aed4:	4652      	mov	r2, sl
 800aed6:	465b      	mov	r3, fp
 800aed8:	f7f5 fba6 	bl	8000628 <__aeabi_dmul>
 800aedc:	a337      	add	r3, pc, #220	; (adr r3, 800afbc <__kernel_sin+0x174>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f7f5 f9eb 	bl	80002bc <__adddf3>
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	4606      	mov	r6, r0
 800aeea:	460f      	mov	r7, r1
 800aeec:	b9eb      	cbnz	r3, 800af2a <__kernel_sin+0xe2>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4650      	mov	r0, sl
 800aef4:	4659      	mov	r1, fp
 800aef6:	f7f5 fb97 	bl	8000628 <__aeabi_dmul>
 800aefa:	a325      	add	r3, pc, #148	; (adr r3, 800af90 <__kernel_sin+0x148>)
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f7f5 f9da 	bl	80002b8 <__aeabi_dsub>
 800af04:	4642      	mov	r2, r8
 800af06:	464b      	mov	r3, r9
 800af08:	f7f5 fb8e 	bl	8000628 <__aeabi_dmul>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4620      	mov	r0, r4
 800af12:	4629      	mov	r1, r5
 800af14:	f7f5 f9d2 	bl	80002bc <__adddf3>
 800af18:	4604      	mov	r4, r0
 800af1a:	460d      	mov	r5, r1
 800af1c:	ec45 4b10 	vmov	d0, r4, r5
 800af20:	b003      	add	sp, #12
 800af22:	ecbd 8b04 	vpop	{d8-d9}
 800af26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2a:	4b1b      	ldr	r3, [pc, #108]	; (800af98 <__kernel_sin+0x150>)
 800af2c:	ec51 0b18 	vmov	r0, r1, d8
 800af30:	2200      	movs	r2, #0
 800af32:	f7f5 fb79 	bl	8000628 <__aeabi_dmul>
 800af36:	4632      	mov	r2, r6
 800af38:	ec41 0b19 	vmov	d9, r0, r1
 800af3c:	463b      	mov	r3, r7
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 fb71 	bl	8000628 <__aeabi_dmul>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	ec51 0b19 	vmov	r0, r1, d9
 800af4e:	f7f5 f9b3 	bl	80002b8 <__aeabi_dsub>
 800af52:	4652      	mov	r2, sl
 800af54:	465b      	mov	r3, fp
 800af56:	f7f5 fb67 	bl	8000628 <__aeabi_dmul>
 800af5a:	ec53 2b18 	vmov	r2, r3, d8
 800af5e:	f7f5 f9ab 	bl	80002b8 <__aeabi_dsub>
 800af62:	a30b      	add	r3, pc, #44	; (adr r3, 800af90 <__kernel_sin+0x148>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	4606      	mov	r6, r0
 800af6a:	460f      	mov	r7, r1
 800af6c:	4640      	mov	r0, r8
 800af6e:	4649      	mov	r1, r9
 800af70:	f7f5 fb5a 	bl	8000628 <__aeabi_dmul>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f7f5 f99e 	bl	80002bc <__adddf3>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	4620      	mov	r0, r4
 800af86:	4629      	mov	r1, r5
 800af88:	f7f5 f996 	bl	80002b8 <__aeabi_dsub>
 800af8c:	e7c4      	b.n	800af18 <__kernel_sin+0xd0>
 800af8e:	bf00      	nop
 800af90:	55555549 	.word	0x55555549
 800af94:	3fc55555 	.word	0x3fc55555
 800af98:	3fe00000 	.word	0x3fe00000
 800af9c:	5acfd57c 	.word	0x5acfd57c
 800afa0:	3de5d93a 	.word	0x3de5d93a
 800afa4:	8a2b9ceb 	.word	0x8a2b9ceb
 800afa8:	3e5ae5e6 	.word	0x3e5ae5e6
 800afac:	57b1fe7d 	.word	0x57b1fe7d
 800afb0:	3ec71de3 	.word	0x3ec71de3
 800afb4:	19c161d5 	.word	0x19c161d5
 800afb8:	3f2a01a0 	.word	0x3f2a01a0
 800afbc:	1110f8a6 	.word	0x1110f8a6
 800afc0:	3f811111 	.word	0x3f811111

0800afc4 <fabs>:
 800afc4:	ec51 0b10 	vmov	r0, r1, d0
 800afc8:	ee10 2a10 	vmov	r2, s0
 800afcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800afd0:	ec43 2b10 	vmov	d0, r2, r3
 800afd4:	4770      	bx	lr
	...

0800afd8 <floor>:
 800afd8:	ec51 0b10 	vmov	r0, r1, d0
 800afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800afe4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800afe8:	2e13      	cmp	r6, #19
 800afea:	ee10 5a10 	vmov	r5, s0
 800afee:	ee10 8a10 	vmov	r8, s0
 800aff2:	460c      	mov	r4, r1
 800aff4:	dc32      	bgt.n	800b05c <floor+0x84>
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	da14      	bge.n	800b024 <floor+0x4c>
 800affa:	a333      	add	r3, pc, #204	; (adr r3, 800b0c8 <floor+0xf0>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 f95c 	bl	80002bc <__adddf3>
 800b004:	2200      	movs	r2, #0
 800b006:	2300      	movs	r3, #0
 800b008:	f7f5 fd9e 	bl	8000b48 <__aeabi_dcmpgt>
 800b00c:	b138      	cbz	r0, 800b01e <floor+0x46>
 800b00e:	2c00      	cmp	r4, #0
 800b010:	da57      	bge.n	800b0c2 <floor+0xea>
 800b012:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b016:	431d      	orrs	r5, r3
 800b018:	d001      	beq.n	800b01e <floor+0x46>
 800b01a:	4c2d      	ldr	r4, [pc, #180]	; (800b0d0 <floor+0xf8>)
 800b01c:	2500      	movs	r5, #0
 800b01e:	4621      	mov	r1, r4
 800b020:	4628      	mov	r0, r5
 800b022:	e025      	b.n	800b070 <floor+0x98>
 800b024:	4f2b      	ldr	r7, [pc, #172]	; (800b0d4 <floor+0xfc>)
 800b026:	4137      	asrs	r7, r6
 800b028:	ea01 0307 	and.w	r3, r1, r7
 800b02c:	4303      	orrs	r3, r0
 800b02e:	d01f      	beq.n	800b070 <floor+0x98>
 800b030:	a325      	add	r3, pc, #148	; (adr r3, 800b0c8 <floor+0xf0>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 f941 	bl	80002bc <__adddf3>
 800b03a:	2200      	movs	r2, #0
 800b03c:	2300      	movs	r3, #0
 800b03e:	f7f5 fd83 	bl	8000b48 <__aeabi_dcmpgt>
 800b042:	2800      	cmp	r0, #0
 800b044:	d0eb      	beq.n	800b01e <floor+0x46>
 800b046:	2c00      	cmp	r4, #0
 800b048:	bfbe      	ittt	lt
 800b04a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b04e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b052:	19a4      	addlt	r4, r4, r6
 800b054:	ea24 0407 	bic.w	r4, r4, r7
 800b058:	2500      	movs	r5, #0
 800b05a:	e7e0      	b.n	800b01e <floor+0x46>
 800b05c:	2e33      	cmp	r6, #51	; 0x33
 800b05e:	dd0b      	ble.n	800b078 <floor+0xa0>
 800b060:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b064:	d104      	bne.n	800b070 <floor+0x98>
 800b066:	ee10 2a10 	vmov	r2, s0
 800b06a:	460b      	mov	r3, r1
 800b06c:	f7f5 f926 	bl	80002bc <__adddf3>
 800b070:	ec41 0b10 	vmov	d0, r0, r1
 800b074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b078:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b07c:	f04f 33ff 	mov.w	r3, #4294967295
 800b080:	fa23 f707 	lsr.w	r7, r3, r7
 800b084:	4207      	tst	r7, r0
 800b086:	d0f3      	beq.n	800b070 <floor+0x98>
 800b088:	a30f      	add	r3, pc, #60	; (adr r3, 800b0c8 <floor+0xf0>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 f915 	bl	80002bc <__adddf3>
 800b092:	2200      	movs	r2, #0
 800b094:	2300      	movs	r3, #0
 800b096:	f7f5 fd57 	bl	8000b48 <__aeabi_dcmpgt>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d0bf      	beq.n	800b01e <floor+0x46>
 800b09e:	2c00      	cmp	r4, #0
 800b0a0:	da02      	bge.n	800b0a8 <floor+0xd0>
 800b0a2:	2e14      	cmp	r6, #20
 800b0a4:	d103      	bne.n	800b0ae <floor+0xd6>
 800b0a6:	3401      	adds	r4, #1
 800b0a8:	ea25 0507 	bic.w	r5, r5, r7
 800b0ac:	e7b7      	b.n	800b01e <floor+0x46>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b0b4:	fa03 f606 	lsl.w	r6, r3, r6
 800b0b8:	4435      	add	r5, r6
 800b0ba:	4545      	cmp	r5, r8
 800b0bc:	bf38      	it	cc
 800b0be:	18e4      	addcc	r4, r4, r3
 800b0c0:	e7f2      	b.n	800b0a8 <floor+0xd0>
 800b0c2:	2500      	movs	r5, #0
 800b0c4:	462c      	mov	r4, r5
 800b0c6:	e7aa      	b.n	800b01e <floor+0x46>
 800b0c8:	8800759c 	.word	0x8800759c
 800b0cc:	7e37e43c 	.word	0x7e37e43c
 800b0d0:	bff00000 	.word	0xbff00000
 800b0d4:	000fffff 	.word	0x000fffff

0800b0d8 <scalbn>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	ec55 4b10 	vmov	r4, r5, d0
 800b0de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	462b      	mov	r3, r5
 800b0e6:	b99a      	cbnz	r2, 800b110 <scalbn+0x38>
 800b0e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b0ec:	4323      	orrs	r3, r4
 800b0ee:	d036      	beq.n	800b15e <scalbn+0x86>
 800b0f0:	4b39      	ldr	r3, [pc, #228]	; (800b1d8 <scalbn+0x100>)
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	ee10 0a10 	vmov	r0, s0
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f7f5 fa95 	bl	8000628 <__aeabi_dmul>
 800b0fe:	4b37      	ldr	r3, [pc, #220]	; (800b1dc <scalbn+0x104>)
 800b100:	429e      	cmp	r6, r3
 800b102:	4604      	mov	r4, r0
 800b104:	460d      	mov	r5, r1
 800b106:	da10      	bge.n	800b12a <scalbn+0x52>
 800b108:	a32b      	add	r3, pc, #172	; (adr r3, 800b1b8 <scalbn+0xe0>)
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	e03a      	b.n	800b186 <scalbn+0xae>
 800b110:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b114:	428a      	cmp	r2, r1
 800b116:	d10c      	bne.n	800b132 <scalbn+0x5a>
 800b118:	ee10 2a10 	vmov	r2, s0
 800b11c:	4620      	mov	r0, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	f7f5 f8cc 	bl	80002bc <__adddf3>
 800b124:	4604      	mov	r4, r0
 800b126:	460d      	mov	r5, r1
 800b128:	e019      	b.n	800b15e <scalbn+0x86>
 800b12a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b12e:	460b      	mov	r3, r1
 800b130:	3a36      	subs	r2, #54	; 0x36
 800b132:	4432      	add	r2, r6
 800b134:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b138:	428a      	cmp	r2, r1
 800b13a:	dd08      	ble.n	800b14e <scalbn+0x76>
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	a120      	add	r1, pc, #128	; (adr r1, 800b1c0 <scalbn+0xe8>)
 800b140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b144:	da1c      	bge.n	800b180 <scalbn+0xa8>
 800b146:	a120      	add	r1, pc, #128	; (adr r1, 800b1c8 <scalbn+0xf0>)
 800b148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b14c:	e018      	b.n	800b180 <scalbn+0xa8>
 800b14e:	2a00      	cmp	r2, #0
 800b150:	dd08      	ble.n	800b164 <scalbn+0x8c>
 800b152:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b156:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b15a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b15e:	ec45 4b10 	vmov	d0, r4, r5
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b168:	da19      	bge.n	800b19e <scalbn+0xc6>
 800b16a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b16e:	429e      	cmp	r6, r3
 800b170:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b174:	dd0a      	ble.n	800b18c <scalbn+0xb4>
 800b176:	a112      	add	r1, pc, #72	; (adr r1, 800b1c0 <scalbn+0xe8>)
 800b178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e2      	bne.n	800b146 <scalbn+0x6e>
 800b180:	a30f      	add	r3, pc, #60	; (adr r3, 800b1c0 <scalbn+0xe8>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f7f5 fa4f 	bl	8000628 <__aeabi_dmul>
 800b18a:	e7cb      	b.n	800b124 <scalbn+0x4c>
 800b18c:	a10a      	add	r1, pc, #40	; (adr r1, 800b1b8 <scalbn+0xe0>)
 800b18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d0b8      	beq.n	800b108 <scalbn+0x30>
 800b196:	a10e      	add	r1, pc, #56	; (adr r1, 800b1d0 <scalbn+0xf8>)
 800b198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19c:	e7b4      	b.n	800b108 <scalbn+0x30>
 800b19e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b1a2:	3236      	adds	r2, #54	; 0x36
 800b1a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b1a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	4b0c      	ldr	r3, [pc, #48]	; (800b1e0 <scalbn+0x108>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	e7e8      	b.n	800b186 <scalbn+0xae>
 800b1b4:	f3af 8000 	nop.w
 800b1b8:	c2f8f359 	.word	0xc2f8f359
 800b1bc:	01a56e1f 	.word	0x01a56e1f
 800b1c0:	8800759c 	.word	0x8800759c
 800b1c4:	7e37e43c 	.word	0x7e37e43c
 800b1c8:	8800759c 	.word	0x8800759c
 800b1cc:	fe37e43c 	.word	0xfe37e43c
 800b1d0:	c2f8f359 	.word	0xc2f8f359
 800b1d4:	81a56e1f 	.word	0x81a56e1f
 800b1d8:	43500000 	.word	0x43500000
 800b1dc:	ffff3cb0 	.word	0xffff3cb0
 800b1e0:	3c900000 	.word	0x3c900000

0800b1e4 <_init>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	bf00      	nop
 800b1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ea:	bc08      	pop	{r3}
 800b1ec:	469e      	mov	lr, r3
 800b1ee:	4770      	bx	lr

0800b1f0 <_fini>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr
